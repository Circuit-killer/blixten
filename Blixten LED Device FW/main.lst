
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .ARM.extab.text.rt_init_stack	00000000 .ARM.extab.text.rt_init_stack
08000194 l    d  .ARM.extab.text.rt_ret_regs	00000000 .ARM.extab.text.rt_ret_regs
080001a0 l    d  .ARM.extab.text.rt_ret_val	00000000 .ARM.extab.text.rt_ret_val
080001ac l    d  .ARM.extab.text.rt_ret_val2	00000000 .ARM.extab.text.rt_ret_val2
080001b8 l    d  .ARM.extab.text.rt_ms2tick	00000000 .ARM.extab.text.rt_ms2tick
080001c4 l    d  .ARM.extab.text.rt_tid2ptcb	00000000 .ARM.extab.text.rt_tid2ptcb
080001d0 l    d  .ARM.extab.text.rt_id2obj	00000000 .ARM.extab.text.rt_id2obj
080001dc l    d  .ARM.extab.text.svcKernelInitialize	00000000 .ARM.extab.text.svcKernelInitialize
080001e8 l    d  .ARM.extab.text.svcKernelStart	00000000 .ARM.extab.text.svcKernelStart
080001f4 l    d  .ARM.extab.text.osKernelInitialize	00000000 .ARM.extab.text.osKernelInitialize
08000200 l    d  .ARM.extab.text.osKernelStart	00000000 .ARM.extab.text.osKernelStart
0800020c l    d  .ARM.extab.text.sysThreadError	00000000 .ARM.extab.text.sysThreadError
08000218 l    d  .ARM.extab.text.svcThreadCreate	00000000 .ARM.extab.text.svcThreadCreate
08000224 l    d  .ARM.extab.text.svcThreadGetId	00000000 .ARM.extab.text.svcThreadGetId
08000230 l    d  .ARM.extab.text.svcThreadTerminate	00000000 .ARM.extab.text.svcThreadTerminate
0800023c l    d  .ARM.extab.text.osThreadCreate	00000000 .ARM.extab.text.osThreadCreate
08000248 l    d  .ARM.extab.text.osThreadYield	00000000 .ARM.extab.text.osThreadYield
08000254 l    d  .ARM.extab.text.osThreadExit	00000000 .ARM.extab.text.osThreadExit
08000260 l    d  .ARM.extab.text.svcDelay	00000000 .ARM.extab.text.svcDelay
0800026c l    d  .ARM.extab.text.osDelay	00000000 .ARM.extab.text.osDelay
08000278 l    d  .ARM.extab.text.rt_timer_insert	00000000 .ARM.extab.text.rt_timer_insert
08000284 l    d  .ARM.extab.text.svcTimerCall	00000000 .ARM.extab.text.svcTimerCall
08000290 l    d  .ARM.extab.text.sysTimerTick	00000000 .ARM.extab.text.sysTimerTick
0800029c l    d  .ARM.extab.text.osTimerCall	00000000 .ARM.extab.text.osTimerCall
080002a8 l    d  .ARM.extab.text.osTimerThread	00000000 .ARM.extab.text.osTimerThread
080002b4 l    d  .ARM.extab.text.svcMessageCreate	00000000 .ARM.extab.text.svcMessageCreate
080002c0 l    d  .ARM.extab.text.isrMessagePut	00000000 .ARM.extab.text.isrMessagePut
080002cc l    d  .ARM.extab.text.isrMessageGet	00000000 .ARM.extab.text.isrMessageGet
080002d8 l    d  .ARM.extab.text.osMessageGet	00000000 .ARM.extab.text.osMessageGet
080002e4 l    d  .ARM.extab.text.rt_evt_psh	00000000 .ARM.extab.text.rt_evt_psh
080002f0 l    d  .ARM.extab.text.rt_inc_qi	00000000 .ARM.extab.text.rt_inc_qi
080002fc l    d  .ARM.extab.text.rt_put_prio	00000000 .ARM.extab.text.rt_put_prio
08000308 l    d  .ARM.extab.text.rt_get_first	00000000 .ARM.extab.text.rt_get_first
08000314 l    d  .ARM.extab.text.rt_put_rdy_first	00000000 .ARM.extab.text.rt_put_rdy_first
08000320 l    d  .ARM.extab.text.rt_get_same_rdy_prio	00000000 .ARM.extab.text.rt_get_same_rdy_prio
0800032c l    d  .ARM.extab.text.rt_resort_prio	00000000 .ARM.extab.text.rt_resort_prio
08000338 l    d  .ARM.extab.text.rt_put_dly	00000000 .ARM.extab.text.rt_put_dly
08000344 l    d  .ARM.extab.text.rt_dec_dly	00000000 .ARM.extab.text.rt_dec_dly
08000350 l    d  .ARM.extab.text.rt_rmv_list	00000000 .ARM.extab.text.rt_rmv_list
0800035c l    d  .ARM.extab.text.rt_rmv_dly	00000000 .ARM.extab.text.rt_rmv_dly
08000368 l    d  .ARM.extab.text.rt_psq_enq	00000000 .ARM.extab.text.rt_psq_enq
08000374 l    d  .ARM.extab.text.rt_mbx_init	00000000 .ARM.extab.text.rt_mbx_init
08000380 l    d  .ARM.extab.text.rt_mbx_wait	00000000 .ARM.extab.text.rt_mbx_wait
0800038c l    d  .ARM.extab.text.rt_mbx_check	00000000 .ARM.extab.text.rt_mbx_check
08000398 l    d  .ARM.extab.text.isr_mbx_send	00000000 .ARM.extab.text.isr_mbx_send
080003a4 l    d  .ARM.extab.text.isr_mbx_receive	00000000 .ARM.extab.text.isr_mbx_receive
080003b0 l    d  .ARM.extab.text.rt_mbx_psh	00000000 .ARM.extab.text.rt_mbx_psh
080003bc l    d  .ARM.extab.text._init_box	00000000 .ARM.extab.text._init_box
080003c8 l    d  .ARM.extab.text.rt_alloc_box	00000000 .ARM.extab.text.rt_alloc_box
080003d4 l    d  .ARM.extab.text.rt_free_box	00000000 .ARM.extab.text.rt_free_box
080003e0 l    d  .ARM.extab.text.rt_init_mem	00000000 .ARM.extab.text.rt_init_mem
080003ec l    d  .ARM.extab.text.rt_alloc_mem	00000000 .ARM.extab.text.rt_alloc_mem
080003f8 l    d  .ARM.extab.text.rt_free_mem	00000000 .ARM.extab.text.rt_free_mem
08000404 l    d  .ARM.extab.text.rt_chk_robin	00000000 .ARM.extab.text.rt_chk_robin
08000410 l    d  .ARM.extab.text.rt_sem_psh	00000000 .ARM.extab.text.rt_sem_psh
0800041c l    d  .ARM.extab.text.rt_pop_req	00000000 .ARM.extab.text.rt_pop_req
08000428 l    d  .ARM.extab.text.rt_systick	00000000 .ARM.extab.text.rt_systick
08000434 l    d  .ARM.extab.text.rt_svc_init	00000000 .ARM.extab.text.rt_svc_init
08000440 l    d  .ARM.extab.text.rt_get_TID	00000000 .ARM.extab.text.rt_get_TID
0800044c l    d  .ARM.extab.text.rt_init_context	00000000 .ARM.extab.text.rt_init_context
08000458 l    d  .ARM.extab.text.rt_switch_req	00000000 .ARM.extab.text.rt_switch_req
08000464 l    d  .ARM.extab.text.rt_dispatch	00000000 .ARM.extab.text.rt_dispatch
08000470 l    d  .ARM.extab.text.rt_block	00000000 .ARM.extab.text.rt_block
0800047c l    d  .ARM.extab.text.rt_tsk_pass	00000000 .ARM.extab.text.rt_tsk_pass
08000488 l    d  .ARM.extab.text.rt_tsk_prio	00000000 .ARM.extab.text.rt_tsk_prio
08000494 l    d  .ARM.extab.text.rt_tsk_create	00000000 .ARM.extab.text.rt_tsk_create
080004a0 l    d  .ARM.extab.text.rt_tsk_delete	00000000 .ARM.extab.text.rt_tsk_delete
080004ac l    d  .ARM.extab.text.rt_sys_init	00000000 .ARM.extab.text.rt_sys_init
080004b8 l    d  .ARM.extab.text.rt_dly_wait	00000000 .ARM.extab.text.rt_dly_wait
080004c4 l    d  .ARM.extab.text.arm_sin_f32	00000000 .ARM.extab.text.arm_sin_f32
080004d0 l    d  .ARM.extab.text.os_error	00000000 .ARM.extab.text.os_error
080004dc l    d  .ARM.extab.text.Thread	00000000 .ARM.extab.text.Thread
080004e8 l    d  .ARM.extab.text.startup.main	00000000 .ARM.extab.text.startup.main
080004f4 l    d  .ARM.extab.text._write	00000000 .ARM.extab.text._write
08000500 l    d  .ARM.extab.text._read	00000000 .ARM.extab.text._read
0800050c l    d  .ARM.extab.text.NVIC_EnableIRQ	00000000 .ARM.extab.text.NVIC_EnableIRQ
08000524 l    d  .ARM.extab.text.USART1_IRQHandler	00000000 .ARM.extab.text.USART1_IRQHandler
08000530 l    d  .ARM.extab.text.usart1_puts	00000000 .ARM.extab.text.usart1_puts
0800053c l    d  .ARM.extab.text.DMA1_Channel7_IRQHandler	00000000 .ARM.extab.text.DMA1_Channel7_IRQHandler
08000548 l    d  .ARM.extab.text.neopixel_update_buffer	00000000 .ARM.extab.text.neopixel_update_buffer
08000554 l    d  .ARM.extab.text.neopixel_rgbw_set_led	00000000 .ARM.extab.text.neopixel_rgbw_set_led
08000560 l    d  .ARM.extab.text.cc2520_dma_trx	00000000 .ARM.extab.text.cc2520_dma_trx
0800056c l    d  .ARM.extab.text.cc2520_thread	00000000 .ARM.extab.text.cc2520_thread
08000578 l    d  .ARM.extab	00000000 .ARM.extab
08000590 l    d  .text	00000000 .text
08006114 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20000068 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 /var/folders/5v/vw99x5bd2c506kbq14ntyw6w0000gn/T//ccP251Gt.o
f1e0f85f l       *ABS*	00000000 BootRAM
08004694 l       .text	00000000 LoopCopyDataInit
0800468c l       .text	00000000 CopyDataInit
080046a8 l       .text	00000000 LoopFillZerobss
080046a2 l       .text	00000000 FillZerobss
080046ba l       .text	00000000 LoopForever
00000000 l    df *ABS*	00000000 HAL_CM.c
080017b4 l     F .text	0000002c rt_ret_regs
00000000 l    df *ABS*	00000000 rt_CMSIS.c
0800182c l     F .text	00000074 rt_ms2tick
080018a0 l     F .text	0000003e rt_tid2ptcb
080018e0 l     F .text	00000024 rt_id2obj
08001b1c l     F .text	00000014 sysThreadError
08001dac l     F .text	00000084 rt_timer_insert
00000000 l    df *ABS*	00000000 rt_Event.c
00000000 l    df *ABS*	00000000 rt_List.c
080022a0 l     F .text	0000005e rt_inc_qi
00000000 l    df *ABS*	00000000 rt_Mailbox.c
00000000 l    df *ABS*	00000000 rt_MemBox.c
00000000 l    df *ABS*	00000000 rt_Memory.c
00000000 l    df *ABS*	00000000 rt_Robin.c
00000000 l    df *ABS*	00000000 rt_Semaphore.c
00000000 l    df *ABS*	00000000 rt_System.c
08002e6c l     F .text	00000044 rt_systick_init
20000068 l     O .bss	00000001 os_lock
20000069 l     O .bss	00000001 os_psh_flag
00000000 l    df *ABS*	00000000 rt_Task.c
08003054 l     F .text	00000080 rt_svc_init
080030d4 l     F .text	00000048 rt_get_TID
0800311c l     F .text	00000090 rt_init_context
00000000 l    df *ABS*	00000000 rt_Time.c
00000000 l    df *ABS*	00000000 arm_sin_f32.c
00000000 l    df *ABS*	00000000 main.c
08003938 l       .text	00000000 handler2_address_const
00000000 l    df *ABS*	00000000 syscalls.c
00000000 l    df *ABS*	00000000 usart1.c
08003e34 l     F .text	00000034 NVIC_EnableIRQ
00000000 l    df *ABS*	00000000 neopixel_rgbw.c
08004090 l     F .text	00000034 NVIC_EnableIRQ
20000094 l     O .bss	000000c0 data_buffer
20000158 l     O .bss	0000000c rgbw_buffer
00000000 l    df *ABS*	00000000 cc2520.c
00000000 l    df *ABS*	00000000 pr-support.c
080012b0 l     F .text	00000038 next_unwind_byte
080012e8 l     F .text	0000001a _Unwind_GetGR.constprop.0
08001304 l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 HAL_CM4.S
00000025 l       *ABS*	00000000 TCB_STACKF
00000028 l       *ABS*	00000000 TCB_TSTACK
08000672 l       .text	00000000 SVC_User
0800062c l       .text	00000000 SVC_ContextSave
0800064e l       .text	00000000 SVC_ContextRestore
08000670 l       .text	00000000 SVC_Exit
08000690 l       .text	00000000 SVC_Done
080006f0 l       .text	00000000 Sys_Exit
00000000 l    df *ABS*	00000000 unwind-arm.c
08000728 l     F .text	00000012 selfrel_offset31
0800073c l     F .text	00000060 search_EIT_table
0800079c l     F .text	00000028 __gnu_unwind_get_pr_addr
080007c4 l     F .text	000000a0 get_eit_entry
08000864 l     F .text	00000058 restore_non_core_regs
080008bc l     F .text	0000000c _Unwind_decode_typeinfo_ptr.isra.0
080008c8 l     F .text	00000004 __gnu_unwind_24bit.isra.1
080008cc l     F .text	00000002 _Unwind_DebugHook
080008d0 l     F .text	0000003e unwind_phase2
08000910 l     F .text	000000d4 unwind_phase2_forced
08000af4 l     F .text	00000018 _Unwind_GetGR
08000b40 l     F .text	0000001a _Unwind_SetGR
08000bcc l     F .text	000002dc __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 bzero.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004c10 l     F .text	00000048 std.isra.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08004f68 l     F .text	00000030 __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 sbrk.c
2000016c l     O .bss	00000004 heap_end.4169
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 arm_common_tables.c
00000000 l    df *ABS*	00000000 impure.c
20000004 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 /usr/local/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/armv7e-m/fpu/fpv5-sp-d16/crti.o
00000000 l    df *ABS*	00000000 /usr/local/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/armv7e-m/fpu/fpv5-sp-d16/crtn.o
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 reent.c
080039ec g     F .text	00000002 RTC_Alarm_IRQHandler
08003760 g     F .text	00000054 rt_sys_start
08001268 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
080009e8 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
080039fc g     F .text	00000002 TIM8_TRG_COM_IRQHandler
08003a00 g     F .text	00000002 TIM8_CC_IRQHandler
0800563c g     F .text	00000020 _isatty_r
20000091 g     O .bss	00000001 tx_bfr_tail
080056c4 g     F .text	00000010 _getpid
08004794 g     F .text	000000f0 _puts_r
00000000 g       .svc_table	00000000 SVC_Count
080045a0 g     F .text	000000e8 cc2520_init
0800565c g     F .text	00000024 _lseek_r
0800394c g     F .text	00000002 DebugMon_Handler
08001a0c g     F .text	00000040 osKernelInitialize
200001a8 g     O .bss	00000008 os_robin
08000596 g     F .text	00000006 rt_get_PSP
080048f8 g     F .text	00000024 _kill_r
08004764 g     F .text	00000030 printf
080039b8 g     F .text	00000002 TIM1_CC_IRQHandler
080055a6 g     F .text	00000024 __sseek
08004c84 g     F .text	00000060 __sinit
08004920 g     F .text	000000a8 __swbuf_r
08001f18 g     F .text	0000002c osTimerCall
08003924 g     F .text	0000001a HardFault_Handler
08004c58 g     F .text	0000002c __sfmoreglue
080005d0 g     F .text	0000001c _free_box
08003c38 g     F .text	00000124 Thread
08003a3c g     F .text	00000002 USB_HP_IRQHandler
080006f2 g     F .text	0000000a SysTick_Handler
080038ec g     F .text	00000034 os_error
08003954 g     F .text	00000002 PVD_IRQHandler
0800650c g       .ARM.exidx	00000000 _sidata
08001124 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
08001244 g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
08000692 g     F .text	00000060 PendSV_Handler
080033b4 g     F .text	00000090 rt_tsk_create
08003920 g     F .text	00000002 NMI_Handler
0800650c g       .ARM.exidx	00000000 __exidx_end
08002570 g     F .text	000000cc rt_dec_dly
08003974 g     F .text	00000002 EXTI3_IRQHandler
08002108 g     F .text	00000094 isrMessageGet
0800290c g     F .text	0000007e isr_mbx_receive
08000ea8 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
0800263c g     F .text	00000068 rt_rmv_list
080044b8 g     F .text	00000048 cc2520_dma_trx
08005fb0 g     O .text	00000004 os_trv
080015d4 g     F .text	0000000a .hidden _Unwind_GetRegionStart
08001244 g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
08006050 g     O .text	00000010 os_thread_def_cc2520_thread
08005618 g     F .text	00000024 _fstat_r
20003cf4 g     O .bss	00000004 errno
20000170 g     O .bss	00000001 os_initialized
08002fc0  w    F .text	0000000e os_tick_irqack
08006114 g       .text	00000000 _etext
20000068 g       .bss	00000000 _sbss
0800128c g     F .text	00000022 .hidden _Unwind_Backtrace
080020bc g     F .text	0000004c isrMessagePut
08001104 g     F .text	00000018 .hidden __restore_core_regs
08001144 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
08005fc8 g     O .text	00000001 os_fifo_size
20000154 g     O .bss	00000001 active_buffer
200001f8 g     O .bss	00000004 prvGetr12
08001e30 g     F .text	00000060 svcTimerCall
08001d2c g     F .text	00000018 osThreadExit
200001fc g     O .bss	00000004 prvGetpc
080009e4 g     F .text	00000004 .hidden _Unwind_GetCFA
0800473c g     F .text	00000016 memcpy
08000b0c g     F .text	00000032 .hidden _Unwind_VRS_Set
08004c04 g     F .text	0000000c _cleanup_r
08004500 g     F .text	000000a0 cc2520_thread
08003968 g     F .text	00000002 EXTI0_IRQHandler
080039d0 g     F .text	00000002 I2C2_EV_IRQHandler
08004884 g     F .text	00000010 puts
08003a48 g     F .text	00000002 FPU_IRQHandler
08003970 g     F .text	00000002 EXTI2_TS_IRQHandler
080039b0 g     F .text	00000002 TIM1_UP_TIM16_IRQHandler
08004004 g     F .text	0000008c usart1_init
080021f8 g     F .text	000000a8 rt_evt_psh
08004894 g     F .text	00000054 _raise_r
080056b4 g     F .text	00000010 _fstat
08001c8c g     F .text	0000000e svcThreadYield
08003948 g     F .text	00000002 UsageFault_Handler
08002700 g     F .text	00000058 rt_psq_enq
0800365c g     F .text	00000104 rt_sys_init
08003994 g     F .text	00000002 ADC1_2_IRQHandler
0800491c g     F .text	00000004 _getpid_r
08000b5c g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
08002eb0 g     F .text	00000034 rt_psh_req
20000200 g     O .bss	00002ef0 mp_stk
20000000 g       .data	00000000 _sdata
080037b4 g     F .text	0000001c rt_dly_wait
080039d8 g     F .text	00000002 SPI1_IRQHandler
0800552c g     F .text	00000020 _sbrk_r
08002758 g     F .text	00000052 rt_mbx_init
08001134 g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
08002c74 g     F .text	000000a8 rt_alloc_mem
080040c4 g     F .text	000000e4 TIM6_DAC_IRQHandler
080017e0 g     F .text	00000020 rt_ret_val
08005680 g     F .text	00000024 _read_r
080024a8 g     F .text	000000c8 rt_put_dly
08000eb4 g     F .text	0000024e .hidden _Unwind_VRS_Pop
08000eb0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
20000090 g     O .bss	00000001 rx_bfr_tail
08001d00 g     F .text	00000028 osThreadYield
0800128c g     F .text	00000022 .hidden ___Unwind_Backtrace
08005ff8 g     O .text	00000010 os_thread_def_Thread_StsLED
080039f8 g     F .text	00000002 TIM8_UP_IRQHandler
08006114 g       .ARM.exidx	00000000 __exidx_start
08002d88  w    F .text	00000028 rt_init_robin
20003bec g     O .bss	00000001 rx_bfr_head
080056d4 g     F .text	00000010 _isatty
08001d78 g     F .text	00000030 osDelay
08006064 g     O .text	00000004 _global_impure_ptr
0800059c g     F .text	00000018 os_set_env
200030f0 g     O .bss	0000001c os_active_TCB
080046f0 g     F .text	0000004c __libc_init_array
080046de g     F .text	00000010 bzero
08003a1c g     F .text	00000002 DMA2_Channel2_IRQHandler
080011fc g     F .text	00000022 .hidden ___Unwind_RaiseException
08003988 g     F .text	00000002 DMA1_Channel4_IRQHandler
080046d0 g     F .text	0000000e abort
08001220 g     F .text	00000022 .hidden ___Unwind_Resume
08005704 g     F .text	0000001c _sbrk
080031ac g     F .text	00000024 rt_switch_req
20003110 g     O .bss	000008b8 os_stack_mem
200039c8 g     O .bss	00000004 prvGetlr
080060fc g     F .text	00000000 _init
2000006c g     O .bss	00000020 os_messageQ_q_osTimerMessageQ
0800114c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
080039e4 g     F .text	00000002 USART3_IRQHandler
08002fb0  w    F .text	00000010 os_tick_init
200039cc g     O .bss	00000004 prvGetr1
20003cf8 g       .bss	00000000 _ebss
080041a8 g     F .text	0000008c DMA1_Channel7_IRQHandler
08004688  w    F .text	00000034 Reset_Handler
08001f8c g     F .text	00000062 svcMessageCreate
080039a0 g     F .text	00000002 CAN1_RX1_IRQHandler
080006fc g     F .text	0000000e OS_Tick_Handler
08003a10 g     F .text	00000002 UART5_IRQHandler
08001d4c g     F .text	0000002a svcDelay
08005fe8 g     O .text	00000010 os_thread_def_Thread
08001904 g     F .text	00000098 svcKernelInitialize
08003a04 g     F .text	00000002 ADC3_IRQHandler
20003bf0 g     O .bss	00000080 rx_buffer
20000000 g     O .data	00000001 dma_trx_complete
080039bc g     F .text	00000002 TIM4_IRQHandler
20003bed g     O .bss	00000001 tx_bfr_head
20000171 g     O .bss	00000001 os_running
20003c70 g     O .bss	00000080 tx_buffer
08003a18 g     F .text	00000002 DMA2_Channel1_IRQHandler
08005fc4 g     O .text	00000004 os_stack_sz
0800111c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
080060a8 g     O .text	00000020 __sf_fake_stderr
0800219c g     F .text	00000056 osMessageGet
20003cf8 g       .bss	00000000 end
080039c8 g     F .text	00000002 I2C1_EV_IRQHandler
08002c2c g     F .text	00000048 rt_init_mem
080031d0 g     F .text	00000064 rt_dispatch
08001220 g     F .text	00000022 .hidden _Unwind_Resume
08000ab4 g     F .text	0000000c .hidden _Unwind_DeleteException
08000ab0 g     F .text	00000002 .hidden _Unwind_Complete
080028c4 g     F .text	00000024 rt_mbx_check
080028e8 g     F .text	00000024 isr_mbx_send
08001a50 g     F .text	000000c8 osKernelStart
08003990 g     F .text	00000002 DMA1_Channel6_IRQHandler
08004f98 g     F .text	00000024 __sfputs_r
08003a0c g     F .text	00000002 UART4_IRQHandler
08003a24 g     F .text	00000002 DMA2_Channel4_IRQHandler
08001610 g     F .text	00000000 memchr
08001f48 g     F .text	00000044 osTimerThread
08002fd0 g     F .text	00000050 rt_systick
08004e34 g     F .text	0000008c _free_r
080039c0 g     F .text	00000002 TIM3_IRQHandler
08003964 g     F .text	00000002 RCC_IRQHandler
200039d0 g     O .bss	00000084 os_fifo
20000068 g       .bss	00000000 _bss
0800397c g     F .text	00000002 DMA1_Channel1_IRQHandler
080057a0 g     O .text	00000804 sinTable_f32
08003a44 g     F .text	00000002 USBWakeUp_RMP_IRQHandler
08002458 g     F .text	00000050 rt_resort_prio
080056f4 g     F .text	00000010 _lseek
080026a4 g     F .text	0000005c rt_rmv_dly
080032e8 g     F .text	000000cc rt_tsk_prio
08001308 g     F .text	000002a2 .hidden __gnu_unwind_execute
08000590 g     F .text	00000006 rt_set_PSP
080039e8 g     F .text	00000002 EXTI15_10_IRQHandler
0800112c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
08003234 g     F .text	00000054 rt_block
08000698 g       .text	00000000 Sys_Switch
080023ec g     F .text	0000002c rt_put_rdy_first
20003a54 g     O .bss	00000004 osMessageQId_osTimerMessageQ
200001b4 g     O .bss	00000008 os_tsk
08001ff0 g     F .text	000000ca svcMessageGet
20003a58 g     O .bss	00000004 prvGetr3
08003f64 g     F .text	000000a0 usart1_puts
08000a5c g     F .text	00000044 .hidden __gnu_Unwind_Resume
08003a14 g     F .text	00000002 TIM7_IRQHandler
080055f8 g     F .text	00000020 _close_r
0800113c g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
08002d1c g     F .text	0000006a rt_free_mem
08002300 g     F .text	0000008c rt_put_prio
200001bc g     O .bss	00000034 os_idle_TCB
08002ae8 g     F .text	000000ac _init_box
080049c8 g     F .text	000000d8 __swsetup_r
080011fc g     F .text	00000022 .hidden _Unwind_RaiseException
080039a8 g     F .text	00000002 EXTI9_5_IRQHandler
08004ce4 g     F .text	00000078 __sfp
08003958 g     F .text	00000002 TAMPER_STAMP_IRQHandler
0800395c g     F .text	00000002 RTC_WKUP_IRQHandler
0800554c g     F .text	00000022 __sread
08002db0  w    F .text	0000006c rt_chk_robin
08002ee4 g     F .text	000000cc rt_pop_req
08001c2c g     F .text	00000060 svcThreadTerminate
08004bb0 g     F .text	00000054 _fflush_r
08005fc0 g     O .text	00000004 mp_stk_size
08005fa4 g     O .text	00000002 os_maxtaskrun
080039dc g     F .text	00000002 SPI2_IRQHandler
08006068 g     O .text	00000020 __sf_fake_stdin
20003a5c g     O .bss	00000004 tid_StsLEDThread
08001b30 g     F .text	000000d0 svcThreadCreate
08004752 g     F .text	00000010 memset
08003940 g     F .text	00000002 MemManage_Handler
08003da0 g     F .text	00000054 main
20003cf0 g     O .bss	00000004 tid_cc2520_thread
20003a60 g     O .bss	00000004 tid_Thread
080005ec g     F .text	000000a6 SVC_Handler
080055ca g     F .text	00000008 __sclose
08003a28 g     F .text	00000002 DMA2_Channel5_IRQHandler
08005fa8 g     O .text	00000004 os_stackinfo
20000174 g     O .bss	00000004 os_timer_head
08004ec0 g     F .text	000000a8 _malloc_r
08003288 g     F .text	0000003c rt_tsk_pass
080042cc g     F .text	00000034 neopixel_rgbw_set_led
0800398c g     F .text	00000002 DMA1_Channel5_IRQHandler
08003a40 g     F .text	00000002 USB_LP_IRQHandler
08003978 g     F .text	00000002 EXTI4_IRQHandler
0800399c g     F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
08000a48 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
20000178 g     O .bss	00000018 os_rdy
08005fb8 g     O .text	00000004 os_clockrate
08001e90 g     F .text	00000088 sysTimerTick
2000008c g     O .bss	00000004 m_tmr
08003aa8 g     F .text	00000190 SystemInit
08000aa0 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
20003a64 g     O .bss	00000004 prvGetpsr
08006108 g     F .text	00000000 _fini
08001104 g     F .text	00000018 .hidden restore_core_regs
08004764 g     F .text	00000030 iprintf
080011e8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
080039b4 g     F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08003998 g     F .text	00000002 USB_HP_CAN1_TX_IRQHandler
080055d4 g     F .text	00000024 _write_r
00000000 g       .svc_table	00000000 SVC_Table
08003984 g     F .text	00000002 DMA1_Channel3_IRQHandler
080015f4 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
200001f0 g     O .bss	00000004 os_time
080051f4 g     F .text	000000ec _printf_common
08005fcc g     O .text	00000010 os_thread_def_osTimerThread
20000064 g     O .data	00000004 _impure_ptr
08003444 g     F .text	00000218 rt_tsk_delete
08004aa0 g     F .text	00000110 __sflush_r
080016b0 g     F .text	00000104 rt_init_stack
08003a2c g     F .text	00000002 ADC4_IRQHandler
08001c00 g     F .text	0000002c svcThreadGetId
080038e4 g     F .text	00000006 os_idle_demon
20000190 g     O .bss	00000018 os_dly
08003950 g     F .text	00000002 WWDG_IRQHandler
20000000 g       .data	00000000 _data
20000155 g     O .bss	00000001 buffer_changed
080039c4 g     F .text	00000002 TIM2_IRQHandler
08003020  w    F .text	00000034 rt_stk_check
080015e0 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
08002b94 g     F .text	00000042 rt_alloc_box
08003d5c g     F .text	00000044 Thread_StsLED
08000ac0 g     F .text	00000032 .hidden _Unwind_VRS_Get
08003a38 g     F .text	00000002 COMP7_IRQHandler
20004000 g       *ABS*	00000000 _estack
08003a30 g     F .text	00000002 COMP1_2_3_IRQHandler
080011d4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
0800396c g     F .text	00000002 EXTI1_IRQHandler
080032c4 g     F .text	00000024 rt_tsk_self
08003df4 g     F .text	00000022 _write
080015ac g     F .text	00000028 .hidden __gnu_unwind_frame
08001268 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
0800298c g     F .text	0000015c rt_mbx_psh
20000068 g       .data	00000000 _edata
08001c9c g     F .text	00000060 osThreadCreate
08005fb4 g     O .text	00000001 os_flags
08003a4c g     F .text	0000005c prvGetRegistersFromStack
08005fe4 g     O .text	00000002 mp_tmr_size
20000156 g     O .bss	00000002 frame_count
0800238c g     F .text	00000060 rt_get_first
08002e1c g     F .text	00000050 rt_sem_psh
08004300 g     F .text	00000024 neopixel_buffer_available
080027ac g     F .text	00000118 rt_mbx_wait
080039e0 g     F .text	00000002 USART2_IRQHandler
08003a34 g     F .text	00000002 COMP4_5_6_IRQHandler
0800556e g     F .text	00000038 __swrite
08004fbc g     F .text	00000238 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
08004d5c g     F .text	0000003c _fwalk_reent
08001190 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
080056e4 g     F .text	00000010 _kill
080039d4 g     F .text	00000002 I2C2_ER_IRQHandler
08003980 g     F .text	00000002 DMA1_Channel2_IRQHandler
08006088 g     O .text	00000020 __sf_fake_stdout
08002418 g     F .text	00000040 rt_get_same_rdy_prio
080039f4 g     F .text	00000002 TIM8_BRK_IRQHandler
08003e18 g     F .text	0000001a _read
20003a68 g     O .bss	00000004 prvGetr2
080039a4 g     F .text	00000002 CAN1_SCE_IRQHandler
08004234 g     F .text	00000098 neopixel_update_buffer
08003960 g     F .text	00000002 FLASH_IRQHandler
08005720 g     F .text	00000002 _exit
200001b0 g     O .bss	00000004 os_tick_irqn
08003944 g     F .text	00000002 BusFault_Handler
08003e68 g     F .text	000000fc USART1_IRQHandler
08004d98 g     F .text	0000009c __smakebuf_r
080052e0 g     F .text	0000024c _printf_i
08003a08 g     F .text	00000002 SPI3_IRQHandler
08000eac  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
20000164 g     O .bss	00000004 __malloc_sbrk_start
080005b4 g     F .text	0000001c _alloc_box
08005fdc g     O .text	00000008 os_messageQ_def_osTimerMessageQ
080039cc g     F .text	00000002 I2C1_ER_IRQHandler
20003a6c g     O .bss	00000178 mp_tcb
080015fc g     F .text	00000006 .hidden _Unwind_GetDataRelBase
20000168 g     O .bss	00000004 __malloc_free_list
08001800 g     F .text	0000002a rt_ret_val2
08004fbc g     F .text	00000238 _vfprintf_r
08005fac g     O .text	00000004 os_rrobin
0800199c g     F .text	00000070 svcKernelStart
08002bd8 g     F .text	00000054 rt_free_box
080037d0 g     F .text	00000114 arm_sin_f32
08005fbc g     O .text	00000002 mp_tcb_size
080039f0 g     F .text	00000002 USBWakeUp_IRQHandler
08004324 g     F .text	00000194 neopixel_rgbw_init
080056a4 g     F .text	00000010 _close
080048e8 g     F .text	00000010 raise
20003be4 g     O .bss	00000004 osThreadId_osTimerThread
08003a20 g     F .text	00000002 DMA2_Channel3_IRQHandler
20003be8 g     O .bss	00000004 prvGetr0
080039ac g     F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000590 <rt_set_PSP>:
        .global rt_set_PSP
rt_set_PSP:
        .fnstart
        .cantunwind

        MSR     PSP,R0
 8000590:	f380 8809 	msr	PSP, r0
        BX      LR
 8000594:	4770      	bx	lr

08000596 <rt_get_PSP>:
        .global rt_get_PSP
rt_get_PSP:
        .fnstart
        .cantunwind

        MRS     R0,PSP
 8000596:	f3ef 8009 	mrs	r0, PSP
        BX      LR
 800059a:	4770      	bx	lr

0800059c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MOV     R0,SP                   /* PSP = MSP */
 800059c:	4668      	mov	r0, sp
        MSR     PSP,R0
 800059e:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
 80005a2:	485a      	ldr	r0, [pc, #360]	; (800070c <OS_Tick_Handler+0x10>)
        LDRB    R0,[R0]
 80005a4:	7800      	ldrb	r0, [r0, #0]
        LSLS    R0,#31
 80005a6:	07c0      	lsls	r0, r0, #31
        ITE     NE
 80005a8:	bf14      	ite	ne
        MOVNE   R0,#0x02                /* Privileged Thread mode, use PSP */
 80005aa:	2002      	movne	r0, #2
        MOVEQ   R0,#0x03                /* Unprivileged Thread mode, use PSP */
 80005ac:	2003      	moveq	r0, #3
        MSR     CONTROL,R0
 80005ae:	f380 8814 	msr	CONTROL, r0
        BX      LR
 80005b2:	4770      	bx	lr

080005b4 <_alloc_box>:
        .global _alloc_box
_alloc_box:
        .fnstart
        .cantunwind

        LDR     R12,=rt_alloc_box
 80005b4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8000710 <OS_Tick_Handler+0x14>
        MRS     R3,IPSR
 80005b8:	f3ef 8305 	mrs	r3, IPSR
        LSLS    R3,#24
 80005bc:	061b      	lsls	r3, r3, #24
        IT      NE
 80005be:	bf18      	it	ne
        BXNE    R12
 80005c0:	4760      	bxne	ip
        MRS     R3,CONTROL
 80005c2:	f3ef 8314 	mrs	r3, CONTROL
        LSLS    R3,#31
 80005c6:	07db      	lsls	r3, r3, #31
        IT      EQ
 80005c8:	bf08      	it	eq
        BXEQ    R12
 80005ca:	4760      	bxeq	ip
        SVC     0
 80005cc:	df00      	svc	0
        BX      LR
 80005ce:	4770      	bx	lr

080005d0 <_free_box>:
        .global _free_box
_free_box:
        .fnstart
        .cantunwind

        LDR     R12,=rt_free_box
 80005d0:	f8df c140 	ldr.w	ip, [pc, #320]	; 8000714 <OS_Tick_Handler+0x18>
        MRS     R3,IPSR
 80005d4:	f3ef 8305 	mrs	r3, IPSR
        LSLS    R3,#24
 80005d8:	061b      	lsls	r3, r3, #24
        IT      NE
 80005da:	bf18      	it	ne
        BXNE    R12
 80005dc:	4760      	bxne	ip
        MRS     R3,CONTROL
 80005de:	f3ef 8314 	mrs	r3, CONTROL
        LSLS    R3,#31
 80005e2:	07db      	lsls	r3, r3, #31
        IT      EQ
 80005e4:	bf08      	it	eq
        BXEQ    R12
 80005e6:	4760      	bxeq	ip
        SVC     0
 80005e8:	df00      	svc	0
        BX      LR
 80005ea:	4770      	bx	lr

080005ec <SVC_Handler>:
SVC_Handler_Veneer:
        .endif
        .fnstart
        .cantunwind

        MRS     R0,PSP                  /* Read PSP */
 80005ec:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
 80005f0:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
 80005f2:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
 80005f6:	bbe1      	cbnz	r1, 8000672 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 80005f8:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 80005fc:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
 80005fe:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8000600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
 8000604:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
 8000608:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

        LDR     R3,=os_tsk
 800060c:	4b42      	ldr	r3, [pc, #264]	; (8000718 <OS_Tick_Handler+0x1c>)
        LDM     R3,{R1,R2}              /* os_tsk.run, os_tsk.new */
 800060e:	e893 0006 	ldmia.w	r3, {r1, r2}
        CMP     R1,R2
 8000612:	4291      	cmp	r1, r2
        .ifdef  IFX_XMC4XXX
        ITT     EQ
        PUSHEQ  {LR}
        POPEQ   {PC}
        .else
        IT      EQ
 8000614:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 8000616:	4770      	bxeq	lr
        .endif

        CBNZ    R1,SVC_ContextSave      /* Runtask not deleted? */
 8000618:	b941      	cbnz	r1, 800062c <SVC_ContextSave>

        TST     LR,#0x10                /* is it extended frame? */
 800061a:	f01e 0f10 	tst.w	lr, #16
        BNE     SVC_ContextRestore
 800061e:	d116      	bne.n	800064e <SVC_ContextRestore>
        LDR     R1,=0xE000EF34
 8000620:	493e      	ldr	r1, [pc, #248]	; (800071c <OS_Tick_Handler+0x20>)
        LDR     R0,[R1]                 /* Load FPCCR */
 8000622:	6808      	ldr	r0, [r1, #0]
        BIC     R0,#1                   /* Clear LSPACT (Lazy state) */
 8000624:	f020 0001 	bic.w	r0, r0, #1
        STR     R0,[R1]                 /* Store FPCCR */
 8000628:	6008      	str	r0, [r1, #0]
        B       SVC_ContextRestore
 800062a:	e010      	b.n	800064e <SVC_ContextRestore>

0800062c <SVC_ContextSave>:

SVC_ContextSave:
        TST     LR,#0x10                /* is it extended frame? */
 800062c:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
 8000630:	bf06      	itte	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes, stack also VFP hi-regs */
 8000632:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        MOVEQ   R0,#0x01                /* os_tsk->stack_frame val */
 8000636:	2001      	moveq	r0, #1
        MOVNE   R0,#0x00
 8000638:	2000      	movne	r0, #0
        STRB    R0,[R1,#TCB_STACKF]     /* os_tsk.run->stack_frame = val */
 800063a:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
        STMDB   R12!,{R4-R11}           /* Save Old context */
 800063e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        STR     R12,[R1,#TCB_TSTACK]    /* Update os_tsk.run->tsk_stack */
 8000642:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28

        PUSH    {R2,R3}
 8000646:	b40c      	push	{r2, r3}
        BL      rt_stk_check            /* Check for Stack overflow */
 8000648:	f002 fcea 	bl	8003020 <rt_stk_check>
        POP     {R2,R3}
 800064c:	bc0c      	pop	{r2, r3}

0800064e <SVC_ContextRestore>:

SVC_ContextRestore:
        STR     R2,[R3]                 /* os_tsk.run = os_tsk.new */
 800064e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#TCB_TSTACK]    /* os_tsk.new->tsk_stack */
 8000650:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
 8000654:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        LDRB    R0,[R2,#TCB_STACKF]     /* Stack Frame */
 8000658:	f892 0025 	ldrb.w	r0, [r2, #37]	; 0x25
        CMP     R0,#0                   /* Basic/Extended Stack Frame */
 800065c:	2800      	cmp	r0, #0
        ITEE    EQ
 800065e:	bf0e      	itee	eq
        MVNEQ   LR,#~0xFFFFFFFD         /* set EXC_RETURN value */
 8000660:	f06f 0e02 	mvneq.w	lr, #2
        MVNNE   LR,#~0xFFFFFFED
 8000664:	f06f 0e12 	mvnne.w	lr, #18
        VLDMIANE R12!,{S16-S31}         /* restore VFP hi-registers */
 8000668:	ecbc 8a10 	vldmiane	ip!, {s16-s31}
        MSR     PSP,R12                 /* Write PSP */
 800066c:	f38c 8809 	msr	PSP, ip

08000670 <SVC_Exit>:
SVC_Exit:
        .ifdef  IFX_XMC4XXX
        PUSH    {LR}
        POP     {PC}
        .else
        BX      LR
 8000670:	4770      	bx	lr

08000672 <SVC_User>:
        .endif

        /*------------------- User SVC ------------------------------*/

SVC_User:
        PUSH    {R4,LR}                 /* Save Registers */
 8000672:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <OS_Tick_Handler+0x24>)
        LDR     R2,[R2]
 8000676:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
 8000678:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
 800067a:	d809      	bhi.n	8000690 <SVC_Done>

        LDR     R4,=SVC_Table-4
 800067c:	4c29      	ldr	r4, [pc, #164]	; (8000724 <OS_Tick_Handler+0x28>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
 800067e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 8000682:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
 8000686:	47a0      	blx	r4

        MRS     R12,PSP
 8000688:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
 800068c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

08000690 <SVC_Done>:
SVC_Done:
        POP     {R4,PC}                 /* RETI */
 8000690:	bd10      	pop	{r4, pc}

08000692 <PendSV_Handler>:
PendSV_Handler_Veneer:
        .endif
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8000692:	b510      	push	{r4, lr}
        BL      rt_pop_req
 8000694:	f002 fc26 	bl	8002ee4 <rt_pop_req>

08000698 <Sys_Switch>:

Sys_Switch:
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8000698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        LDR     R3,=os_tsk
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <OS_Tick_Handler+0x1c>)
        LDM     R3,{R1,R2}              /* os_tsk.run, os_tsk.new */
 800069e:	e893 0006 	ldmia.w	r3, {r1, r2}
        CMP     R1,R2
 80006a2:	4291      	cmp	r1, r2
        .ifdef  IFX_XMC4XXX
        ITT     EQ
        PUSHEQ  {LR}
        POPEQ   {PC}
        .else
        IT      EQ
 80006a4:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 80006a6:	4770      	bxeq	lr
        .endif

        MRS     R12,PSP                 /* Read PSP */
 80006a8:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
 80006ac:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
 80006b0:	bf06      	itte	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes, stack also VFP hi-regs */
 80006b2:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        MOVEQ   R0,#0x01                /* os_tsk->stack_frame val */
 80006b6:	2001      	moveq	r0, #1
        MOVNE   R0,#0x00
 80006b8:	2000      	movne	r0, #0
        STRB    R0,[R1,#TCB_STACKF]     /* os_tsk.run->stack_frame = val */
 80006ba:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
        STMDB   R12!,{R4-R11}           /* Save Old context */
 80006be:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        STR     R12,[R1,#TCB_TSTACK]    /* Update os_tsk.run->tsk_stack */
 80006c2:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28

        PUSH    {R2,R3}
 80006c6:	b40c      	push	{r2, r3}
        BL      rt_stk_check            /* Check for Stack overflow */
 80006c8:	f002 fcaa 	bl	8003020 <rt_stk_check>
        POP     {R2,R3}
 80006cc:	bc0c      	pop	{r2, r3}

        STR     R2,[R3]                 /* os_tsk.run = os_tsk.new */
 80006ce:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#TCB_TSTACK]    /* os_tsk.new->tsk_stack */
 80006d0:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
 80006d4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        LDRB    R0,[R2,#TCB_STACKF]     /* Stack Frame */
 80006d8:	f892 0025 	ldrb.w	r0, [r2, #37]	; 0x25
        CMP     R0,#0                   /* Basic/Extended Stack Frame */
 80006dc:	2800      	cmp	r0, #0
        ITEE    EQ
 80006de:	bf0e      	itee	eq
        MVNEQ   LR,#~0xFFFFFFFD         /* set EXC_RETURN value */
 80006e0:	f06f 0e02 	mvneq.w	lr, #2
        MVNNE   LR,#~0xFFFFFFED
 80006e4:	f06f 0e12 	mvnne.w	lr, #18
        VLDMIANE R12!,{S16-S31}         /* restore VFP hi-registers */
 80006e8:	ecbc 8a10 	vldmiane	ip!, {s16-s31}
        MSR     PSP,R12                 /* Write PSP */
 80006ec:	f38c 8809 	msr	PSP, ip

080006f0 <Sys_Exit>:
Sys_Exit:
        .ifdef  IFX_XMC4XXX
        PUSH    {LR}
        POP     {PC}
        .else
        BX      LR                      /* Return to Thread Mode */
 80006f0:	4770      	bx	lr

080006f2 <SysTick_Handler>:
SysTick_Handler_Veneer:
        .endif
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 80006f2:	b510      	push	{r4, lr}
        BL      rt_systick
 80006f4:	f002 fc6c 	bl	8002fd0 <rt_systick>
        B       Sys_Switch
 80006f8:	f7ff bfce 	b.w	8000698 <Sys_Switch>

080006fc <OS_Tick_Handler>:
        .global OS_Tick_Handler
OS_Tick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 80006fc:	b510      	push	{r4, lr}
        BL      os_tick_irqack
 80006fe:	f002 fc5f 	bl	8002fc0 <os_tick_irqack>
        BL      rt_systick
 8000702:	f002 fc65 	bl	8002fd0 <rt_systick>
        B       Sys_Switch
 8000706:	f7ff bfc7 	b.w	8000698 <Sys_Switch>
 800070a:	0000      	.short	0x0000
        .fnstart
        .cantunwind

        MOV     R0,SP                   /* PSP = MSP */
        MSR     PSP,R0
        LDR     R0,=os_flags
 800070c:	08005fb4 	.word	0x08005fb4
        .global _alloc_box
_alloc_box:
        .fnstart
        .cantunwind

        LDR     R12,=rt_alloc_box
 8000710:	08002b95 	.word	0x08002b95
        .global _free_box
_free_box:
        .fnstart
        .cantunwind

        LDR     R12,=rt_free_box
 8000714:	08002bd9 	.word	0x08002bd9
        POP     {R4,LR}                 /* Restore EXC_RETURN */

        MRS     R12,PSP                 /* Read PSP */
        STM     R12,{R0-R2}             /* Store return values */

        LDR     R3,=os_tsk
 8000718:	200001b4 	.word	0x200001b4

        CBNZ    R1,SVC_ContextSave      /* Runtask not deleted? */

        TST     LR,#0x10                /* is it extended frame? */
        BNE     SVC_ContextRestore
        LDR     R1,=0xE000EF34
 800071c:	e000ef34 	.word	0xe000ef34

        /*------------------- User SVC ------------------------------*/

SVC_User:
        PUSH    {R4,LR}                 /* Save Registers */
        LDR     R2,=SVC_Count
 8000720:	00000000 	.word	0x00000000
        LDR     R2,[R2]
        CMP     R1,R2
        BHI     SVC_Done                /* Overflow */

        LDR     R4,=SVC_Table-4
 8000724:	fffffffc 	.word	0xfffffffc

08000728 <selfrel_offset31>:
 8000728:	6803      	ldr	r3, [r0, #0]
 800072a:	005a      	lsls	r2, r3, #1
 800072c:	bf4c      	ite	mi
 800072e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000732:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000736:	4418      	add	r0, r3
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <search_EIT_table>:
 800073c:	b361      	cbz	r1, 8000798 <search_EIT_table+0x5c>
 800073e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000742:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8000746:	4690      	mov	r8, r2
 8000748:	4606      	mov	r6, r0
 800074a:	46d1      	mov	r9, sl
 800074c:	2700      	movs	r7, #0
 800074e:	eb07 0409 	add.w	r4, r7, r9
 8000752:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000756:	1064      	asrs	r4, r4, #1
 8000758:	00e5      	lsls	r5, r4, #3
 800075a:	1971      	adds	r1, r6, r5
 800075c:	4608      	mov	r0, r1
 800075e:	f7ff ffe3 	bl	8000728 <selfrel_offset31>
 8000762:	45a2      	cmp	sl, r4
 8000764:	4683      	mov	fp, r0
 8000766:	f105 0008 	add.w	r0, r5, #8
 800076a:	4430      	add	r0, r6
 800076c:	d009      	beq.n	8000782 <search_EIT_table+0x46>
 800076e:	f7ff ffdb 	bl	8000728 <selfrel_offset31>
 8000772:	45c3      	cmp	fp, r8
 8000774:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000778:	d805      	bhi.n	8000786 <search_EIT_table+0x4a>
 800077a:	4540      	cmp	r0, r8
 800077c:	d209      	bcs.n	8000792 <search_EIT_table+0x56>
 800077e:	1c67      	adds	r7, r4, #1
 8000780:	e7e5      	b.n	800074e <search_EIT_table+0x12>
 8000782:	45c3      	cmp	fp, r8
 8000784:	d905      	bls.n	8000792 <search_EIT_table+0x56>
 8000786:	42a7      	cmp	r7, r4
 8000788:	d002      	beq.n	8000790 <search_EIT_table+0x54>
 800078a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800078e:	e7de      	b.n	800074e <search_EIT_table+0x12>
 8000790:	2100      	movs	r1, #0
 8000792:	4608      	mov	r0, r1
 8000794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000798:	4608      	mov	r0, r1
 800079a:	4770      	bx	lr

0800079c <__gnu_unwind_get_pr_addr>:
 800079c:	2801      	cmp	r0, #1
 800079e:	d007      	beq.n	80007b0 <__gnu_unwind_get_pr_addr+0x14>
 80007a0:	2802      	cmp	r0, #2
 80007a2:	d007      	beq.n	80007b4 <__gnu_unwind_get_pr_addr+0x18>
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <__gnu_unwind_get_pr_addr+0x1c>)
 80007a6:	2800      	cmp	r0, #0
 80007a8:	bf0c      	ite	eq
 80007aa:	4618      	moveq	r0, r3
 80007ac:	2000      	movne	r0, #0
 80007ae:	4770      	bx	lr
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <__gnu_unwind_get_pr_addr+0x20>)
 80007b2:	4770      	bx	lr
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <__gnu_unwind_get_pr_addr+0x24>)
 80007b6:	4770      	bx	lr
 80007b8:	08000ea9 	.word	0x08000ea9
 80007bc:	08000ead 	.word	0x08000ead
 80007c0:	08000eb1 	.word	0x08000eb1

080007c4 <get_eit_entry>:
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <get_eit_entry+0x94>)
 80007c8:	b083      	sub	sp, #12
 80007ca:	4604      	mov	r4, r0
 80007cc:	1e8d      	subs	r5, r1, #2
 80007ce:	b37b      	cbz	r3, 8000830 <get_eit_entry+0x6c>
 80007d0:	a901      	add	r1, sp, #4
 80007d2:	4628      	mov	r0, r5
 80007d4:	f3af 8000 	nop.w
 80007d8:	b320      	cbz	r0, 8000824 <get_eit_entry+0x60>
 80007da:	9901      	ldr	r1, [sp, #4]
 80007dc:	462a      	mov	r2, r5
 80007de:	f7ff ffad 	bl	800073c <search_EIT_table>
 80007e2:	4601      	mov	r1, r0
 80007e4:	b1f0      	cbz	r0, 8000824 <get_eit_entry+0x60>
 80007e6:	f7ff ff9f 	bl	8000728 <selfrel_offset31>
 80007ea:	684b      	ldr	r3, [r1, #4]
 80007ec:	64a0      	str	r0, [r4, #72]	; 0x48
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d012      	beq.n	8000818 <get_eit_entry+0x54>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f101 0004 	add.w	r0, r1, #4
 80007f8:	db20      	blt.n	800083c <get_eit_entry+0x78>
 80007fa:	f7ff ff95 	bl	8000728 <selfrel_offset31>
 80007fe:	2300      	movs	r3, #0
 8000800:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000802:	6523      	str	r3, [r4, #80]	; 0x50
 8000804:	6803      	ldr	r3, [r0, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db1c      	blt.n	8000844 <get_eit_entry+0x80>
 800080a:	f7ff ff8d 	bl	8000728 <selfrel_offset31>
 800080e:	2300      	movs	r3, #0
 8000810:	6120      	str	r0, [r4, #16]
 8000812:	4618      	mov	r0, r3
 8000814:	b003      	add	sp, #12
 8000816:	bd30      	pop	{r4, r5, pc}
 8000818:	2300      	movs	r3, #0
 800081a:	6123      	str	r3, [r4, #16]
 800081c:	2305      	movs	r3, #5
 800081e:	4618      	mov	r0, r3
 8000820:	b003      	add	sp, #12
 8000822:	bd30      	pop	{r4, r5, pc}
 8000824:	2300      	movs	r3, #0
 8000826:	6123      	str	r3, [r4, #16]
 8000828:	2309      	movs	r3, #9
 800082a:	4618      	mov	r0, r3
 800082c:	b003      	add	sp, #12
 800082e:	bd30      	pop	{r4, r5, pc}
 8000830:	490a      	ldr	r1, [pc, #40]	; (800085c <get_eit_entry+0x98>)
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <get_eit_entry+0x9c>)
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	10c9      	asrs	r1, r1, #3
 8000838:	9101      	str	r1, [sp, #4]
 800083a:	e7cf      	b.n	80007dc <get_eit_entry+0x18>
 800083c:	2301      	movs	r3, #1
 800083e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000840:	6523      	str	r3, [r4, #80]	; 0x50
 8000842:	e7df      	b.n	8000804 <get_eit_entry+0x40>
 8000844:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000848:	f7ff ffa8 	bl	800079c <__gnu_unwind_get_pr_addr>
 800084c:	2800      	cmp	r0, #0
 800084e:	6120      	str	r0, [r4, #16]
 8000850:	bf14      	ite	ne
 8000852:	2300      	movne	r3, #0
 8000854:	2309      	moveq	r3, #9
 8000856:	e7dc      	b.n	8000812 <get_eit_entry+0x4e>
 8000858:	00000000 	.word	0x00000000
 800085c:	0800650c 	.word	0x0800650c
 8000860:	08006114 	.word	0x08006114

08000864 <restore_non_core_regs>:
 8000864:	6803      	ldr	r3, [r0, #0]
 8000866:	07da      	lsls	r2, r3, #31
 8000868:	b510      	push	{r4, lr}
 800086a:	4604      	mov	r4, r0
 800086c:	d406      	bmi.n	800087c <restore_non_core_regs+0x18>
 800086e:	079b      	lsls	r3, r3, #30
 8000870:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000874:	d509      	bpl.n	800088a <restore_non_core_regs+0x26>
 8000876:	f000 fc59 	bl	800112c <__gnu_Unwind_Restore_VFP_D>
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	0759      	lsls	r1, r3, #29
 800087e:	d509      	bpl.n	8000894 <restore_non_core_regs+0x30>
 8000880:	071a      	lsls	r2, r3, #28
 8000882:	d50e      	bpl.n	80008a2 <restore_non_core_regs+0x3e>
 8000884:	06db      	lsls	r3, r3, #27
 8000886:	d513      	bpl.n	80008b0 <restore_non_core_regs+0x4c>
 8000888:	bd10      	pop	{r4, pc}
 800088a:	f000 fc47 	bl	800111c <__gnu_Unwind_Restore_VFP>
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	0759      	lsls	r1, r3, #29
 8000892:	d4f5      	bmi.n	8000880 <restore_non_core_regs+0x1c>
 8000894:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000898:	f000 fc50 	bl	800113c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	071a      	lsls	r2, r3, #28
 80008a0:	d4f0      	bmi.n	8000884 <restore_non_core_regs+0x20>
 80008a2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80008a6:	f000 fc51 	bl	800114c <__gnu_Unwind_Restore_WMMXD>
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	06db      	lsls	r3, r3, #27
 80008ae:	d4eb      	bmi.n	8000888 <restore_non_core_regs+0x24>
 80008b0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80008b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008b8:	f000 bc8c 	b.w	80011d4 <__gnu_Unwind_Restore_WMMXC>

080008bc <_Unwind_decode_typeinfo_ptr.isra.0>:
 80008bc:	6803      	ldr	r3, [r0, #0]
 80008be:	b10b      	cbz	r3, 80008c4 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80008c0:	4418      	add	r0, r3
 80008c2:	4770      	bx	lr
 80008c4:	4618      	mov	r0, r3
 80008c6:	4770      	bx	lr

080008c8 <__gnu_unwind_24bit.isra.1>:
 80008c8:	2009      	movs	r0, #9
 80008ca:	4770      	bx	lr

080008cc <_Unwind_DebugHook>:
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop

080008d0 <unwind_phase2>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	4604      	mov	r4, r0
 80008d4:	460d      	mov	r5, r1
 80008d6:	e008      	b.n	80008ea <unwind_phase2+0x1a>
 80008d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80008da:	6163      	str	r3, [r4, #20]
 80008dc:	462a      	mov	r2, r5
 80008de:	6923      	ldr	r3, [r4, #16]
 80008e0:	4621      	mov	r1, r4
 80008e2:	2001      	movs	r0, #1
 80008e4:	4798      	blx	r3
 80008e6:	2808      	cmp	r0, #8
 80008e8:	d108      	bne.n	80008fc <unwind_phase2+0x2c>
 80008ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008ec:	4620      	mov	r0, r4
 80008ee:	f7ff ff69 	bl	80007c4 <get_eit_entry>
 80008f2:	4606      	mov	r6, r0
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d0ef      	beq.n	80008d8 <unwind_phase2+0x8>
 80008f8:	f003 feea 	bl	80046d0 <abort>
 80008fc:	2807      	cmp	r0, #7
 80008fe:	d1fb      	bne.n	80008f8 <unwind_phase2+0x28>
 8000900:	4630      	mov	r0, r6
 8000902:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000904:	f7ff ffe2 	bl	80008cc <_Unwind_DebugHook>
 8000908:	1d28      	adds	r0, r5, #4
 800090a:	f000 fbfb 	bl	8001104 <__restore_core_regs>
 800090e:	bf00      	nop

08000910 <unwind_phase2_forced>:
 8000910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000914:	1d0c      	adds	r4, r1, #4
 8000916:	4606      	mov	r6, r0
 8000918:	4617      	mov	r7, r2
 800091a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000920:	ad03      	add	r5, sp, #12
 8000922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000930:	ac02      	add	r4, sp, #8
 8000932:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8000936:	f8d6 9018 	ldr.w	r9, [r6, #24]
 800093a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800093e:	2300      	movs	r3, #0
 8000940:	4630      	mov	r0, r6
 8000942:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000944:	6023      	str	r3, [r4, #0]
 8000946:	f7ff ff3d 	bl	80007c4 <get_eit_entry>
 800094a:	2f00      	cmp	r7, #0
 800094c:	4605      	mov	r5, r0
 800094e:	bf14      	ite	ne
 8000950:	270a      	movne	r7, #10
 8000952:	2709      	moveq	r7, #9
 8000954:	b17d      	cbz	r5, 8000976 <unwind_phase2_forced+0x66>
 8000956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000958:	f047 0110 	orr.w	r1, r7, #16
 800095c:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000960:	4632      	mov	r2, r6
 8000962:	6463      	str	r3, [r4, #68]	; 0x44
 8000964:	2001      	movs	r0, #1
 8000966:	4633      	mov	r3, r6
 8000968:	47c0      	blx	r8
 800096a:	bb78      	cbnz	r0, 80009cc <unwind_phase2_forced+0xbc>
 800096c:	4628      	mov	r0, r5
 800096e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000978:	6173      	str	r3, [r6, #20]
 800097a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800097e:	4621      	mov	r1, r4
 8000980:	a87a      	add	r0, sp, #488	; 0x1e8
 8000982:	f003 fedb 	bl	800473c <memcpy>
 8000986:	6933      	ldr	r3, [r6, #16]
 8000988:	aa7a      	add	r2, sp, #488	; 0x1e8
 800098a:	4631      	mov	r1, r6
 800098c:	4638      	mov	r0, r7
 800098e:	4798      	blx	r3
 8000990:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000992:	4682      	mov	sl, r0
 8000994:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000998:	4639      	mov	r1, r7
 800099a:	6463      	str	r3, [r4, #68]	; 0x44
 800099c:	4632      	mov	r2, r6
 800099e:	4633      	mov	r3, r6
 80009a0:	2001      	movs	r0, #1
 80009a2:	47c0      	blx	r8
 80009a4:	b990      	cbnz	r0, 80009cc <unwind_phase2_forced+0xbc>
 80009a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009aa:	a97a      	add	r1, sp, #488	; 0x1e8
 80009ac:	4620      	mov	r0, r4
 80009ae:	f003 fec5 	bl	800473c <memcpy>
 80009b2:	f1ba 0f08 	cmp.w	sl, #8
 80009b6:	d106      	bne.n	80009c6 <unwind_phase2_forced+0xb6>
 80009b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80009ba:	4630      	mov	r0, r6
 80009bc:	f7ff ff02 	bl	80007c4 <get_eit_entry>
 80009c0:	2709      	movs	r7, #9
 80009c2:	4605      	mov	r5, r0
 80009c4:	e7c6      	b.n	8000954 <unwind_phase2_forced+0x44>
 80009c6:	f1ba 0f07 	cmp.w	sl, #7
 80009ca:	d004      	beq.n	80009d6 <unwind_phase2_forced+0xc6>
 80009cc:	2009      	movs	r0, #9
 80009ce:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	4628      	mov	r0, r5
 80009d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80009da:	f7ff ff77 	bl	80008cc <_Unwind_DebugHook>
 80009de:	a803      	add	r0, sp, #12
 80009e0:	f000 fb90 	bl	8001104 <__restore_core_regs>

080009e4 <_Unwind_GetCFA>:
 80009e4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80009e6:	4770      	bx	lr

080009e8 <__gnu_Unwind_RaiseException>:
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80009ec:	640b      	str	r3, [r1, #64]	; 0x40
 80009ee:	1d0e      	adds	r6, r1, #4
 80009f0:	460f      	mov	r7, r1
 80009f2:	4604      	mov	r4, r0
 80009f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009f6:	b0f9      	sub	sp, #484	; 0x1e4
 80009f8:	ad01      	add	r5, sp, #4
 80009fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a08:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000a0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a10:	9600      	str	r6, [sp, #0]
 8000a12:	e006      	b.n	8000a22 <__gnu_Unwind_RaiseException+0x3a>
 8000a14:	6923      	ldr	r3, [r4, #16]
 8000a16:	466a      	mov	r2, sp
 8000a18:	4621      	mov	r1, r4
 8000a1a:	4798      	blx	r3
 8000a1c:	2808      	cmp	r0, #8
 8000a1e:	4605      	mov	r5, r0
 8000a20:	d108      	bne.n	8000a34 <__gnu_Unwind_RaiseException+0x4c>
 8000a22:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000a24:	4620      	mov	r0, r4
 8000a26:	f7ff fecd 	bl	80007c4 <get_eit_entry>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d0f2      	beq.n	8000a14 <__gnu_Unwind_RaiseException+0x2c>
 8000a2e:	2009      	movs	r0, #9
 8000a30:	b079      	add	sp, #484	; 0x1e4
 8000a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a34:	4668      	mov	r0, sp
 8000a36:	f7ff ff15 	bl	8000864 <restore_non_core_regs>
 8000a3a:	2d06      	cmp	r5, #6
 8000a3c:	d1f7      	bne.n	8000a2e <__gnu_Unwind_RaiseException+0x46>
 8000a3e:	4639      	mov	r1, r7
 8000a40:	4620      	mov	r0, r4
 8000a42:	f7ff ff45 	bl	80008d0 <unwind_phase2>
 8000a46:	bf00      	nop

08000a48 <__gnu_Unwind_ForcedUnwind>:
 8000a48:	b430      	push	{r4, r5}
 8000a4a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000a4c:	60c1      	str	r1, [r0, #12]
 8000a4e:	6182      	str	r2, [r0, #24]
 8000a50:	4619      	mov	r1, r3
 8000a52:	641d      	str	r5, [r3, #64]	; 0x40
 8000a54:	2200      	movs	r2, #0
 8000a56:	bc30      	pop	{r4, r5}
 8000a58:	e75a      	b.n	8000910 <unwind_phase2_forced>
 8000a5a:	bf00      	nop

08000a5c <__gnu_Unwind_Resume>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	68c6      	ldr	r6, [r0, #12]
 8000a60:	6943      	ldr	r3, [r0, #20]
 8000a62:	640b      	str	r3, [r1, #64]	; 0x40
 8000a64:	b126      	cbz	r6, 8000a70 <__gnu_Unwind_Resume+0x14>
 8000a66:	2201      	movs	r2, #1
 8000a68:	f7ff ff52 	bl	8000910 <unwind_phase2_forced>
 8000a6c:	f003 fe30 	bl	80046d0 <abort>
 8000a70:	6903      	ldr	r3, [r0, #16]
 8000a72:	460a      	mov	r2, r1
 8000a74:	4604      	mov	r4, r0
 8000a76:	460d      	mov	r5, r1
 8000a78:	4601      	mov	r1, r0
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	4798      	blx	r3
 8000a7e:	2807      	cmp	r0, #7
 8000a80:	d007      	beq.n	8000a92 <__gnu_Unwind_Resume+0x36>
 8000a82:	2808      	cmp	r0, #8
 8000a84:	d103      	bne.n	8000a8e <__gnu_Unwind_Resume+0x32>
 8000a86:	4629      	mov	r1, r5
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f7ff ff21 	bl	80008d0 <unwind_phase2>
 8000a8e:	f003 fe1f 	bl	80046d0 <abort>
 8000a92:	4630      	mov	r0, r6
 8000a94:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a96:	f7ff ff19 	bl	80008cc <_Unwind_DebugHook>
 8000a9a:	1d28      	adds	r0, r5, #4
 8000a9c:	f000 fb32 	bl	8001104 <__restore_core_regs>

08000aa0 <__gnu_Unwind_Resume_or_Rethrow>:
 8000aa0:	68c2      	ldr	r2, [r0, #12]
 8000aa2:	b11a      	cbz	r2, 8000aac <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000aa4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000aa6:	640a      	str	r2, [r1, #64]	; 0x40
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	e731      	b.n	8000910 <unwind_phase2_forced>
 8000aac:	e79c      	b.n	80009e8 <__gnu_Unwind_RaiseException>
 8000aae:	bf00      	nop

08000ab0 <_Unwind_Complete>:
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <_Unwind_DeleteException>:
 8000ab4:	6883      	ldr	r3, [r0, #8]
 8000ab6:	b113      	cbz	r3, 8000abe <_Unwind_DeleteException+0xa>
 8000ab8:	4601      	mov	r1, r0
 8000aba:	2001      	movs	r0, #1
 8000abc:	4718      	bx	r3
 8000abe:	4770      	bx	lr

08000ac0 <_Unwind_VRS_Get>:
 8000ac0:	b500      	push	{lr}
 8000ac2:	2904      	cmp	r1, #4
 8000ac4:	d807      	bhi.n	8000ad6 <_Unwind_VRS_Get+0x16>
 8000ac6:	e8df f001 	tbb	[pc, r1]
 8000aca:	0903      	.short	0x0903
 8000acc:	0906      	.short	0x0906
 8000ace:	09          	.byte	0x09
 8000acf:	00          	.byte	0x00
 8000ad0:	b90b      	cbnz	r3, 8000ad6 <_Unwind_VRS_Get+0x16>
 8000ad2:	2a0f      	cmp	r2, #15
 8000ad4:	d905      	bls.n	8000ae2 <_Unwind_VRS_Get+0x22>
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000adc:	2001      	movs	r0, #1
 8000ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ae2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	6853      	ldr	r3, [r2, #4]
 8000aea:	9a01      	ldr	r2, [sp, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8000af2:	bf00      	nop

08000af4 <_Unwind_GetGR>:
 8000af4:	b510      	push	{r4, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	2300      	movs	r3, #0
 8000afa:	ac03      	add	r4, sp, #12
 8000afc:	460a      	mov	r2, r1
 8000afe:	9400      	str	r4, [sp, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f7ff ffdd 	bl	8000ac0 <_Unwind_VRS_Get>
 8000b06:	9803      	ldr	r0, [sp, #12]
 8000b08:	b004      	add	sp, #16
 8000b0a:	bd10      	pop	{r4, pc}

08000b0c <_Unwind_VRS_Set>:
 8000b0c:	b500      	push	{lr}
 8000b0e:	2904      	cmp	r1, #4
 8000b10:	d807      	bhi.n	8000b22 <_Unwind_VRS_Set+0x16>
 8000b12:	e8df f001 	tbb	[pc, r1]
 8000b16:	0903      	.short	0x0903
 8000b18:	0906      	.short	0x0906
 8000b1a:	09          	.byte	0x09
 8000b1b:	00          	.byte	0x00
 8000b1c:	b90b      	cbnz	r3, 8000b22 <_Unwind_VRS_Set+0x16>
 8000b1e:	2a0f      	cmp	r2, #15
 8000b20:	d905      	bls.n	8000b2e <_Unwind_VRS_Set+0x22>
 8000b22:	2002      	movs	r0, #2
 8000b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b2e:	9901      	ldr	r1, [sp, #4]
 8000b30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000b34:	6809      	ldr	r1, [r1, #0]
 8000b36:	6051      	str	r1, [r2, #4]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b3e:	bf00      	nop

08000b40 <_Unwind_SetGR>:
 8000b40:	b510      	push	{r4, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	ac04      	add	r4, sp, #16
 8000b46:	2300      	movs	r3, #0
 8000b48:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	9400      	str	r4, [sp, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f7ff ffdb 	bl	8000b0c <_Unwind_VRS_Set>
 8000b56:	b004      	add	sp, #16
 8000b58:	bd10      	pop	{r4, pc}
 8000b5a:	bf00      	nop

08000b5c <__gnu_Unwind_Backtrace>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	1d15      	adds	r5, r2, #4
 8000b64:	4607      	mov	r7, r0
 8000b66:	460e      	mov	r6, r1
 8000b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000b6e:	ac17      	add	r4, sp, #92	; 0x5c
 8000b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b7e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000b82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b86:	9516      	str	r5, [sp, #88]	; 0x58
 8000b88:	e010      	b.n	8000bac <__gnu_Unwind_Backtrace+0x50>
 8000b8a:	a816      	add	r0, sp, #88	; 0x58
 8000b8c:	f7ff ffd8 	bl	8000b40 <_Unwind_SetGR>
 8000b90:	4631      	mov	r1, r6
 8000b92:	a816      	add	r0, sp, #88	; 0x58
 8000b94:	47b8      	blx	r7
 8000b96:	aa16      	add	r2, sp, #88	; 0x58
 8000b98:	4669      	mov	r1, sp
 8000b9a:	b978      	cbnz	r0, 8000bbc <__gnu_Unwind_Backtrace+0x60>
 8000b9c:	9b04      	ldr	r3, [sp, #16]
 8000b9e:	2008      	movs	r0, #8
 8000ba0:	4798      	blx	r3
 8000ba2:	2805      	cmp	r0, #5
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	d00a      	beq.n	8000bbe <__gnu_Unwind_Backtrace+0x62>
 8000ba8:	2809      	cmp	r0, #9
 8000baa:	d007      	beq.n	8000bbc <__gnu_Unwind_Backtrace+0x60>
 8000bac:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000bae:	4668      	mov	r0, sp
 8000bb0:	f7ff fe08 	bl	80007c4 <get_eit_entry>
 8000bb4:	466a      	mov	r2, sp
 8000bb6:	210c      	movs	r1, #12
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d0e6      	beq.n	8000b8a <__gnu_Unwind_Backtrace+0x2e>
 8000bbc:	2409      	movs	r4, #9
 8000bbe:	a816      	add	r0, sp, #88	; 0x58
 8000bc0:	f7ff fe50 	bl	8000864 <restore_non_core_regs>
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bcc <__gnu_unwind_pr_common>:
 8000bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000bd4:	b08b      	sub	sp, #44	; 0x2c
 8000bd6:	1d0c      	adds	r4, r1, #4
 8000bd8:	6809      	ldr	r1, [r1, #0]
 8000bda:	9107      	str	r1, [sp, #28]
 8000bdc:	4691      	mov	r9, r2
 8000bde:	9408      	str	r4, [sp, #32]
 8000be0:	f000 0b03 	and.w	fp, r0, #3
 8000be4:	461e      	mov	r6, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d164      	bne.n	8000cb4 <__gnu_unwind_pr_common+0xe8>
 8000bea:	0209      	lsls	r1, r1, #8
 8000bec:	2303      	movs	r3, #3
 8000bee:	9107      	str	r1, [sp, #28]
 8000bf0:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000bf4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000bf8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000bfa:	f1bb 0f02 	cmp.w	fp, #2
 8000bfe:	bf08      	it	eq
 8000c00:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000c02:	f013 0301 	ands.w	r3, r3, #1
 8000c06:	d143      	bne.n	8000c90 <__gnu_unwind_pr_common+0xc4>
 8000c08:	f000 0008 	and.w	r0, r0, #8
 8000c0c:	b2c2      	uxtb	r2, r0
 8000c0e:	9203      	str	r2, [sp, #12]
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	6827      	ldr	r7, [r4, #0]
 8000c14:	2f00      	cmp	r7, #0
 8000c16:	d03d      	beq.n	8000c94 <__gnu_unwind_pr_common+0xc8>
 8000c18:	2e02      	cmp	r6, #2
 8000c1a:	d047      	beq.n	8000cac <__gnu_unwind_pr_common+0xe0>
 8000c1c:	8827      	ldrh	r7, [r4, #0]
 8000c1e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8000c22:	3404      	adds	r4, #4
 8000c24:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000c26:	f028 0a01 	bic.w	sl, r8, #1
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	449a      	add	sl, r3
 8000c30:	f7ff ff60 	bl	8000af4 <_Unwind_GetGR>
 8000c34:	4582      	cmp	sl, r0
 8000c36:	d837      	bhi.n	8000ca8 <__gnu_unwind_pr_common+0xdc>
 8000c38:	f027 0301 	bic.w	r3, r7, #1
 8000c3c:	449a      	add	sl, r3
 8000c3e:	4550      	cmp	r0, sl
 8000c40:	bf2c      	ite	cs
 8000c42:	2000      	movcs	r0, #0
 8000c44:	2001      	movcc	r0, #1
 8000c46:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000c4a:	f008 0802 	and.w	r8, r8, #2
 8000c4e:	f007 0701 	and.w	r7, r7, #1
 8000c52:	ea48 0807 	orr.w	r8, r8, r7
 8000c56:	f1b8 0f01 	cmp.w	r8, #1
 8000c5a:	d041      	beq.n	8000ce0 <__gnu_unwind_pr_common+0x114>
 8000c5c:	d338      	bcc.n	8000cd0 <__gnu_unwind_pr_common+0x104>
 8000c5e:	f1b8 0f02 	cmp.w	r8, #2
 8000c62:	d11d      	bne.n	8000ca0 <__gnu_unwind_pr_common+0xd4>
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c6a:	9202      	str	r2, [sp, #8]
 8000c6c:	f1bb 0f00 	cmp.w	fp, #0
 8000c70:	d179      	bne.n	8000d66 <__gnu_unwind_pr_common+0x19a>
 8000c72:	b130      	cbz	r0, 8000c82 <__gnu_unwind_pr_common+0xb6>
 8000c74:	9903      	ldr	r1, [sp, #12]
 8000c76:	2900      	cmp	r1, #0
 8000c78:	f000 8081 	beq.w	8000d7e <__gnu_unwind_pr_common+0x1b2>
 8000c7c:	2a00      	cmp	r2, #0
 8000c7e:	f000 80a8 	beq.w	8000dd2 <__gnu_unwind_pr_common+0x206>
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db79      	blt.n	8000d7a <__gnu_unwind_pr_common+0x1ae>
 8000c86:	9b02      	ldr	r3, [sp, #8]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000c8e:	e7c0      	b.n	8000c12 <__gnu_unwind_pr_common+0x46>
 8000c90:	2300      	movs	r3, #0
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	2e02      	cmp	r6, #2
 8000c96:	dd40      	ble.n	8000d1a <__gnu_unwind_pr_common+0x14e>
 8000c98:	f7ff fe16 	bl	80008c8 <__gnu_unwind_24bit.isra.1>
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	d042      	beq.n	8000d26 <__gnu_unwind_pr_common+0x15a>
 8000ca0:	2009      	movs	r0, #9
 8000ca2:	b00b      	add	sp, #44	; 0x2c
 8000ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca8:	2000      	movs	r0, #0
 8000caa:	e7cc      	b.n	8000c46 <__gnu_unwind_pr_common+0x7a>
 8000cac:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000cb0:	3408      	adds	r4, #8
 8000cb2:	e7b7      	b.n	8000c24 <__gnu_unwind_pr_common+0x58>
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	dc9f      	bgt.n	8000bf8 <__gnu_unwind_pr_common+0x2c>
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	0409      	lsls	r1, r1, #16
 8000cbe:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000cc8:	9107      	str	r1, [sp, #28]
 8000cca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000cce:	e793      	b.n	8000bf8 <__gnu_unwind_pr_common+0x2c>
 8000cd0:	f1bb 0f00 	cmp.w	fp, #0
 8000cd4:	d002      	beq.n	8000cdc <__gnu_unwind_pr_common+0x110>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	f040 80b0 	bne.w	8000e3c <__gnu_unwind_pr_common+0x270>
 8000cdc:	3404      	adds	r4, #4
 8000cde:	e798      	b.n	8000c12 <__gnu_unwind_pr_common+0x46>
 8000ce0:	f1bb 0f00 	cmp.w	fp, #0
 8000ce4:	d126      	bne.n	8000d34 <__gnu_unwind_pr_common+0x168>
 8000ce6:	b1b0      	cbz	r0, 8000d16 <__gnu_unwind_pr_common+0x14a>
 8000ce8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000cec:	1c99      	adds	r1, r3, #2
 8000cee:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000cf2:	d0d5      	beq.n	8000ca0 <__gnu_unwind_pr_common+0xd4>
 8000cf4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	9106      	str	r1, [sp, #24]
 8000cfc:	f000 8094 	beq.w	8000e28 <__gnu_unwind_pr_common+0x25c>
 8000d00:	1d20      	adds	r0, r4, #4
 8000d02:	f7ff fddb 	bl	80008bc <_Unwind_decode_typeinfo_ptr.isra.0>
 8000d06:	ab06      	add	r3, sp, #24
 8000d08:	4601      	mov	r1, r0
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	f3af 8000 	nop.w
 8000d10:	2800      	cmp	r0, #0
 8000d12:	f040 80b8 	bne.w	8000e86 <__gnu_unwind_pr_common+0x2ba>
 8000d16:	3408      	adds	r4, #8
 8000d18:	e77b      	b.n	8000c12 <__gnu_unwind_pr_common+0x46>
 8000d1a:	a907      	add	r1, sp, #28
 8000d1c:	4648      	mov	r0, r9
 8000d1e:	f000 faf3 	bl	8001308 <__gnu_unwind_execute>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d1bc      	bne.n	8000ca0 <__gnu_unwind_pr_common+0xd4>
 8000d26:	9b01      	ldr	r3, [sp, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d15c      	bne.n	8000de6 <__gnu_unwind_pr_common+0x21a>
 8000d2c:	2008      	movs	r0, #8
 8000d2e:	b00b      	add	sp, #44	; 0x2c
 8000d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d34:	210d      	movs	r1, #13
 8000d36:	4648      	mov	r0, r9
 8000d38:	6a2f      	ldr	r7, [r5, #32]
 8000d3a:	f7ff fedb 	bl	8000af4 <_Unwind_GetGR>
 8000d3e:	4287      	cmp	r7, r0
 8000d40:	d1e9      	bne.n	8000d16 <__gnu_unwind_pr_common+0x14a>
 8000d42:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d44:	429c      	cmp	r4, r3
 8000d46:	d1e6      	bne.n	8000d16 <__gnu_unwind_pr_common+0x14a>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f7ff fced 	bl	8000728 <selfrel_offset31>
 8000d4e:	210f      	movs	r1, #15
 8000d50:	4602      	mov	r2, r0
 8000d52:	4648      	mov	r0, r9
 8000d54:	f7ff fef4 	bl	8000b40 <_Unwind_SetGR>
 8000d58:	4648      	mov	r0, r9
 8000d5a:	462a      	mov	r2, r5
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f7ff feef 	bl	8000b40 <_Unwind_SetGR>
 8000d62:	2007      	movs	r0, #7
 8000d64:	e79d      	b.n	8000ca2 <__gnu_unwind_pr_common+0xd6>
 8000d66:	210d      	movs	r1, #13
 8000d68:	4648      	mov	r0, r9
 8000d6a:	6a2f      	ldr	r7, [r5, #32]
 8000d6c:	f7ff fec2 	bl	8000af4 <_Unwind_GetGR>
 8000d70:	4287      	cmp	r7, r0
 8000d72:	d048      	beq.n	8000e06 <__gnu_unwind_pr_common+0x23a>
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	da85      	bge.n	8000c86 <__gnu_unwind_pr_common+0xba>
 8000d7a:	3404      	adds	r4, #4
 8000d7c:	e783      	b.n	8000c86 <__gnu_unwind_pr_common+0xba>
 8000d7e:	9b02      	ldr	r3, [sp, #8]
 8000d80:	b33b      	cbz	r3, 8000dd2 <__gnu_unwind_pr_common+0x206>
 8000d82:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000d86:	1d27      	adds	r7, r4, #4
 8000d88:	f8cd b010 	str.w	fp, [sp, #16]
 8000d8c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000d90:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000d94:	9605      	str	r6, [sp, #20]
 8000d96:	46a3      	mov	fp, r4
 8000d98:	461c      	mov	r4, r3
 8000d9a:	e002      	b.n	8000da2 <__gnu_unwind_pr_common+0x1d6>
 8000d9c:	45b2      	cmp	sl, r6
 8000d9e:	46b0      	mov	r8, r6
 8000da0:	d016      	beq.n	8000dd0 <__gnu_unwind_pr_common+0x204>
 8000da2:	4638      	mov	r0, r7
 8000da4:	9406      	str	r4, [sp, #24]
 8000da6:	f7ff fd89 	bl	80008bc <_Unwind_decode_typeinfo_ptr.isra.0>
 8000daa:	ab06      	add	r3, sp, #24
 8000dac:	4601      	mov	r1, r0
 8000dae:	2200      	movs	r2, #0
 8000db0:	4628      	mov	r0, r5
 8000db2:	f3af 8000 	nop.w
 8000db6:	f108 0601 	add.w	r6, r8, #1
 8000dba:	3704      	adds	r7, #4
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d0ed      	beq.n	8000d9c <__gnu_unwind_pr_common+0x1d0>
 8000dc0:	9b02      	ldr	r3, [sp, #8]
 8000dc2:	9e05      	ldr	r6, [sp, #20]
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	465c      	mov	r4, fp
 8000dc8:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000dcc:	d1d2      	bne.n	8000d74 <__gnu_unwind_pr_common+0x1a8>
 8000dce:	e000      	b.n	8000dd2 <__gnu_unwind_pr_common+0x206>
 8000dd0:	465c      	mov	r4, fp
 8000dd2:	4648      	mov	r0, r9
 8000dd4:	210d      	movs	r1, #13
 8000dd6:	f7ff fe8d 	bl	8000af4 <_Unwind_GetGR>
 8000dda:	9b06      	ldr	r3, [sp, #24]
 8000ddc:	6228      	str	r0, [r5, #32]
 8000dde:	62ac      	str	r4, [r5, #40]	; 0x28
 8000de0:	626b      	str	r3, [r5, #36]	; 0x24
 8000de2:	2006      	movs	r0, #6
 8000de4:	e75d      	b.n	8000ca2 <__gnu_unwind_pr_common+0xd6>
 8000de6:	210f      	movs	r1, #15
 8000de8:	4648      	mov	r0, r9
 8000dea:	f7ff fe83 	bl	8000af4 <_Unwind_GetGR>
 8000dee:	210e      	movs	r1, #14
 8000df0:	4602      	mov	r2, r0
 8000df2:	4648      	mov	r0, r9
 8000df4:	f7ff fea4 	bl	8000b40 <_Unwind_SetGR>
 8000df8:	4648      	mov	r0, r9
 8000dfa:	4a2a      	ldr	r2, [pc, #168]	; (8000ea4 <__gnu_unwind_pr_common+0x2d8>)
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	f7ff fe9f 	bl	8000b40 <_Unwind_SetGR>
 8000e02:	2007      	movs	r0, #7
 8000e04:	e74d      	b.n	8000ca2 <__gnu_unwind_pr_common+0xd6>
 8000e06:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d1b3      	bne.n	8000d74 <__gnu_unwind_pr_common+0x1a8>
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	2700      	movs	r7, #0
 8000e10:	18a3      	adds	r3, r4, r2
 8000e12:	9902      	ldr	r1, [sp, #8]
 8000e14:	62a9      	str	r1, [r5, #40]	; 0x28
 8000e16:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000e18:	632a      	str	r2, [r5, #48]	; 0x30
 8000e1a:	636b      	str	r3, [r5, #52]	; 0x34
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	42bb      	cmp	r3, r7
 8000e20:	db1f      	blt.n	8000e62 <__gnu_unwind_pr_common+0x296>
 8000e22:	2301      	movs	r3, #1
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	e72e      	b.n	8000c86 <__gnu_unwind_pr_common+0xba>
 8000e28:	4648      	mov	r0, r9
 8000e2a:	210d      	movs	r1, #13
 8000e2c:	f7ff fe62 	bl	8000af4 <_Unwind_GetGR>
 8000e30:	6228      	str	r0, [r5, #32]
 8000e32:	9b06      	ldr	r3, [sp, #24]
 8000e34:	626b      	str	r3, [r5, #36]	; 0x24
 8000e36:	62ac      	str	r4, [r5, #40]	; 0x28
 8000e38:	2006      	movs	r0, #6
 8000e3a:	e732      	b.n	8000ca2 <__gnu_unwind_pr_common+0xd6>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff fc73 	bl	8000728 <selfrel_offset31>
 8000e42:	3404      	adds	r4, #4
 8000e44:	4606      	mov	r6, r0
 8000e46:	63ac      	str	r4, [r5, #56]	; 0x38
 8000e48:	4628      	mov	r0, r5
 8000e4a:	f3af 8000 	nop.w
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	f43f af26 	beq.w	8000ca0 <__gnu_unwind_pr_common+0xd4>
 8000e54:	4648      	mov	r0, r9
 8000e56:	4632      	mov	r2, r6
 8000e58:	210f      	movs	r1, #15
 8000e5a:	f7ff fe71 	bl	8000b40 <_Unwind_SetGR>
 8000e5e:	2007      	movs	r0, #7
 8000e60:	e71f      	b.n	8000ca2 <__gnu_unwind_pr_common+0xd6>
 8000e62:	4608      	mov	r0, r1
 8000e64:	3001      	adds	r0, #1
 8000e66:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000e6a:	f7ff fc5d 	bl	8000728 <selfrel_offset31>
 8000e6e:	210f      	movs	r1, #15
 8000e70:	4602      	mov	r2, r0
 8000e72:	4648      	mov	r0, r9
 8000e74:	f7ff fe64 	bl	8000b40 <_Unwind_SetGR>
 8000e78:	4648      	mov	r0, r9
 8000e7a:	462a      	mov	r2, r5
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	f7ff fe5f 	bl	8000b40 <_Unwind_SetGR>
 8000e82:	2007      	movs	r0, #7
 8000e84:	e70d      	b.n	8000ca2 <__gnu_unwind_pr_common+0xd6>
 8000e86:	4607      	mov	r7, r0
 8000e88:	210d      	movs	r1, #13
 8000e8a:	4648      	mov	r0, r9
 8000e8c:	f7ff fe32 	bl	8000af4 <_Unwind_GetGR>
 8000e90:	2f02      	cmp	r7, #2
 8000e92:	6228      	str	r0, [r5, #32]
 8000e94:	d1cd      	bne.n	8000e32 <__gnu_unwind_pr_common+0x266>
 8000e96:	462b      	mov	r3, r5
 8000e98:	9a06      	ldr	r2, [sp, #24]
 8000e9a:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000e9e:	626b      	str	r3, [r5, #36]	; 0x24
 8000ea0:	e7c9      	b.n	8000e36 <__gnu_unwind_pr_common+0x26a>
 8000ea2:	bf00      	nop
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <__aeabi_unwind_cpp_pr0>:
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e68f      	b.n	8000bcc <__gnu_unwind_pr_common>

08000eac <__aeabi_unwind_cpp_pr1>:
 8000eac:	2301      	movs	r3, #1
 8000eae:	e68d      	b.n	8000bcc <__gnu_unwind_pr_common>

08000eb0 <__aeabi_unwind_cpp_pr2>:
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e68b      	b.n	8000bcc <__gnu_unwind_pr_common>

08000eb4 <_Unwind_VRS_Pop>:
 8000eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	b0c5      	sub	sp, #276	; 0x114
 8000eba:	2904      	cmp	r1, #4
 8000ebc:	d80d      	bhi.n	8000eda <_Unwind_VRS_Pop+0x26>
 8000ebe:	e8df f001 	tbb	[pc, r1]
 8000ec2:	0357      	.short	0x0357
 8000ec4:	310c      	.short	0x310c
 8000ec6:	0f          	.byte	0x0f
 8000ec7:	00          	.byte	0x00
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000ece:	b295      	uxth	r5, r2
 8000ed0:	d166      	bne.n	8000fa0 <_Unwind_VRS_Pop+0xec>
 8000ed2:	1972      	adds	r2, r6, r5
 8000ed4:	2a10      	cmp	r2, #16
 8000ed6:	f240 809f 	bls.w	8001018 <_Unwind_VRS_Pop+0x164>
 8000eda:	2002      	movs	r0, #2
 8000edc:	b045      	add	sp, #276	; 0x114
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1fa      	bne.n	8000eda <_Unwind_VRS_Pop+0x26>
 8000ee4:	2a10      	cmp	r2, #16
 8000ee6:	d8f8      	bhi.n	8000eda <_Unwind_VRS_Pop+0x26>
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	06d8      	lsls	r0, r3, #27
 8000eec:	f100 80c9 	bmi.w	8001082 <_Unwind_VRS_Pop+0x1ce>
 8000ef0:	ae22      	add	r6, sp, #136	; 0x88
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	9201      	str	r2, [sp, #4]
 8000ef6:	f000 f977 	bl	80011e8 <__gnu_Unwind_Save_WMMXC>
 8000efa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000efc:	9a01      	ldr	r2, [sp, #4]
 8000efe:	2300      	movs	r3, #0
 8000f00:	2501      	movs	r5, #1
 8000f02:	fa05 f103 	lsl.w	r1, r5, r3
 8000f06:	4211      	tst	r1, r2
 8000f08:	d003      	beq.n	8000f12 <_Unwind_VRS_Pop+0x5e>
 8000f0a:	6801      	ldr	r1, [r0, #0]
 8000f0c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000f10:	3004      	adds	r0, #4
 8000f12:	3301      	adds	r3, #1
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d1f4      	bne.n	8000f02 <_Unwind_VRS_Pop+0x4e>
 8000f18:	63a0      	str	r0, [r4, #56]	; 0x38
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	f000 f95a 	bl	80011d4 <__gnu_Unwind_Restore_WMMXC>
 8000f20:	2000      	movs	r0, #0
 8000f22:	e7db      	b.n	8000edc <_Unwind_VRS_Pop+0x28>
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d1d8      	bne.n	8000eda <_Unwind_VRS_Pop+0x26>
 8000f28:	0c15      	lsrs	r5, r2, #16
 8000f2a:	b297      	uxth	r7, r2
 8000f2c:	19eb      	adds	r3, r5, r7
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d8d3      	bhi.n	8000eda <_Unwind_VRS_Pop+0x26>
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	071e      	lsls	r6, r3, #28
 8000f36:	f100 80b8 	bmi.w	80010aa <_Unwind_VRS_Pop+0x1f6>
 8000f3a:	ae22      	add	r6, sp, #136	; 0x88
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	007f      	lsls	r7, r7, #1
 8000f40:	f000 f926 	bl	8001190 <__gnu_Unwind_Save_WMMXD>
 8000f44:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8000f48:	1e7b      	subs	r3, r7, #1
 8000f4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000f4c:	b157      	cbz	r7, 8000f64 <_Unwind_VRS_Pop+0xb0>
 8000f4e:	3a04      	subs	r2, #4
 8000f50:	4629      	mov	r1, r5
 8000f52:	f851 0b04 	ldr.w	r0, [r1], #4
 8000f56:	f842 0f04 	str.w	r0, [r2, #4]!
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	1c58      	adds	r0, r3, #1
 8000f5e:	d1f8      	bne.n	8000f52 <_Unwind_VRS_Pop+0x9e>
 8000f60:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8000f64:	4630      	mov	r0, r6
 8000f66:	63a5      	str	r5, [r4, #56]	; 0x38
 8000f68:	f000 f8f0 	bl	800114c <__gnu_Unwind_Restore_WMMXD>
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	e7b5      	b.n	8000edc <_Unwind_VRS_Pop+0x28>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1b2      	bne.n	8000eda <_Unwind_VRS_Pop+0x26>
 8000f74:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000f76:	b297      	uxth	r7, r2
 8000f78:	1d20      	adds	r0, r4, #4
 8000f7a:	2601      	movs	r6, #1
 8000f7c:	fa06 f103 	lsl.w	r1, r6, r3
 8000f80:	4239      	tst	r1, r7
 8000f82:	f103 0301 	add.w	r3, r3, #1
 8000f86:	d002      	beq.n	8000f8e <_Unwind_VRS_Pop+0xda>
 8000f88:	6829      	ldr	r1, [r5, #0]
 8000f8a:	6001      	str	r1, [r0, #0]
 8000f8c:	3504      	adds	r5, #4
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	f100 0004 	add.w	r0, r0, #4
 8000f94:	d1f2      	bne.n	8000f7c <_Unwind_VRS_Pop+0xc8>
 8000f96:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000f9a:	d13b      	bne.n	8001014 <_Unwind_VRS_Pop+0x160>
 8000f9c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000f9e:	e79d      	b.n	8000edc <_Unwind_VRS_Pop+0x28>
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d19a      	bne.n	8000eda <_Unwind_VRS_Pop+0x26>
 8000fa4:	1977      	adds	r7, r6, r5
 8000fa6:	2f20      	cmp	r7, #32
 8000fa8:	d897      	bhi.n	8000eda <_Unwind_VRS_Pop+0x26>
 8000faa:	2e0f      	cmp	r6, #15
 8000fac:	d965      	bls.n	800107a <_Unwind_VRS_Pop+0x1c6>
 8000fae:	462f      	mov	r7, r5
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d148      	bne.n	8001046 <_Unwind_VRS_Pop+0x192>
 8000fb4:	462a      	mov	r2, r5
 8000fb6:	2700      	movs	r7, #0
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000fbc:	dd71      	ble.n	80010a2 <_Unwind_VRS_Pop+0x1ee>
 8000fbe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	a844      	add	r0, sp, #272	; 0x110
 8000fc6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000fca:	388c      	subs	r0, #140	; 0x8c
 8000fcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8000fd0:	f840 5f04 	str.w	r5, [r0, #4]!
 8000fd4:	4291      	cmp	r1, r2
 8000fd6:	d1f9      	bne.n	8000fcc <_Unwind_VRS_Pop+0x118>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	b197      	cbz	r7, 8001002 <_Unwind_VRS_Pop+0x14e>
 8000fdc:	2e10      	cmp	r6, #16
 8000fde:	4632      	mov	r2, r6
 8000fe0:	a944      	add	r1, sp, #272	; 0x110
 8000fe2:	bf38      	it	cc
 8000fe4:	2210      	movcc	r2, #16
 8000fe6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000fea:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000fee:	0079      	lsls	r1, r7, #1
 8000ff0:	3a04      	subs	r2, #4
 8000ff2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000ff6:	f850 5b04 	ldr.w	r5, [r0], #4
 8000ffa:	f842 5f04 	str.w	r5, [r2, #4]!
 8000ffe:	4281      	cmp	r1, r0
 8001000:	d1f9      	bne.n	8000ff6 <_Unwind_VRS_Pop+0x142>
 8001002:	2b01      	cmp	r3, #1
 8001004:	d047      	beq.n	8001096 <_Unwind_VRS_Pop+0x1e2>
 8001006:	2e0f      	cmp	r6, #15
 8001008:	63a1      	str	r1, [r4, #56]	; 0x38
 800100a:	d932      	bls.n	8001072 <_Unwind_VRS_Pop+0x1be>
 800100c:	b117      	cbz	r7, 8001014 <_Unwind_VRS_Pop+0x160>
 800100e:	a802      	add	r0, sp, #8
 8001010:	f000 f894 	bl	800113c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001014:	2000      	movs	r0, #0
 8001016:	e761      	b.n	8000edc <_Unwind_VRS_Pop+0x28>
 8001018:	2e0f      	cmp	r6, #15
 800101a:	f63f af5e 	bhi.w	8000eda <_Unwind_VRS_Pop+0x26>
 800101e:	2700      	movs	r7, #0
 8001020:	6822      	ldr	r2, [r4, #0]
 8001022:	07d1      	lsls	r1, r2, #31
 8001024:	d50d      	bpl.n	8001042 <_Unwind_VRS_Pop+0x18e>
 8001026:	f022 0101 	bic.w	r1, r2, #1
 800102a:	2b05      	cmp	r3, #5
 800102c:	6021      	str	r1, [r4, #0]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	4620      	mov	r0, r4
 8001032:	d052      	beq.n	80010da <_Unwind_VRS_Pop+0x226>
 8001034:	f022 0203 	bic.w	r2, r2, #3
 8001038:	f840 2b48 	str.w	r2, [r0], #72
 800103c:	f000 f872 	bl	8001124 <__gnu_Unwind_Save_VFP>
 8001040:	9b01      	ldr	r3, [sp, #4]
 8001042:	2f00      	cmp	r7, #0
 8001044:	d051      	beq.n	80010ea <_Unwind_VRS_Pop+0x236>
 8001046:	6822      	ldr	r2, [r4, #0]
 8001048:	0751      	lsls	r1, r2, #29
 800104a:	d436      	bmi.n	80010ba <_Unwind_VRS_Pop+0x206>
 800104c:	2b01      	cmp	r3, #1
 800104e:	d03e      	beq.n	80010ce <_Unwind_VRS_Pop+0x21a>
 8001050:	2e0f      	cmp	r6, #15
 8001052:	d806      	bhi.n	8001062 <_Unwind_VRS_Pop+0x1ae>
 8001054:	a822      	add	r0, sp, #136	; 0x88
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	f000 f86c 	bl	8001134 <__gnu_Unwind_Save_VFP_D>
 800105c:	9b01      	ldr	r3, [sp, #4]
 800105e:	2f00      	cmp	r7, #0
 8001060:	d0a8      	beq.n	8000fb4 <_Unwind_VRS_Pop+0x100>
 8001062:	a802      	add	r0, sp, #8
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	f000 f86d 	bl	8001144 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	f1c6 0210 	rsb	r2, r6, #16
 8001070:	e7a2      	b.n	8000fb8 <_Unwind_VRS_Pop+0x104>
 8001072:	a822      	add	r0, sp, #136	; 0x88
 8001074:	f000 f85a 	bl	800112c <__gnu_Unwind_Restore_VFP_D>
 8001078:	e7c8      	b.n	800100c <_Unwind_VRS_Pop+0x158>
 800107a:	2f10      	cmp	r7, #16
 800107c:	d9cf      	bls.n	800101e <_Unwind_VRS_Pop+0x16a>
 800107e:	3f10      	subs	r7, #16
 8001080:	e7ce      	b.n	8001020 <_Unwind_VRS_Pop+0x16c>
 8001082:	f023 0310 	bic.w	r3, r3, #16
 8001086:	6023      	str	r3, [r4, #0]
 8001088:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	f000 f8ab 	bl	80011e8 <__gnu_Unwind_Save_WMMXC>
 8001092:	9a01      	ldr	r2, [sp, #4]
 8001094:	e72c      	b.n	8000ef0 <_Unwind_VRS_Pop+0x3c>
 8001096:	3104      	adds	r1, #4
 8001098:	63a1      	str	r1, [r4, #56]	; 0x38
 800109a:	a822      	add	r0, sp, #136	; 0x88
 800109c:	f000 f83e 	bl	800111c <__gnu_Unwind_Restore_VFP>
 80010a0:	e7b8      	b.n	8001014 <_Unwind_VRS_Pop+0x160>
 80010a2:	2f00      	cmp	r7, #0
 80010a4:	d19a      	bne.n	8000fdc <_Unwind_VRS_Pop+0x128>
 80010a6:	4601      	mov	r1, r0
 80010a8:	e7ab      	b.n	8001002 <_Unwind_VRS_Pop+0x14e>
 80010aa:	f023 0308 	bic.w	r3, r3, #8
 80010ae:	6023      	str	r3, [r4, #0]
 80010b0:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80010b4:	f000 f86c 	bl	8001190 <__gnu_Unwind_Save_WMMXD>
 80010b8:	e73f      	b.n	8000f3a <_Unwind_VRS_Pop+0x86>
 80010ba:	4620      	mov	r0, r4
 80010bc:	f022 0204 	bic.w	r2, r2, #4
 80010c0:	f840 2bd0 	str.w	r2, [r0], #208
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f000 f83d 	bl	8001144 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80010ca:	9b01      	ldr	r3, [sp, #4]
 80010cc:	e7be      	b.n	800104c <_Unwind_VRS_Pop+0x198>
 80010ce:	a822      	add	r0, sp, #136	; 0x88
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f000 f827 	bl	8001124 <__gnu_Unwind_Save_VFP>
 80010d6:	9b01      	ldr	r3, [sp, #4]
 80010d8:	e7c8      	b.n	800106c <_Unwind_VRS_Pop+0x1b8>
 80010da:	f041 0102 	orr.w	r1, r1, #2
 80010de:	f840 1b48 	str.w	r1, [r0], #72
 80010e2:	f000 f827 	bl	8001134 <__gnu_Unwind_Save_VFP_D>
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	e7ab      	b.n	8001042 <_Unwind_VRS_Pop+0x18e>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d003      	beq.n	80010f6 <_Unwind_VRS_Pop+0x242>
 80010ee:	2e0f      	cmp	r6, #15
 80010f0:	f63f af60 	bhi.w	8000fb4 <_Unwind_VRS_Pop+0x100>
 80010f4:	e7ae      	b.n	8001054 <_Unwind_VRS_Pop+0x1a0>
 80010f6:	a822      	add	r0, sp, #136	; 0x88
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	f000 f813 	bl	8001124 <__gnu_Unwind_Save_VFP>
 80010fe:	9b01      	ldr	r3, [sp, #4]
 8001100:	e758      	b.n	8000fb4 <_Unwind_VRS_Pop+0x100>
 8001102:	bf00      	nop

08001104 <__restore_core_regs>:
 8001104:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001108:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800110c:	469c      	mov	ip, r3
 800110e:	46a6      	mov	lr, r4
 8001110:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001114:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001118:	46e5      	mov	sp, ip
 800111a:	bd00      	pop	{pc}

0800111c <__gnu_Unwind_Restore_VFP>:
 800111c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__gnu_Unwind_Save_VFP>:
 8001124:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__gnu_Unwind_Restore_VFP_D>:
 800112c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <__gnu_Unwind_Save_VFP_D>:
 8001134:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800113c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001144:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <__gnu_Unwind_Restore_WMMXD>:
 800114c:	ecf0 0102 	ldfe	f0, [r0], #8
 8001150:	ecf0 1102 	ldfe	f1, [r0], #8
 8001154:	ecf0 2102 	ldfe	f2, [r0], #8
 8001158:	ecf0 3102 	ldfe	f3, [r0], #8
 800115c:	ecf0 4102 	ldfe	f4, [r0], #8
 8001160:	ecf0 5102 	ldfe	f5, [r0], #8
 8001164:	ecf0 6102 	ldfe	f6, [r0], #8
 8001168:	ecf0 7102 	ldfe	f7, [r0], #8
 800116c:	ecf0 8102 	ldfp	f0, [r0], #8
 8001170:	ecf0 9102 	ldfp	f1, [r0], #8
 8001174:	ecf0 a102 	ldfp	f2, [r0], #8
 8001178:	ecf0 b102 	ldfp	f3, [r0], #8
 800117c:	ecf0 c102 	ldfp	f4, [r0], #8
 8001180:	ecf0 d102 	ldfp	f5, [r0], #8
 8001184:	ecf0 e102 	ldfp	f6, [r0], #8
 8001188:	ecf0 f102 	ldfp	f7, [r0], #8
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <__gnu_Unwind_Save_WMMXD>:
 8001190:	ece0 0102 	stfe	f0, [r0], #8
 8001194:	ece0 1102 	stfe	f1, [r0], #8
 8001198:	ece0 2102 	stfe	f2, [r0], #8
 800119c:	ece0 3102 	stfe	f3, [r0], #8
 80011a0:	ece0 4102 	stfe	f4, [r0], #8
 80011a4:	ece0 5102 	stfe	f5, [r0], #8
 80011a8:	ece0 6102 	stfe	f6, [r0], #8
 80011ac:	ece0 7102 	stfe	f7, [r0], #8
 80011b0:	ece0 8102 	stfp	f0, [r0], #8
 80011b4:	ece0 9102 	stfp	f1, [r0], #8
 80011b8:	ece0 a102 	stfp	f2, [r0], #8
 80011bc:	ece0 b102 	stfp	f3, [r0], #8
 80011c0:	ece0 c102 	stfp	f4, [r0], #8
 80011c4:	ece0 d102 	stfp	f5, [r0], #8
 80011c8:	ece0 e102 	stfp	f6, [r0], #8
 80011cc:	ece0 f102 	stfp	f7, [r0], #8
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop

080011d4 <__gnu_Unwind_Restore_WMMXC>:
 80011d4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80011d8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80011dc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80011e0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop

080011e8 <__gnu_Unwind_Save_WMMXC>:
 80011e8:	fca0 8101 	stc2	1, cr8, [r0], #4
 80011ec:	fca0 9101 	stc2	1, cr9, [r0], #4
 80011f0:	fca0 a101 	stc2	1, cr10, [r0], #4
 80011f4:	fca0 b101 	stc2	1, cr11, [r0], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <_Unwind_RaiseException>:
 80011fc:	46ec      	mov	ip, sp
 80011fe:	b500      	push	{lr}
 8001200:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001204:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001210:	a901      	add	r1, sp, #4
 8001212:	f7ff fbe9 	bl	80009e8 <__gnu_Unwind_RaiseException>
 8001216:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800121a:	b012      	add	sp, #72	; 0x48
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <_Unwind_Resume>:
 8001220:	46ec      	mov	ip, sp
 8001222:	b500      	push	{lr}
 8001224:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001228:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001234:	a901      	add	r1, sp, #4
 8001236:	f7ff fc11 	bl	8000a5c <__gnu_Unwind_Resume>
 800123a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800123e:	b012      	add	sp, #72	; 0x48
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <_Unwind_Resume_or_Rethrow>:
 8001244:	46ec      	mov	ip, sp
 8001246:	b500      	push	{lr}
 8001248:	e92d 5000 	stmdb	sp!, {ip, lr}
 800124c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001258:	a901      	add	r1, sp, #4
 800125a:	f7ff fc21 	bl	8000aa0 <__gnu_Unwind_Resume_or_Rethrow>
 800125e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001262:	b012      	add	sp, #72	; 0x48
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop

08001268 <_Unwind_ForcedUnwind>:
 8001268:	46ec      	mov	ip, sp
 800126a:	b500      	push	{lr}
 800126c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001270:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	e92d 000c 	stmdb	sp!, {r2, r3}
 800127c:	ab01      	add	r3, sp, #4
 800127e:	f7ff fbe3 	bl	8000a48 <__gnu_Unwind_ForcedUnwind>
 8001282:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001286:	b012      	add	sp, #72	; 0x48
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop

0800128c <_Unwind_Backtrace>:
 800128c:	46ec      	mov	ip, sp
 800128e:	b500      	push	{lr}
 8001290:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001294:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012a0:	aa01      	add	r2, sp, #4
 80012a2:	f7ff fc5b 	bl	8000b5c <__gnu_Unwind_Backtrace>
 80012a6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012aa:	b012      	add	sp, #72	; 0x48
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop

080012b0 <next_unwind_byte>:
 80012b0:	7a03      	ldrb	r3, [r0, #8]
 80012b2:	b91b      	cbnz	r3, 80012bc <next_unwind_byte+0xc>
 80012b4:	7a43      	ldrb	r3, [r0, #9]
 80012b6:	b943      	cbnz	r3, 80012ca <next_unwind_byte+0x1a>
 80012b8:	20b0      	movs	r0, #176	; 0xb0
 80012ba:	4770      	bx	lr
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	6803      	ldr	r3, [r0, #0]
 80012c0:	7202      	strb	r2, [r0, #8]
 80012c2:	021a      	lsls	r2, r3, #8
 80012c4:	6002      	str	r2, [r0, #0]
 80012c6:	0e18      	lsrs	r0, r3, #24
 80012c8:	4770      	bx	lr
 80012ca:	6842      	ldr	r2, [r0, #4]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b410      	push	{r4}
 80012d0:	7243      	strb	r3, [r0, #9]
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	2103      	movs	r1, #3
 80012d6:	1d14      	adds	r4, r2, #4
 80012d8:	7201      	strb	r1, [r0, #8]
 80012da:	021a      	lsls	r2, r3, #8
 80012dc:	6044      	str	r4, [r0, #4]
 80012de:	6002      	str	r2, [r0, #0]
 80012e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012e4:	0e18      	lsrs	r0, r3, #24
 80012e6:	4770      	bx	lr

080012e8 <_Unwind_GetGR.constprop.0>:
 80012e8:	b500      	push	{lr}
 80012ea:	b085      	sub	sp, #20
 80012ec:	aa03      	add	r2, sp, #12
 80012ee:	2300      	movs	r3, #0
 80012f0:	9200      	str	r2, [sp, #0]
 80012f2:	4619      	mov	r1, r3
 80012f4:	220c      	movs	r2, #12
 80012f6:	f7ff fbe3 	bl	8000ac0 <_Unwind_VRS_Get>
 80012fa:	9803      	ldr	r0, [sp, #12]
 80012fc:	b005      	add	sp, #20
 80012fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001302:	bf00      	nop

08001304 <unwind_UCB_from_context>:
 8001304:	e7f0      	b.n	80012e8 <_Unwind_GetGR.constprop.0>
 8001306:	bf00      	nop

08001308 <__gnu_unwind_execute>:
 8001308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800130c:	4606      	mov	r6, r0
 800130e:	b085      	sub	sp, #20
 8001310:	460d      	mov	r5, r1
 8001312:	f04f 0800 	mov.w	r8, #0
 8001316:	4628      	mov	r0, r5
 8001318:	f7ff ffca 	bl	80012b0 <next_unwind_byte>
 800131c:	28b0      	cmp	r0, #176	; 0xb0
 800131e:	4604      	mov	r4, r0
 8001320:	f000 80b4 	beq.w	800148c <__gnu_unwind_execute+0x184>
 8001324:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 8001328:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800132c:	d020      	beq.n	8001370 <__gnu_unwind_execute+0x68>
 800132e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001332:	2b80      	cmp	r3, #128	; 0x80
 8001334:	d07a      	beq.n	800142c <__gnu_unwind_execute+0x124>
 8001336:	2b90      	cmp	r3, #144	; 0x90
 8001338:	d035      	beq.n	80013a6 <__gnu_unwind_execute+0x9e>
 800133a:	2ba0      	cmp	r3, #160	; 0xa0
 800133c:	d048      	beq.n	80013d0 <__gnu_unwind_execute+0xc8>
 800133e:	2bb0      	cmp	r3, #176	; 0xb0
 8001340:	d05c      	beq.n	80013fc <__gnu_unwind_execute+0xf4>
 8001342:	2bc0      	cmp	r3, #192	; 0xc0
 8001344:	f000 8089 	beq.w	800145a <__gnu_unwind_execute+0x152>
 8001348:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800134c:	2bd0      	cmp	r3, #208	; 0xd0
 800134e:	d10b      	bne.n	8001368 <__gnu_unwind_execute+0x60>
 8001350:	f000 0207 	and.w	r2, r0, #7
 8001354:	3201      	adds	r2, #1
 8001356:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800135a:	2305      	movs	r3, #5
 800135c:	2101      	movs	r1, #1
 800135e:	4630      	mov	r0, r6
 8001360:	f7ff fda8 	bl	8000eb4 <_Unwind_VRS_Pop>
 8001364:	2800      	cmp	r0, #0
 8001366:	d0d6      	beq.n	8001316 <__gnu_unwind_execute+0xe>
 8001368:	2009      	movs	r0, #9
 800136a:	b005      	add	sp, #20
 800136c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001370:	f10d 090c 	add.w	r9, sp, #12
 8001374:	4619      	mov	r1, r3
 8001376:	0087      	lsls	r7, r0, #2
 8001378:	f8cd 9000 	str.w	r9, [sp]
 800137c:	220d      	movs	r2, #13
 800137e:	4630      	mov	r0, r6
 8001380:	f7ff fb9e 	bl	8000ac0 <_Unwind_VRS_Get>
 8001384:	b2ff      	uxtb	r7, r7
 8001386:	9b03      	ldr	r3, [sp, #12]
 8001388:	f8cd 9000 	str.w	r9, [sp]
 800138c:	3704      	adds	r7, #4
 800138e:	0660      	lsls	r0, r4, #25
 8001390:	bf4c      	ite	mi
 8001392:	1bdf      	submi	r7, r3, r7
 8001394:	18ff      	addpl	r7, r7, r3
 8001396:	2300      	movs	r3, #0
 8001398:	4619      	mov	r1, r3
 800139a:	220d      	movs	r2, #13
 800139c:	4630      	mov	r0, r6
 800139e:	9703      	str	r7, [sp, #12]
 80013a0:	f7ff fbb4 	bl	8000b0c <_Unwind_VRS_Set>
 80013a4:	e7b7      	b.n	8001316 <__gnu_unwind_execute+0xe>
 80013a6:	f000 030d 	and.w	r3, r0, #13
 80013aa:	2b0d      	cmp	r3, #13
 80013ac:	d0dc      	beq.n	8001368 <__gnu_unwind_execute+0x60>
 80013ae:	af03      	add	r7, sp, #12
 80013b0:	2300      	movs	r3, #0
 80013b2:	f000 020f 	and.w	r2, r0, #15
 80013b6:	4619      	mov	r1, r3
 80013b8:	9700      	str	r7, [sp, #0]
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7ff fb80 	bl	8000ac0 <_Unwind_VRS_Get>
 80013c0:	2300      	movs	r3, #0
 80013c2:	9700      	str	r7, [sp, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	220d      	movs	r2, #13
 80013c8:	4630      	mov	r0, r6
 80013ca:	f7ff fb9f 	bl	8000b0c <_Unwind_VRS_Set>
 80013ce:	e7a2      	b.n	8001316 <__gnu_unwind_execute+0xe>
 80013d0:	43c2      	mvns	r2, r0
 80013d2:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 80013d6:	f002 0207 	and.w	r2, r2, #7
 80013da:	fa43 f202 	asr.w	r2, r3, r2
 80013de:	0701      	lsls	r1, r0, #28
 80013e0:	ea02 0203 	and.w	r2, r2, r3
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	bf48      	it	mi
 80013ea:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80013ee:	4619      	mov	r1, r3
 80013f0:	4630      	mov	r0, r6
 80013f2:	f7ff fd5f 	bl	8000eb4 <_Unwind_VRS_Pop>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d1b6      	bne.n	8001368 <__gnu_unwind_execute+0x60>
 80013fa:	e78c      	b.n	8001316 <__gnu_unwind_execute+0xe>
 80013fc:	28b1      	cmp	r0, #177	; 0xb1
 80013fe:	d04a      	beq.n	8001496 <__gnu_unwind_execute+0x18e>
 8001400:	28b2      	cmp	r0, #178	; 0xb2
 8001402:	d053      	beq.n	80014ac <__gnu_unwind_execute+0x1a4>
 8001404:	28b3      	cmp	r0, #179	; 0xb3
 8001406:	f000 8081 	beq.w	800150c <__gnu_unwind_execute+0x204>
 800140a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800140e:	2bb4      	cmp	r3, #180	; 0xb4
 8001410:	d0aa      	beq.n	8001368 <__gnu_unwind_execute+0x60>
 8001412:	f000 0207 	and.w	r2, r0, #7
 8001416:	3201      	adds	r2, #1
 8001418:	2301      	movs	r3, #1
 800141a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800141e:	4619      	mov	r1, r3
 8001420:	4630      	mov	r0, r6
 8001422:	f7ff fd47 	bl	8000eb4 <_Unwind_VRS_Pop>
 8001426:	2800      	cmp	r0, #0
 8001428:	d19e      	bne.n	8001368 <__gnu_unwind_execute+0x60>
 800142a:	e774      	b.n	8001316 <__gnu_unwind_execute+0xe>
 800142c:	4628      	mov	r0, r5
 800142e:	f7ff ff3f 	bl	80012b0 <next_unwind_byte>
 8001432:	0224      	lsls	r4, r4, #8
 8001434:	4320      	orrs	r0, r4
 8001436:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800143a:	d095      	beq.n	8001368 <__gnu_unwind_execute+0x60>
 800143c:	0104      	lsls	r4, r0, #4
 800143e:	2300      	movs	r3, #0
 8001440:	b2a2      	uxth	r2, r4
 8001442:	4619      	mov	r1, r3
 8001444:	4630      	mov	r0, r6
 8001446:	f7ff fd35 	bl	8000eb4 <_Unwind_VRS_Pop>
 800144a:	2800      	cmp	r0, #0
 800144c:	d18c      	bne.n	8001368 <__gnu_unwind_execute+0x60>
 800144e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001452:	bf18      	it	ne
 8001454:	f04f 0801 	movne.w	r8, #1
 8001458:	e75d      	b.n	8001316 <__gnu_unwind_execute+0xe>
 800145a:	28c6      	cmp	r0, #198	; 0xc6
 800145c:	d062      	beq.n	8001524 <__gnu_unwind_execute+0x21c>
 800145e:	28c7      	cmp	r0, #199	; 0xc7
 8001460:	d06c      	beq.n	800153c <__gnu_unwind_execute+0x234>
 8001462:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001466:	2bc0      	cmp	r3, #192	; 0xc0
 8001468:	d07b      	beq.n	8001562 <__gnu_unwind_execute+0x25a>
 800146a:	28c8      	cmp	r0, #200	; 0xc8
 800146c:	f000 8091 	beq.w	8001592 <__gnu_unwind_execute+0x28a>
 8001470:	28c9      	cmp	r0, #201	; 0xc9
 8001472:	f47f af79 	bne.w	8001368 <__gnu_unwind_execute+0x60>
 8001476:	4628      	mov	r0, r5
 8001478:	f7ff ff1a 	bl	80012b0 <next_unwind_byte>
 800147c:	0302      	lsls	r2, r0, #12
 800147e:	f000 000f 	and.w	r0, r0, #15
 8001482:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001486:	3001      	adds	r0, #1
 8001488:	4302      	orrs	r2, r0
 800148a:	e766      	b.n	800135a <__gnu_unwind_execute+0x52>
 800148c:	f1b8 0f00 	cmp.w	r8, #0
 8001490:	d06e      	beq.n	8001570 <__gnu_unwind_execute+0x268>
 8001492:	2000      	movs	r0, #0
 8001494:	e769      	b.n	800136a <__gnu_unwind_execute+0x62>
 8001496:	4628      	mov	r0, r5
 8001498:	f7ff ff0a 	bl	80012b0 <next_unwind_byte>
 800149c:	4602      	mov	r2, r0
 800149e:	2800      	cmp	r0, #0
 80014a0:	f43f af62 	beq.w	8001368 <__gnu_unwind_execute+0x60>
 80014a4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80014a8:	d0b9      	beq.n	800141e <__gnu_unwind_execute+0x116>
 80014aa:	e75d      	b.n	8001368 <__gnu_unwind_execute+0x60>
 80014ac:	2300      	movs	r3, #0
 80014ae:	f10d 090c 	add.w	r9, sp, #12
 80014b2:	220d      	movs	r2, #13
 80014b4:	4619      	mov	r1, r3
 80014b6:	f8cd 9000 	str.w	r9, [sp]
 80014ba:	4630      	mov	r0, r6
 80014bc:	f7ff fb00 	bl	8000ac0 <_Unwind_VRS_Get>
 80014c0:	4628      	mov	r0, r5
 80014c2:	f7ff fef5 	bl	80012b0 <next_unwind_byte>
 80014c6:	0602      	lsls	r2, r0, #24
 80014c8:	f04f 0402 	mov.w	r4, #2
 80014cc:	d50c      	bpl.n	80014e8 <__gnu_unwind_execute+0x1e0>
 80014ce:	9b03      	ldr	r3, [sp, #12]
 80014d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80014d4:	40a0      	lsls	r0, r4
 80014d6:	4403      	add	r3, r0
 80014d8:	4628      	mov	r0, r5
 80014da:	9303      	str	r3, [sp, #12]
 80014dc:	f7ff fee8 	bl	80012b0 <next_unwind_byte>
 80014e0:	0603      	lsls	r3, r0, #24
 80014e2:	f104 0407 	add.w	r4, r4, #7
 80014e6:	d4f2      	bmi.n	80014ce <__gnu_unwind_execute+0x1c6>
 80014e8:	9b03      	ldr	r3, [sp, #12]
 80014ea:	f8cd 9000 	str.w	r9, [sp]
 80014ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80014f2:	fa00 f204 	lsl.w	r2, r0, r4
 80014f6:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80014fa:	2300      	movs	r3, #0
 80014fc:	4414      	add	r4, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	220d      	movs	r2, #13
 8001502:	4630      	mov	r0, r6
 8001504:	9403      	str	r4, [sp, #12]
 8001506:	f7ff fb01 	bl	8000b0c <_Unwind_VRS_Set>
 800150a:	e704      	b.n	8001316 <__gnu_unwind_execute+0xe>
 800150c:	4628      	mov	r0, r5
 800150e:	f7ff fecf 	bl	80012b0 <next_unwind_byte>
 8001512:	0301      	lsls	r1, r0, #12
 8001514:	f000 000f 	and.w	r0, r0, #15
 8001518:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800151c:	1c42      	adds	r2, r0, #1
 800151e:	2301      	movs	r3, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	e77c      	b.n	800141e <__gnu_unwind_execute+0x116>
 8001524:	4628      	mov	r0, r5
 8001526:	f7ff fec3 	bl	80012b0 <next_unwind_byte>
 800152a:	0301      	lsls	r1, r0, #12
 800152c:	f000 000f 	and.w	r0, r0, #15
 8001530:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001534:	1c42      	adds	r2, r0, #1
 8001536:	2303      	movs	r3, #3
 8001538:	430a      	orrs	r2, r1
 800153a:	e770      	b.n	800141e <__gnu_unwind_execute+0x116>
 800153c:	4628      	mov	r0, r5
 800153e:	f7ff feb7 	bl	80012b0 <next_unwind_byte>
 8001542:	4602      	mov	r2, r0
 8001544:	2800      	cmp	r0, #0
 8001546:	f43f af0f 	beq.w	8001368 <__gnu_unwind_execute+0x60>
 800154a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800154e:	f47f af0b 	bne.w	8001368 <__gnu_unwind_execute+0x60>
 8001552:	2104      	movs	r1, #4
 8001554:	4630      	mov	r0, r6
 8001556:	f7ff fcad 	bl	8000eb4 <_Unwind_VRS_Pop>
 800155a:	2800      	cmp	r0, #0
 800155c:	f47f af04 	bne.w	8001368 <__gnu_unwind_execute+0x60>
 8001560:	e6d9      	b.n	8001316 <__gnu_unwind_execute+0xe>
 8001562:	f000 020f 	and.w	r2, r0, #15
 8001566:	3201      	adds	r2, #1
 8001568:	2303      	movs	r3, #3
 800156a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800156e:	e756      	b.n	800141e <__gnu_unwind_execute+0x116>
 8001570:	ac03      	add	r4, sp, #12
 8001572:	4643      	mov	r3, r8
 8001574:	220e      	movs	r2, #14
 8001576:	4641      	mov	r1, r8
 8001578:	9400      	str	r4, [sp, #0]
 800157a:	4630      	mov	r0, r6
 800157c:	f7ff faa0 	bl	8000ac0 <_Unwind_VRS_Get>
 8001580:	9400      	str	r4, [sp, #0]
 8001582:	4630      	mov	r0, r6
 8001584:	4643      	mov	r3, r8
 8001586:	220f      	movs	r2, #15
 8001588:	4641      	mov	r1, r8
 800158a:	f7ff fabf 	bl	8000b0c <_Unwind_VRS_Set>
 800158e:	4640      	mov	r0, r8
 8001590:	e6eb      	b.n	800136a <__gnu_unwind_execute+0x62>
 8001592:	4628      	mov	r0, r5
 8001594:	f7ff fe8c 	bl	80012b0 <next_unwind_byte>
 8001598:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800159c:	f000 030f 	and.w	r3, r0, #15
 80015a0:	3210      	adds	r2, #16
 80015a2:	3301      	adds	r3, #1
 80015a4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80015a8:	e6d7      	b.n	800135a <__gnu_unwind_execute+0x52>
 80015aa:	bf00      	nop

080015ac <__gnu_unwind_frame>:
 80015ac:	b510      	push	{r4, lr}
 80015ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80015b0:	b084      	sub	sp, #16
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	2003      	movs	r0, #3
 80015b6:	f88d 000c 	strb.w	r0, [sp, #12]
 80015ba:	79dc      	ldrb	r4, [r3, #7]
 80015bc:	f88d 400d 	strb.w	r4, [sp, #13]
 80015c0:	0212      	lsls	r2, r2, #8
 80015c2:	3308      	adds	r3, #8
 80015c4:	4608      	mov	r0, r1
 80015c6:	a901      	add	r1, sp, #4
 80015c8:	9201      	str	r2, [sp, #4]
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	f7ff fe9c 	bl	8001308 <__gnu_unwind_execute>
 80015d0:	b004      	add	sp, #16
 80015d2:	bd10      	pop	{r4, pc}

080015d4 <_Unwind_GetRegionStart>:
 80015d4:	b508      	push	{r3, lr}
 80015d6:	f7ff fe95 	bl	8001304 <unwind_UCB_from_context>
 80015da:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80015dc:	bd08      	pop	{r3, pc}
 80015de:	bf00      	nop

080015e0 <_Unwind_GetLanguageSpecificData>:
 80015e0:	b508      	push	{r3, lr}
 80015e2:	f7ff fe8f 	bl	8001304 <unwind_UCB_from_context>
 80015e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80015e8:	79d8      	ldrb	r0, [r3, #7]
 80015ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80015ee:	3008      	adds	r0, #8
 80015f0:	bd08      	pop	{r3, pc}
 80015f2:	bf00      	nop

080015f4 <_Unwind_GetTextRelBase>:
 80015f4:	b508      	push	{r3, lr}
 80015f6:	f003 f86b 	bl	80046d0 <abort>
 80015fa:	bf00      	nop

080015fc <_Unwind_GetDataRelBase>:
 80015fc:	b508      	push	{r3, lr}
 80015fe:	f7ff fff9 	bl	80015f4 <_Unwind_GetTextRelBase>
 8001602:	bf00      	nop
	...

08001610 <memchr>:
 8001610:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001614:	2a10      	cmp	r2, #16
 8001616:	db2b      	blt.n	8001670 <memchr+0x60>
 8001618:	f010 0f07 	tst.w	r0, #7
 800161c:	d008      	beq.n	8001630 <memchr+0x20>
 800161e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001622:	3a01      	subs	r2, #1
 8001624:	428b      	cmp	r3, r1
 8001626:	d02d      	beq.n	8001684 <memchr+0x74>
 8001628:	f010 0f07 	tst.w	r0, #7
 800162c:	b342      	cbz	r2, 8001680 <memchr+0x70>
 800162e:	d1f6      	bne.n	800161e <memchr+0xe>
 8001630:	b4f0      	push	{r4, r5, r6, r7}
 8001632:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001636:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800163a:	f022 0407 	bic.w	r4, r2, #7
 800163e:	f07f 0700 	mvns.w	r7, #0
 8001642:	2300      	movs	r3, #0
 8001644:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001648:	3c08      	subs	r4, #8
 800164a:	ea85 0501 	eor.w	r5, r5, r1
 800164e:	ea86 0601 	eor.w	r6, r6, r1
 8001652:	fa85 f547 	uadd8	r5, r5, r7
 8001656:	faa3 f587 	sel	r5, r3, r7
 800165a:	fa86 f647 	uadd8	r6, r6, r7
 800165e:	faa5 f687 	sel	r6, r5, r7
 8001662:	b98e      	cbnz	r6, 8001688 <memchr+0x78>
 8001664:	d1ee      	bne.n	8001644 <memchr+0x34>
 8001666:	bcf0      	pop	{r4, r5, r6, r7}
 8001668:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800166c:	f002 0207 	and.w	r2, r2, #7
 8001670:	b132      	cbz	r2, 8001680 <memchr+0x70>
 8001672:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001676:	3a01      	subs	r2, #1
 8001678:	ea83 0301 	eor.w	r3, r3, r1
 800167c:	b113      	cbz	r3, 8001684 <memchr+0x74>
 800167e:	d1f8      	bne.n	8001672 <memchr+0x62>
 8001680:	2000      	movs	r0, #0
 8001682:	4770      	bx	lr
 8001684:	3801      	subs	r0, #1
 8001686:	4770      	bx	lr
 8001688:	2d00      	cmp	r5, #0
 800168a:	bf06      	itte	eq
 800168c:	4635      	moveq	r5, r6
 800168e:	3803      	subeq	r0, #3
 8001690:	3807      	subne	r0, #7
 8001692:	f015 0f01 	tst.w	r5, #1
 8001696:	d107      	bne.n	80016a8 <memchr+0x98>
 8001698:	3001      	adds	r0, #1
 800169a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800169e:	bf02      	ittt	eq
 80016a0:	3001      	addeq	r0, #1
 80016a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80016a6:	3001      	addeq	r0, #1
 80016a8:	bcf0      	pop	{r4, r5, r6, r7}
 80016aa:	3801      	subs	r0, #1
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop

080016b0 <rt_init_stack>:
 *---------------------------------------------------------------------------*/


/*--------------------------- rt_init_stack ---------------------------------*/

void rt_init_stack (P_TCB p_TCB, FUNCP task_body) {
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  /* Prepare TCB and saved context for a first time start of a task. */
  U32 *stk,i,size;

  /* Prepare a complete interrupt frame for first task start */
  size = p_TCB->priv_stack >> 2;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	60fb      	str	r3, [r7, #12]
  if (size == 0U) {
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <rt_init_stack+0x26>
    size = (U16)os_stackinfo >> 2;
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <rt_init_stack+0xfc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	109b      	asrs	r3, r3, #2
 80016d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to the top of stack. */
  stk = &p_TCB->stack[size];
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]

  /* Auto correct to 8-byte ARM stack alignment. */
  if ((U32)stk & 0x04U) {
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <rt_init_stack+0x42>
    stk--;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3b04      	subs	r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
  }

  stk -= 16;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3b40      	subs	r3, #64	; 0x40
 80016f6:	617b      	str	r3, [r7, #20]

  /* Default xPSR and initial PC */
  stk[15] = INITIAL_xPSR;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	333c      	adds	r3, #60	; 0x3c
 80016fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001700:	601a      	str	r2, [r3, #0]
  stk[14] = (U32)task_body;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3338      	adds	r3, #56	; 0x38
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	601a      	str	r2, [r3, #0]

  /* Clear R4-R11,R0-R3,R12,LR registers. */
  for (i = 0U; i < 14U; i++) {
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	e008      	b.n	8001722 <rt_init_stack+0x72>
    stk[i] = 0U;
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4413      	add	r3, r2
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
  /* Default xPSR and initial PC */
  stk[15] = INITIAL_xPSR;
  stk[14] = (U32)task_body;

  /* Clear R4-R11,R0-R3,R12,LR registers. */
  for (i = 0U; i < 14U; i++) {
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3301      	adds	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b0d      	cmp	r3, #13
 8001726:	d9f3      	bls.n	8001710 <rt_init_stack+0x60>
    stk[i] = 0U;
  }

  /* Assign a void pointer to R0. */
  stk[8] = (U32)p_TCB->msg;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3320      	adds	r3, #32
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	69d2      	ldr	r2, [r2, #28]
 8001730:	601a      	str	r2, [r3, #0]

  /* Initial Task stack pointer. */
  p_TCB->tsk_stack = (U32)stk;
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28

  /* Task entry point. */
  p_TCB->ptask = task_body;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize stack with magic pattern. */
  if (os_stackinfo & 0x10000000U) {
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <rt_init_stack+0xfc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d026      	beq.n	8001798 <rt_init_stack+0xe8>
    if (size > (16U+1U)) {
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b11      	cmp	r3, #17
 800174e:	d923      	bls.n	8001798 <rt_init_stack+0xe8>
      for (i = ((size - 16U)/2U) - 1U; i; i--) {
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3b10      	subs	r3, #16
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e00e      	b.n	800177a <rt_init_stack+0xca>
        stk -= 2U;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3b08      	subs	r3, #8
 8001760:	617b      	str	r3, [r7, #20]
        stk[1] = MAGIC_PATTERN;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3304      	adds	r3, #4
 8001766:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 800176a:	601a      	str	r2, [r3, #0]
        stk[0] = MAGIC_PATTERN;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 8001772:	601a      	str	r2, [r3, #0]
  p_TCB->ptask = task_body;

  /* Initialize stack with magic pattern. */
  if (os_stackinfo & 0x10000000U) {
    if (size > (16U+1U)) {
      for (i = ((size - 16U)/2U) - 1U; i; i--) {
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	3b01      	subs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ed      	bne.n	800175c <rt_init_stack+0xac>
        stk -= 2U;
        stk[1] = MAGIC_PATTERN;
        stk[0] = MAGIC_PATTERN;
      }
      if (--stk > p_TCB->stack) {
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3b04      	subs	r3, #4
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	d903      	bls.n	8001798 <rt_init_stack+0xe8>
        *stk = MAGIC_PATTERN;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 8001796:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* Set a magic word for checking of stack overflow. */
  p_TCB->stack[0] = MAGIC_WORD;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <rt_init_stack+0x100>)
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	08005fa8 	.word	0x08005fa8
 80017b0:	e25a2ea5 	.word	0xe25a2ea5

080017b4 <rt_ret_regs>:


/*--------------------------- rt_ret_val ----------------------------------*/

static __inline U32 *rt_ret_regs (P_TCB p_TCB) {
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Get pointer to task return value registers (R0..R3) in Stack */
#if defined(__TARGET_FPU_VFP)
  if (p_TCB->stack_frame) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <rt_ret_regs+0x1a>
    /* Extended Stack Frame: R4-R11,S16-S31,R0-R3,R12,LR,PC,xPSR,S0-S15,FPSCR */
    return (U32 *)(p_TCB->tsk_stack + (8U*4U) + (16U*4U));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	3360      	adds	r3, #96	; 0x60
 80017cc:	e002      	b.n	80017d4 <rt_ret_regs+0x20>
  } else {
    /* Basic Stack Frame: R4-R11,R0-R3,R12,LR,PC,xPSR */
    return (U32 *)(p_TCB->tsk_stack + (8U*4U));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	3320      	adds	r3, #32
  }
#else
  /* Stack Frame: R4-R11,R0-R3,R12,LR,PC,xPSR */
  return (U32 *)(p_TCB->tsk_stack + (8U*4U));
#endif
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <rt_ret_val>:

void rt_ret_val (P_TCB p_TCB, U32 v0) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  U32 *ret;

  ret = rt_ret_regs(p_TCB);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffe2 	bl	80017b4 <rt_ret_regs>
 80017f0:	60f8      	str	r0, [r7, #12]
  ret[0] = v0;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <rt_ret_val2>:

void rt_ret_val2(P_TCB p_TCB, U32 v0, U32 v1) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  U32 *ret;

  ret = rt_ret_regs(p_TCB);
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff ffd1 	bl	80017b4 <rt_ret_regs>
 8001812:	6178      	str	r0, [r7, #20]
  ret[0] = v0;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	601a      	str	r2, [r3, #0]
  ret[1] = v1;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3304      	adds	r3, #4
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	601a      	str	r2, [r3, #0]
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop

0800182c <rt_ms2tick>:


// ==== Helper Functions ====

/// Convert timeout in millisec to system ticks
static uint16_t rt_ms2tick (uint32_t millisec) {
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tick;

  if (millisec == 0U) { return 0x0U; }                  // No timeout
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <rt_ms2tick+0x12>
 800183a:	2300      	movs	r3, #0
 800183c:	e025      	b.n	800188a <rt_ms2tick+0x5e>
  if (millisec == osWaitForever) { return 0xFFFFU; }    // Indefinite timeout
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001844:	d102      	bne.n	800184c <rt_ms2tick+0x20>
 8001846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184a:	e01e      	b.n	800188a <rt_ms2tick+0x5e>
  if (millisec > 4000000U) { return 0xFFFEU; }          // Max ticks supported
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <rt_ms2tick+0x6c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d902      	bls.n	800185a <rt_ms2tick+0x2e>
 8001854:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001858:	e017      	b.n	800188a <rt_ms2tick+0x5e>

  tick = ((1000U * millisec) + os_clockrate - 1U)  / os_clockrate;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001860:	fb02 f203 	mul.w	r2, r2, r3
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <rt_ms2tick+0x70>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4413      	add	r3, r2
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <rt_ms2tick+0x70>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	60fb      	str	r3, [r7, #12]
  if (tick > 0xFFFEU) { return 0xFFFEU; }
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800187c:	4293      	cmp	r3, r2
 800187e:	d902      	bls.n	8001886 <rt_ms2tick+0x5a>
 8001880:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001884:	e001      	b.n	800188a <rt_ms2tick+0x5e>
  
  return (uint16_t)tick;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	b29b      	uxth	r3, r3
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	003d0900 	.word	0x003d0900
 800189c:	08005fb8 	.word	0x08005fb8

080018a0 <rt_tid2ptcb>:

/// Convert Thread ID to TCB pointer
static P_TCB rt_tid2ptcb (osThreadId thread_id) {
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  P_TCB ptcb;

  if (thread_id == NULL) { return NULL; }
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <rt_tid2ptcb+0x12>
 80018ae:	2300      	movs	r3, #0
 80018b0:	e00f      	b.n	80018d2 <rt_tid2ptcb+0x32>

  if ((uint32_t)thread_id & 3U) { return NULL; }
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <rt_tid2ptcb+0x20>
 80018bc:	2300      	movs	r3, #0
 80018be:	e008      	b.n	80018d2 <rt_tid2ptcb+0x32>
    if (thread_id  < (osThreadId)os_section_id$$Base)  { return NULL; }
    if (thread_id >= (osThreadId)os_section_id$$Limit) { return NULL; }
  }
#endif

  ptcb = thread_id;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60fb      	str	r3, [r7, #12]

  if (ptcb->cb_type != TCB) { return NULL; }
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <rt_tid2ptcb+0x30>
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <rt_tid2ptcb+0x32>

  return ptcb;
 80018d0:	68fb      	ldr	r3, [r7, #12]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <rt_id2obj>:

/// Convert ID pointer to Object pointer
static void *rt_id2obj (void *id) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  if ((uint32_t)id & 3U) { return NULL; }
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <rt_id2obj+0x16>
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <rt_id2obj+0x18>
    if (id  < (void *)os_section_id$$Base)  { return NULL; }
    if (id >= (void *)os_section_id$$Limit) { return NULL; }
  }
#endif

  return id;
 80018f6:	687b      	ldr	r3, [r7, #4]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <svcKernelInitialize>:
osMessageQId svcMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id);

// Kernel Control Service Calls

/// Initialize the RTOS Kernel for creating objects
osStatus svcKernelInitialize (void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
  uint32_t ret;

  if (os_initialized == 0U) {
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <svcKernelInitialize+0x74>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10d      	bne.n	800192e <svcKernelInitialize+0x2a>

    // Init Thread Stack Memory (must be 8-byte aligned)
    if (((uint32_t)os_stack_mem & 7U) != 0U) { return osErrorNoMemory; }
    ret = rt_init_mem(os_stack_mem, os_stack_sz);
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <svcKernelInitialize+0x78>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	4819      	ldr	r0, [pc, #100]	; (8001980 <svcKernelInitialize+0x7c>)
 800191a:	f001 f987 	bl	8002c2c <rt_init_mem>
 800191e:	6078      	str	r0, [r7, #4]
    if (ret != 0U) { return osErrorNoMemory; }
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <svcKernelInitialize+0x26>
 8001926:	2385      	movs	r3, #133	; 0x85
 8001928:	e021      	b.n	800196e <svcKernelInitialize+0x6a>

    rt_sys_init();                              // RTX System Initialization
 800192a:	f001 fe97 	bl	800365c <rt_sys_init>
  }

  os_tsk.run->prio = 255U;                      // Highest priority
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <svcKernelInitialize+0x80>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	22ff      	movs	r2, #255	; 0xff
 8001934:	709a      	strb	r2, [r3, #2]

  if (os_initialized == 0U) {
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <svcKernelInitialize+0x74>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10d      	bne.n	800195a <svcKernelInitialize+0x56>
    // Create OS Timers resources (Message Queue & Thread)
    osMessageQId_osTimerMessageQ = svcMessageCreate (&os_messageQ_def_osTimerMessageQ, NULL);
 800193e:	2100      	movs	r1, #0
 8001940:	4811      	ldr	r0, [pc, #68]	; (8001988 <svcKernelInitialize+0x84>)
 8001942:	f000 fb23 	bl	8001f8c <svcMessageCreate>
 8001946:	4602      	mov	r2, r0
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <svcKernelInitialize+0x88>)
 800194a:	601a      	str	r2, [r3, #0]
    osThreadId_osTimerThread = svcThreadCreate(&os_thread_def_osTimerThread, NULL);
 800194c:	2100      	movs	r1, #0
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <svcKernelInitialize+0x8c>)
 8001950:	f000 f8ee 	bl	8001b30 <svcThreadCreate>
 8001954:	4602      	mov	r2, r0
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <svcKernelInitialize+0x90>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  sysThreadError(osOK);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f8de 	bl	8001b1c <sysThreadError>

  os_initialized = 1U;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <svcKernelInitialize+0x74>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
  os_running = 0U;
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <svcKernelInitialize+0x94>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]

  return osOK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000170 	.word	0x20000170
 800197c:	08005fc4 	.word	0x08005fc4
 8001980:	20003110 	.word	0x20003110
 8001984:	200001b4 	.word	0x200001b4
 8001988:	08005fdc 	.word	0x08005fdc
 800198c:	20003a54 	.word	0x20003a54
 8001990:	08005fcc 	.word	0x08005fcc
 8001994:	20003be4 	.word	0x20003be4
 8001998:	20000171 	.word	0x20000171

0800199c <svcKernelStart>:

/// Start the RTOS Kernel
osStatus svcKernelStart (void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

  if (os_running) { return osOK; }
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <svcKernelStart+0x68>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <svcKernelStart+0x12>
 80019aa:	2300      	movs	r3, #0
 80019ac:	e025      	b.n	80019fa <svcKernelStart+0x5e>

  rt_tsk_prio(0U, os_tsk.run->prio_base);       // Restore priority
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <svcKernelStart+0x6c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	2000      	movs	r0, #0
 80019ba:	f001 fc95 	bl	80032e8 <rt_tsk_prio>
  if (os_tsk.run->task_id == 0xFFU) {           // Idle Thread
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <svcKernelStart+0x6c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	78db      	ldrb	r3, [r3, #3]
 80019c4:	2bff      	cmp	r3, #255	; 0xff
 80019c6:	d107      	bne.n	80019d8 <svcKernelStart+0x3c>
    __set_PSP(os_tsk.run->tsk_stack + (8U*4U)); // Setup PSP
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <svcKernelStart+0x6c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	3320      	adds	r3, #32
 80019d0:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f383 8809 	msr	PSP, r3
  }
  if (os_tsk.new == NULL) {                     // Force context switch
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <svcKernelStart+0x6c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d106      	bne.n	80019ee <svcKernelStart+0x52>
    os_tsk.new = os_tsk.run;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <svcKernelStart+0x6c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <svcKernelStart+0x6c>)
 80019e6:	6053      	str	r3, [r2, #4]
    os_tsk.run = NULL;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <svcKernelStart+0x6c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
  }

  rt_sys_start();
 80019ee:	f001 feb7 	bl	8003760 <rt_sys_start>

  os_running = 1U;
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <svcKernelStart+0x68>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]

  return osOK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000171 	.word	0x20000171
 8001a08:	200001b4 	.word	0x200001b4

08001a0c <osKernelInitialize>:
}

// Kernel Control Public API

/// Initialize the RTOS Kernel for creating objects
osStatus osKernelInitialize (void) {
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a12:	f3ef 8405 	mrs	r4, IPSR
 8001a16:	603c      	str	r4, [r7, #0]
  return(result);
 8001a18:	683c      	ldr	r4, [r7, #0]
  if (__get_IPSR() != 0U) {
 8001a1a:	2c00      	cmp	r4, #0
 8001a1c:	d001      	beq.n	8001a22 <osKernelInitialize+0x16>
    return osErrorISR;                          // Not allowed in ISR
 8001a1e:	2382      	movs	r3, #130	; 0x82
 8001a20:	e010      	b.n	8001a44 <osKernelInitialize+0x38>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001a22:	f3ef 8414 	mrs	r4, CONTROL
 8001a26:	607c      	str	r4, [r7, #4]
  return(result);
 8001a28:	687c      	ldr	r4, [r7, #4]
  }
  if ((__get_CONTROL() & 1U) == 0U) {           // Privileged mode
 8001a2a:	f004 0401 	and.w	r4, r4, #1
 8001a2e:	2c00      	cmp	r4, #0
 8001a30:	d103      	bne.n	8001a3a <osKernelInitialize+0x2e>
    return   svcKernelInitialize();
 8001a32:	f7ff ff67 	bl	8001904 <svcKernelInitialize>
 8001a36:	4603      	mov	r3, r0
 8001a38:	e004      	b.n	8001a44 <osKernelInitialize+0x38>

uint8_t os_initialized;                         // Kernel Initialized flag
uint8_t os_running;                             // Kernel Running flag

// Kernel Control Service Calls declarations
SVC_0_1(svcKernelInitialize, osStatus, RET_osStatus)
 8001a3a:	f8df c010 	ldr.w	ip, [pc, #16]	; 8001a4c <osKernelInitialize+0x40>
 8001a3e:	df00      	svc	0
 8001a40:	4603      	mov	r3, r0
    return osErrorISR;                          // Not allowed in ISR
  }
  if ((__get_CONTROL() & 1U) == 0U) {           // Privileged mode
    return   svcKernelInitialize();
  } else {
    return __svcKernelInitialize();
 8001a42:	bf00      	nop
  }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	08001905 	.word	0x08001905

08001a50 <osKernelStart>:

/// Start the RTOS Kernel
osStatus osKernelStart (void) {
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b08f      	sub	sp, #60	; 0x3c
 8001a54:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a56:	f3ef 8405 	mrs	r4, IPSR
 8001a5a:	623c      	str	r4, [r7, #32]
  return(result);
 8001a5c:	6a3c      	ldr	r4, [r7, #32]
  uint32_t stack[8];

  if (__get_IPSR() != 0U) {
 8001a5e:	2c00      	cmp	r4, #0
 8001a60:	d001      	beq.n	8001a66 <osKernelStart+0x16>
    return osErrorISR;                          // Not allowed in ISR
 8001a62:	2382      	movs	r3, #130	; 0x82
 8001a64:	e052      	b.n	8001b0c <osKernelStart+0xbc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001a66:	f3ef 8414 	mrs	r4, CONTROL
 8001a6a:	637c      	str	r4, [r7, #52]	; 0x34
  return(result);
 8001a6c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
  }
  switch (__get_CONTROL() & 0x03U) {
 8001a6e:	f004 0403 	and.w	r4, r4, #3
 8001a72:	2c03      	cmp	r4, #3
 8001a74:	d845      	bhi.n	8001b02 <osKernelStart+0xb2>
 8001a76:	f20f 0e08 	addw	lr, pc, #8
 8001a7a:	f85e f024 	ldr.w	pc, [lr, r4, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001ac9 	.word	0x08001ac9
 8001a88:	08001acd 	.word	0x08001acd
 8001a8c:	08001aed 	.word	0x08001aed
    case 0x00U:                                 // Privileged Thread mode & MSP
      __set_PSP((uint32_t)(stack + 8));         // Initial PSP
 8001a90:	463c      	mov	r4, r7
 8001a92:	3420      	adds	r4, #32
 8001a94:	633c      	str	r4, [r7, #48]	; 0x30
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001a96:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001a98:	f384 8809 	msr	PSP, r4
      if (os_flags & 1U) {                       
 8001a9c:	4c1d      	ldr	r4, [pc, #116]	; (8001b14 <osKernelStart+0xc4>)
 8001a9e:	7824      	ldrb	r4, [r4, #0]
 8001aa0:	f004 0401 	and.w	r4, r4, #1
 8001aa4:	2c00      	cmp	r4, #0
 8001aa6:	d005      	beq.n	8001ab4 <osKernelStart+0x64>
 8001aa8:	2402      	movs	r4, #2
 8001aaa:	62fc      	str	r4, [r7, #44]	; 0x2c
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001aac:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001aae:	f384 8814 	msr	CONTROL, r4
 8001ab2:	e004      	b.n	8001abe <osKernelStart+0x6e>
 8001ab4:	2403      	movs	r4, #3
 8001ab6:	62bc      	str	r4, [r7, #40]	; 0x28
 8001ab8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001aba:	f384 8814 	msr	CONTROL, r4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001abe:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001ac2:	f3bf 8f6f 	isb	sy
      } else {
        __set_CONTROL(0x03U);                   // Set Unprivileged Thread mode & PSP
      }
      __DSB();
      __ISB();
      break;
 8001ac6:	e01c      	b.n	8001b02 <osKernelStart+0xb2>
    case 0x01U:                                 // Unprivileged Thread mode & MSP
      return osErrorOS;
 8001ac8:	23ff      	movs	r3, #255	; 0xff
 8001aca:	e01f      	b.n	8001b0c <osKernelStart+0xbc>
    case 0x02U:                                 // Privileged Thread mode & PSP
      if ((os_flags & 1U) == 0U) {              // Unprivileged Thread mode requested
 8001acc:	4c11      	ldr	r4, [pc, #68]	; (8001b14 <osKernelStart+0xc4>)
 8001ace:	7824      	ldrb	r4, [r4, #0]
 8001ad0:	f004 0401 	and.w	r4, r4, #1
 8001ad4:	2c00      	cmp	r4, #0
 8001ad6:	d111      	bne.n	8001afc <osKernelStart+0xac>
 8001ad8:	2403      	movs	r4, #3
 8001ada:	627c      	str	r4, [r7, #36]	; 0x24
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001adc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001ade:	f384 8814 	msr	CONTROL, r4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae2:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001ae6:	f3bf 8f6f 	isb	sy
        __set_CONTROL(0x03U);                   // Set Unprivileged Thread mode & PSP
        __DSB();
        __ISB();
      }
      break;
 8001aea:	e007      	b.n	8001afc <osKernelStart+0xac>
    case 0x03U:                                 // Unprivileged Thread mode & PSP
      if  (os_flags & 1U) { return osErrorOS; } // Privileged Thread mode requested
 8001aec:	4c09      	ldr	r4, [pc, #36]	; (8001b14 <osKernelStart+0xc4>)
 8001aee:	7824      	ldrb	r4, [r4, #0]
 8001af0:	f004 0401 	and.w	r4, r4, #1
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d003      	beq.n	8001b00 <osKernelStart+0xb0>
 8001af8:	23ff      	movs	r3, #255	; 0xff
 8001afa:	e007      	b.n	8001b0c <osKernelStart+0xbc>
      if ((os_flags & 1U) == 0U) {              // Unprivileged Thread mode requested
        __set_CONTROL(0x03U);                   // Set Unprivileged Thread mode & PSP
        __DSB();
        __ISB();
      }
      break;
 8001afc:	bf00      	nop
 8001afe:	e000      	b.n	8001b02 <osKernelStart+0xb2>
    case 0x03U:                                 // Unprivileged Thread mode & PSP
      if  (os_flags & 1U) { return osErrorOS; } // Privileged Thread mode requested
      break;
 8001b00:	bf00      	nop
uint8_t os_initialized;                         // Kernel Initialized flag
uint8_t os_running;                             // Kernel Running flag

// Kernel Control Service Calls declarations
SVC_0_1(svcKernelInitialize, osStatus, RET_osStatus)
SVC_0_1(svcKernelStart,      osStatus, RET_osStatus)
 8001b02:	f8df c014 	ldr.w	ip, [pc, #20]	; 8001b18 <osKernelStart+0xc8>
 8001b06:	df00      	svc	0
 8001b08:	4603      	mov	r3, r0
      break;
    case 0x03U:                                 // Unprivileged Thread mode & PSP
      if  (os_flags & 1U) { return osErrorOS; } // Privileged Thread mode requested
      break;
  }
  return __svcKernelStart();
 8001b0a:	bf00      	nop
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	373c      	adds	r7, #60	; 0x3c
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}
 8001b14:	08005fb4 	.word	0x08005fb4
 8001b18:	0800199d 	.word	0x0800199d

08001b1c <sysThreadError>:


// ==== Thread Management ====

/// Set Thread Error (for Create functions which return IDs)
static void sysThreadError (osStatus status) {
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  // To Do
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <svcThreadCreate>:
SVC_1_1(svcThreadGetPriority, osPriority,       osThreadId,                  RET_osPriority)

// Thread Service Calls

/// Create a thread and add it to Active Threads and set it to state READY
osThreadId svcThreadCreate (const osThreadDef_t *thread_def, void *argument) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  P_TCB  ptcb;
  OS_TID tsk;
  void  *stk;

  if ((thread_def == NULL) ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <svcThreadCreate+0x2e>
      (thread_def->pthread == NULL) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
osThreadId svcThreadCreate (const osThreadDef_t *thread_def, void *argument) {
  P_TCB  ptcb;
  OS_TID tsk;
  void  *stk;

  if ((thread_def == NULL) ||
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <svcThreadCreate+0x2e>
      (thread_def->pthread == NULL) ||
      (thread_def->tpriority < osPriorityIdle) ||
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	889b      	ldrh	r3, [r3, #4]
  P_TCB  ptcb;
  OS_TID tsk;
  void  *stk;

  if ((thread_def == NULL) ||
      (thread_def->pthread == NULL) ||
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	f113 0f03 	cmn.w	r3, #3
 8001b52:	db04      	blt.n	8001b5e <svcThreadCreate+0x2e>
      (thread_def->tpriority < osPriorityIdle) ||
      (thread_def->tpriority > osPriorityRealtime)) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	889b      	ldrh	r3, [r3, #4]
  OS_TID tsk;
  void  *stk;

  if ((thread_def == NULL) ||
      (thread_def->pthread == NULL) ||
      (thread_def->tpriority < osPriorityIdle) ||
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	dd04      	ble.n	8001b68 <svcThreadCreate+0x38>
      (thread_def->tpriority > osPriorityRealtime)) {
    sysThreadError(osErrorParameter); 
 8001b5e:	2080      	movs	r0, #128	; 0x80
 8001b60:	f7ff ffdc 	bl	8001b1c <sysThreadError>
    return NULL; 
 8001b64:	2300      	movs	r3, #0
 8001b66:	e041      	b.n	8001bec <svcThreadCreate+0xbc>
  }

  if (thread_def->stacksize != 0U) {            // Custom stack size
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00e      	beq.n	8001b8e <svcThreadCreate+0x5e>
    stk = rt_alloc_mem(                         // Allocate stack
      os_stack_mem,
      thread_def->stacksize
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
    sysThreadError(osErrorParameter); 
    return NULL; 
  }

  if (thread_def->stacksize != 0U) {            // Custom stack size
    stk = rt_alloc_mem(                         // Allocate stack
 8001b74:	4619      	mov	r1, r3
 8001b76:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <svcThreadCreate+0xc4>)
 8001b78:	f001 f87c 	bl	8002c74 <rt_alloc_mem>
 8001b7c:	6178      	str	r0, [r7, #20]
      os_stack_mem,
      thread_def->stacksize
    );
    if (stk == NULL) { 
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <svcThreadCreate+0x62>
      sysThreadError(osErrorNoMemory);          // Out of memory
 8001b84:	2085      	movs	r0, #133	; 0x85
 8001b86:	f7ff ffc9 	bl	8001b1c <sysThreadError>
      return NULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e02e      	b.n	8001bec <svcThreadCreate+0xbc>
    }
  } else {                                      // Default stack size
    stk = NULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  }

  tsk = rt_tsk_create(                          // Create task
    (FUNCP)thread_def->pthread,                 // Task function pointer
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
    (uint32_t)
    (thread_def->tpriority-osPriorityIdle+1) |  // Task priority
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	889b      	ldrh	r3, [r3, #4]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	3304      	adds	r3, #4
    stk = NULL;
  }

  tsk = rt_tsk_create(                          // Create task
    (FUNCP)thread_def->pthread,                 // Task function pointer
    (uint32_t)
 8001b9e:	461a      	mov	r2, r3
    (thread_def->tpriority-osPriorityIdle+1) |  // Task priority
    (thread_def->stacksize << 8),               // Task stack size in bytes
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	021b      	lsls	r3, r3, #8
  }

  tsk = rt_tsk_create(                          // Create task
    (FUNCP)thread_def->pthread,                 // Task function pointer
    (uint32_t)
    (thread_def->tpriority-osPriorityIdle+1) |  // Task priority
 8001ba6:	ea42 0103 	orr.w	r1, r2, r3
    }
  } else {                                      // Default stack size
    stk = NULL;
  }

  tsk = rt_tsk_create(                          // Create task
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	f001 fc01 	bl	80033b4 <rt_tsk_create>
 8001bb2:	6138      	str	r0, [r7, #16]
    (thread_def->stacksize << 8),               // Task stack size in bytes
    stk,                                        // Pointer to task's stack
    argument                                    // Argument to the task
  );

  if (tsk == 0U) {                              // Invalid task ID
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10b      	bne.n	8001bd2 <svcThreadCreate+0xa2>
    if (stk != NULL) {
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <svcThreadCreate+0x98>
      rt_free_mem(os_stack_mem, stk);           // Free allocated stack
 8001bc0:	6979      	ldr	r1, [r7, #20]
 8001bc2:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <svcThreadCreate+0xc4>)
 8001bc4:	f001 f8aa 	bl	8002d1c <rt_free_mem>
    }
    sysThreadError(osErrorNoMemory);            // Create task failed (Out of memory)
 8001bc8:	2085      	movs	r0, #133	; 0x85
 8001bca:	f7ff ffa7 	bl	8001b1c <sysThreadError>
    return NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e00c      	b.n	8001bec <svcThreadCreate+0xbc>
  }

  ptcb = (P_TCB)os_active_TCB[tsk - 1U];        // TCB pointer
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <svcThreadCreate+0xc8>)
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	60fb      	str	r3, [r7, #12]

  *((uint32_t *)ptcb->tsk_stack + 13) = (uint32_t)osThreadExit;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	3334      	adds	r3, #52	; 0x34
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <svcThreadCreate+0xcc>)
 8001be8:	6013      	str	r3, [r2, #0]

  return ptcb;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20003110 	.word	0x20003110
 8001bf8:	200030f0 	.word	0x200030f0
 8001bfc:	08001d2d 	.word	0x08001d2d

08001c00 <svcThreadGetId>:

/// Return the thread ID of the current running thread
osThreadId svcThreadGetId (void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  OS_TID tsk;

  tsk = rt_tsk_self();
 8001c06:	f001 fb5d 	bl	80032c4 <rt_tsk_self>
 8001c0a:	6078      	str	r0, [r7, #4]
  if (tsk == 0U) { return NULL; }
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <svcThreadGetId+0x16>
 8001c12:	2300      	movs	r3, #0
 8001c14:	e004      	b.n	8001c20 <svcThreadGetId+0x20>
  return (P_TCB)os_active_TCB[tsk - 1U];
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <svcThreadGetId+0x28>)
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200030f0 	.word	0x200030f0

08001c2c <svcThreadTerminate>:

/// Terminate execution of a thread and remove it from ActiveThreads
osStatus svcThreadTerminate (osThreadId thread_id) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  OS_RESULT res;
  P_TCB     ptcb;
  void     *stk;

  ptcb = rt_tid2ptcb(thread_id);                // Get TCB pointer
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fe33 	bl	80018a0 <rt_tid2ptcb>
 8001c3a:	6178      	str	r0, [r7, #20]
  if (ptcb == NULL) { 
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <svcThreadTerminate+0x1a>
    return osErrorParameter;
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	e01b      	b.n	8001c7e <svcThreadTerminate+0x52>
  }

  stk = ptcb->priv_stack ? ptcb->stack : NULL;  // Private stack
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <svcThreadTerminate+0x28>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	e000      	b.n	8001c56 <svcThreadTerminate+0x2a>
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]

  res = rt_tsk_delete(ptcb->task_id);           // Delete task
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	78db      	ldrb	r3, [r3, #3]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fbf1 	bl	8003444 <rt_tsk_delete>
 8001c62:	60f8      	str	r0, [r7, #12]

  if (res == OS_R_NOK) {
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d101      	bne.n	8001c6e <svcThreadTerminate+0x42>
    return osErrorResource;                     // Delete task failed
 8001c6a:	2381      	movs	r3, #129	; 0x81
 8001c6c:	e007      	b.n	8001c7e <svcThreadTerminate+0x52>
  }

  if (stk != NULL) {                            
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <svcThreadTerminate+0x50>
    rt_free_mem(os_stack_mem, stk);             // Free private stack
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <svcThreadTerminate+0x5c>)
 8001c78:	f001 f850 	bl	8002d1c <rt_free_mem>
  }

  return osOK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20003110 	.word	0x20003110

08001c8c <svcThreadYield>:

/// Pass control to next thread that is in state READY
osStatus svcThreadYield (void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  rt_tsk_pass();                                // Pass control to next task
 8001c90:	f001 fafa 	bl	8003288 <rt_tsk_pass>
  return osOK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop

08001c9c <osThreadCreate>:


// Thread Public API

/// Create a thread and add it to Active Threads and set it to state READY
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ca6:	f3ef 8105 	mrs	r1, IPSR
 8001caa:	60f9      	str	r1, [r7, #12]
  return(result);
 8001cac:	68f9      	ldr	r1, [r7, #12]
  if (__get_IPSR() != 0U) { 
 8001cae:	2900      	cmp	r1, #0
 8001cb0:	d001      	beq.n	8001cb6 <osThreadCreate+0x1a>
    return NULL;                                // Not allowed in ISR
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e01c      	b.n	8001cf0 <osThreadCreate+0x54>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001cb6:	f3ef 8114 	mrs	r1, CONTROL
 8001cba:	6179      	str	r1, [r7, #20]
  return(result);
 8001cbc:	6979      	ldr	r1, [r7, #20]
  }
  if (((__get_CONTROL() & 1U) == 0U) && (os_running == 0U)) {
 8001cbe:	f001 0101 	and.w	r1, r1, #1
 8001cc2:	2900      	cmp	r1, #0
 8001cc4:	d109      	bne.n	8001cda <osThreadCreate+0x3e>
 8001cc6:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <osThreadCreate+0x5c>)
 8001cc8:	7809      	ldrb	r1, [r1, #0]
 8001cca:	2900      	cmp	r1, #0
 8001ccc:	d105      	bne.n	8001cda <osThreadCreate+0x3e>
    // Privileged and not running
    return   svcThreadCreate(thread_def, argument);
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff2d 	bl	8001b30 <svcThreadCreate>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	e00a      	b.n	8001cf0 <osThreadCreate+0x54>
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	60b9      	str	r1, [r7, #8]
}

__NO_RETURN void osThreadExit (void);

// Thread Service Calls declarations
SVC_2_1(svcThreadCreate,      osThreadId, const osThreadDef_t *, void *,     RET_pointer)
 8001ce2:	6938      	ldr	r0, [r7, #16]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	f8df c014 	ldr.w	ip, [pc, #20]	; 8001cfc <osThreadCreate+0x60>
 8001cea:	df00      	svc	0
 8001cec:	4603      	mov	r3, r0
  }
  if (((__get_CONTROL() & 1U) == 0U) && (os_running == 0U)) {
    // Privileged and not running
    return   svcThreadCreate(thread_def, argument);
  } else {
    return __svcThreadCreate(thread_def, argument);
 8001cee:	bf00      	nop
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000171 	.word	0x20000171
 8001cfc:	08001b31 	.word	0x08001b31

08001d00 <osThreadYield>:
  }
  return __svcThreadTerminate(thread_id);
}

/// Pass control to next thread that is in state READY
osStatus osThreadYield (void) {
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d06:	f3ef 8405 	mrs	r4, IPSR
 8001d0a:	607c      	str	r4, [r7, #4]
  return(result);
 8001d0c:	687c      	ldr	r4, [r7, #4]
  if (__get_IPSR() != 0U) {
 8001d0e:	2c00      	cmp	r4, #0
 8001d10:	d001      	beq.n	8001d16 <osThreadYield+0x16>
    return osErrorISR;                          // Not allowed in ISR
 8001d12:	2382      	movs	r3, #130	; 0x82
 8001d14:	e004      	b.n	8001d20 <osThreadYield+0x20>

// Thread Service Calls declarations
SVC_2_1(svcThreadCreate,      osThreadId, const osThreadDef_t *, void *,     RET_pointer)
SVC_0_1(svcThreadGetId,       osThreadId,                                    RET_pointer)
SVC_1_1(svcThreadTerminate,   osStatus,         osThreadId,                  RET_osStatus)
SVC_0_1(svcThreadYield,       osStatus,                                      RET_osStatus)
 8001d16:	f8df c010 	ldr.w	ip, [pc, #16]	; 8001d28 <osThreadYield+0x28>
 8001d1a:	df00      	svc	0
 8001d1c:	4603      	mov	r3, r0
/// Pass control to next thread that is in state READY
osStatus osThreadYield (void) {
  if (__get_IPSR() != 0U) {
    return osErrorISR;                          // Not allowed in ISR
  }
  return __svcThreadYield();
 8001d1e:	bf00      	nop
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	08001c8d 	.word	0x08001c8d

08001d2c <osThreadExit>:
  return __svcThreadGetPriority(thread_id);
}

/// INTERNAL - Not Public
/// Auto Terminate Thread on exit (used implicitly when thread exists)
__NO_RETURN void osThreadExit (void) { 
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

__NO_RETURN void osThreadExit (void);

// Thread Service Calls declarations
SVC_2_1(svcThreadCreate,      osThreadId, const osThreadDef_t *, void *,     RET_pointer)
SVC_0_1(svcThreadGetId,       osThreadId,                                    RET_pointer)
 8001d32:	f8df c010 	ldr.w	ip, [pc, #16]	; 8001d44 <osThreadExit+0x18>
 8001d36:	df00      	svc	0
 8001d38:	6078      	str	r0, [r7, #4]
SVC_1_1(svcThreadTerminate,   osStatus,         osThreadId,                  RET_osStatus)
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f8df c008 	ldr.w	ip, [pc, #8]	; 8001d48 <osThreadExit+0x1c>
 8001d40:	df00      	svc	0

/// INTERNAL - Not Public
/// Auto Terminate Thread on exit (used implicitly when thread exists)
__NO_RETURN void osThreadExit (void) { 
  __svcThreadTerminate(__svcThreadGetId()); 
  for (;;);                                     // Should never come here
 8001d42:	e7fe      	b.n	8001d42 <osThreadExit+0x16>
 8001d44:	08001c01 	.word	0x08001c01
 8001d48:	08001c2d 	.word	0x08001c2d

08001d4c <svcDelay>:
#endif

// Generic Wait Service Calls

/// Wait for Timeout (Time Delay)
osStatus svcDelay (uint32_t millisec) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if (millisec == 0U) { return osOK; }
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <svcDelay+0x12>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e007      	b.n	8001d6e <svcDelay+0x22>
  rt_dly_wait(rt_ms2tick(millisec));
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fd64 	bl	800182c <rt_ms2tick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 fd24 	bl	80037b4 <rt_dly_wait>
  return osEventTimeout;
 8001d6c:	2340      	movs	r3, #64	; 0x40
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop

08001d78 <osDelay>:


// Generic Wait API

/// Wait for Timeout (Time Delay)
osStatus osDelay (uint32_t millisec) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d80:	f3ef 8005 	mrs	r0, IPSR
 8001d84:	60b8      	str	r0, [r7, #8]
  return(result);
 8001d86:	68b8      	ldr	r0, [r7, #8]
  if (__get_IPSR() != 0U) {
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d001      	beq.n	8001d90 <osDelay+0x18>
    return osErrorISR;                          // Not allowed in ISR
 8001d8c:	2382      	movs	r3, #130	; 0x82
 8001d8e:	e007      	b.n	8001da0 <osDelay+0x28>
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	60f8      	str	r0, [r7, #12]


// ==== Generic Wait Functions ====

// Generic Wait Service Calls declarations
SVC_1_1(svcDelay,           osStatus, uint32_t, RET_osStatus)
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f8df c010 	ldr.w	ip, [pc, #16]	; 8001da8 <osDelay+0x30>
 8001d9a:	df00      	svc	0
 8001d9c:	4603      	mov	r3, r0
/// Wait for Timeout (Time Delay)
osStatus osDelay (uint32_t millisec) {
  if (__get_IPSR() != 0U) {
    return osErrorISR;                          // Not allowed in ISR
  }
  return __svcDelay(millisec);
 8001d9e:	bf00      	nop
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	08001d4d 	.word	0x08001d4d

08001dac <rt_timer_insert>:


// Timer Helper Functions

// Insert Timer into the list sorted by time
static void rt_timer_insert (os_timer_cb *pt, uint32_t tcnt) {
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  os_timer_cb *p, *prev;

  prev = NULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  p = os_timer_head;
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <rt_timer_insert+0x80>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]
  while (p != NULL) {
 8001dc0:	e00e      	b.n	8001de0 <rt_timer_insert+0x34>
    if (tcnt < p->tcnt) { break; }
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d80d      	bhi.n	8001de8 <rt_timer_insert+0x3c>
    tcnt -= p->tcnt;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	603b      	str	r3, [r7, #0]
    prev = p;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
    p = p->next;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]
static void rt_timer_insert (os_timer_cb *pt, uint32_t tcnt) {
  os_timer_cb *p, *prev;

  prev = NULL;
  p = os_timer_head;
  while (p != NULL) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ed      	bne.n	8001dc2 <rt_timer_insert+0x16>
 8001de6:	e000      	b.n	8001dea <rt_timer_insert+0x3e>
    if (tcnt < p->tcnt) { break; }
 8001de8:	bf00      	nop
    tcnt -= p->tcnt;
    prev = p;
    p = p->next;
  }
  pt->next = p;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]
  pt->tcnt = tcnt;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	609a      	str	r2, [r3, #8]
  if (p != NULL) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <rt_timer_insert+0x5e>
    p->tcnt -= pt->tcnt;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	1ad2      	subs	r2, r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	609a      	str	r2, [r3, #8]
  }
  if (prev != NULL) {
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <rt_timer_insert+0x6c>
    prev->next = pt;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
  } else {
    os_timer_head = pt;
  }
}
 8001e16:	e002      	b.n	8001e1e <rt_timer_insert+0x72>
    p->tcnt -= pt->tcnt;
  }
  if (prev != NULL) {
    prev->next = pt;
  } else {
    os_timer_head = pt;
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <rt_timer_insert+0x80>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000174 	.word	0x20000174

08001e30 <svcTimerCall>:

  return osOK;
}

/// Get timer callback parameters
os_InRegs osCallback_type svcTimerCall (osTimerId timer_id) {
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  os_timer_cb *pt;
  osCallback   ret;

  pt = rt_id2obj(timer_id);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fd51 	bl	80018e0 <rt_id2obj>
 8001e3e:	6178      	str	r0, [r7, #20]
  if (pt == NULL) {
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10e      	bne.n	8001e64 <svcTimerCall+0x34>
    ret.fp  = NULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
    ret.arg = NULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
    return osCallback_ret;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4619      	mov	r1, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	461a      	mov	r2, r3
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	f04f 0400 	mov.w	r4, #0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4614      	mov	r4, r2
 8001e62:	e010      	b.n	8001e86 <svcTimerCall+0x56>
  }

  ret.fp  = (void *)pt->timer->ptimer;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60fb      	str	r3, [r7, #12]
  ret.arg = pt->arg;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	613b      	str	r3, [r7, #16]

  return osCallback_ret;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4619      	mov	r1, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	f04f 0400 	mov.w	r4, #0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4614      	mov	r4, r2
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	4621      	mov	r1, r4
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}

08001e90 <sysTimerTick>:

osStatus isrMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec);

/// Timer Tick (called each SysTick)
void sysTimerTick (void) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
  os_timer_cb *pt, *p;
  osStatus     status;

  p = os_timer_head;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <sysTimerTick+0x80>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]
  if (p == NULL) { return; }
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d031      	beq.n	8001f06 <sysTimerTick+0x76>

  p->tcnt--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]
  while ((p != NULL) && (p->tcnt == 0U)) {
 8001eac:	e023      	b.n	8001ef6 <sysTimerTick+0x66>
    pt = p;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
    p = p->next;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]
    os_timer_head = p;
 8001eb8:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <sysTimerTick+0x80>)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6013      	str	r3, [r2, #0]
    status = isrMessagePut(osMessageQId_osTimerMessageQ, (uint32_t)pt, 0U);
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <sysTimerTick+0x84>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f8f8 	bl	80020bc <isrMessagePut>
 8001ecc:	6078      	str	r0, [r7, #4]
    if (status != osOK) {
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <sysTimerTick+0x4a>
      os_error(OS_ERR_TIMER_OVF);
 8001ed4:	2004      	movs	r0, #4
 8001ed6:	f001 fd09 	bl	80038ec <os_error>
    }
    if (pt->type == (uint8_t)osTimerPeriodic) {
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	795b      	ldrb	r3, [r3, #5]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d106      	bne.n	8001ef0 <sysTimerTick+0x60>
      rt_timer_insert(pt, pt->icnt);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	68b8      	ldr	r0, [r7, #8]
 8001eea:	f7ff ff5f 	bl	8001dac <rt_timer_insert>
 8001eee:	e002      	b.n	8001ef6 <sysTimerTick+0x66>
    } else {
      pt->state = osTimerStopped;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	711a      	strb	r2, [r3, #4]

  p = os_timer_head;
  if (p == NULL) { return; }

  p->tcnt--;
  while ((p != NULL) && (p->tcnt == 0U)) {
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <sysTimerTick+0x78>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0d4      	beq.n	8001eae <sysTimerTick+0x1e>
 8001f04:	e000      	b.n	8001f08 <sysTimerTick+0x78>
void sysTimerTick (void) {
  os_timer_cb *pt, *p;
  osStatus     status;

  p = os_timer_head;
  if (p == NULL) { return; }
 8001f06:	bf00      	nop
      rt_timer_insert(pt, pt->icnt);
    } else {
      pt->state = osTimerStopped;
    }
  }
}
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000174 	.word	0x20000174
 8001f14:	20003a54 	.word	0x20003a54

08001f18 <osTimerCall>:
  return __svcTimerDelete(timer_id);
}

/// INTERNAL - Not Public
/// Get timer callback parameters (used by OS Timer Thread)
os_InRegs osCallback osTimerCall (osTimerId timer_id) { 
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	6838      	ldr	r0, [r7, #0]
 8001f24:	60f8      	str	r0, [r7, #12]
// Timer Service Calls declarations
SVC_3_1(svcTimerCreate,           osTimerId,  const osTimerDef_t *, os_timer_type, void *, RET_pointer)
SVC_2_1(svcTimerStart,            osStatus,         osTimerId,      uint32_t,              RET_osStatus)
SVC_1_1(svcTimerStop,             osStatus,         osTimerId,                             RET_osStatus)
SVC_1_1(svcTimerDelete,           osStatus,         osTimerId,                             RET_osStatus)
SVC_1_2(svcTimerCall,   os_InRegs osCallback,       osTimerId,                             RET_osCallback)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f8df c018 	ldr.w	ip, [pc, #24]	; 8001f44 <osTimerCall+0x2c>
 8001f2c:	df00      	svc	0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	461a      	mov	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6018      	str	r0, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	605a      	str	r2, [r3, #4]
}

/// INTERNAL - Not Public
/// Get timer callback parameters (used by OS Timer Thread)
os_InRegs osCallback osTimerCall (osTimerId timer_id) { 
  return __svcTimerCall(timer_id); 
 8001f3a:	bf00      	nop
}
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	08001e31 	.word	0x08001e31

08001f48 <osTimerThread>:


// Timer Thread
__NO_RETURN void osTimerThread (void const *argument) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  osCallback cb;
  osEvent    evt;

  for (;;) {
    evt = osMessageGet(osMessageQId_osTimerMessageQ, osWaitForever);
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <osTimerThread+0x40>)
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f91d 	bl	800219c <osMessageGet>
    if (evt.status == osEventMessage) {
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d1f3      	bne.n	8001f50 <osTimerThread+0x8>
      cb = osTimerCall(evt.value.p);
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	f107 0318 	add.w	r3, r7, #24
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ffd1 	bl	8001f18 <osTimerCall>
      if (cb.fp != NULL) {
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0e9      	beq.n	8001f50 <osTimerThread+0x8>
        (*(os_ptimer)cb.fp)(cb.arg);
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	4610      	mov	r0, r2
 8001f82:	4798      	blx	r3
      }
    }
  }
 8001f84:	e7e4      	b.n	8001f50 <osTimerThread+0x8>
 8001f86:	bf00      	nop
 8001f88:	20003a54 	.word	0x20003a54

08001f8c <svcMessageCreate>:
SVC_2_3(svcMessageGet, os_InRegs osEvent,            osMessageQId,      uint32_t,             RET_osEvent)

// Message Queue Service Calls

/// Create and Initialize Message Queue
osMessageQId svcMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]

  if ((queue_def == NULL) ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <svcMessageCreate+0x20>
      (queue_def->queue_sz == 0U) ||
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
// Message Queue Service Calls

/// Create and Initialize Message Queue
osMessageQId svcMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id) {

  if ((queue_def == NULL) ||
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <svcMessageCreate+0x20>
      (queue_def->queue_sz == 0U) ||
      (queue_def->pool == NULL)) {
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]

/// Create and Initialize Message Queue
osMessageQId svcMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id) {

  if ((queue_def == NULL) ||
      (queue_def->queue_sz == 0U) ||
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d104      	bne.n	8001fb6 <svcMessageCreate+0x2a>
      (queue_def->pool == NULL)) {
    sysThreadError(osErrorParameter);
 8001fac:	2080      	movs	r0, #128	; 0x80
 8001fae:	f7ff fdb5 	bl	8001b1c <sysThreadError>
    return NULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e017      	b.n	8001fe6 <svcMessageCreate+0x5a>
  }
  
  if (((P_MCB)queue_def->pool)->cb_type != 0U) {
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <svcMessageCreate+0x3e>
    sysThreadError(osErrorParameter);
 8001fc0:	2080      	movs	r0, #128	; 0x80
 8001fc2:	f7ff fdab 	bl	8001b1c <sysThreadError>
    return NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e00d      	b.n	8001fe6 <svcMessageCreate+0x5a>
  }

  rt_mbx_init(queue_def->pool, (uint16_t)(4U*(queue_def->queue_sz + 4U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f000 fbbb 	bl	8002758 <rt_mbx_init>

  return queue_def->pool;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop

08001ff0 <svcMessageGet>:

  return osOK;
}

/// Get a Message or Wait for a Message from a Queue
os_InRegs osEvent_type svcMessageGet (osMessageQId queue_id, uint32_t millisec) {
 8001ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff4:	b087      	sub	sp, #28
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  OS_RESULT res;
  osEvent   ret;

  if (queue_id == NULL) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <svcMessageGet+0x2c>
    ret.status = osErrorParameter;
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	60bb      	str	r3, [r7, #8]
    return osEvent_ret_status;
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	2300      	movs	r3, #0
 800200a:	2400      	movs	r4, #0
 800200c:	2500      	movs	r5, #0
 800200e:	2600      	movs	r6, #0
 8002010:	4613      	mov	r3, r2
 8002012:	4698      	mov	r8, r3
 8002014:	46a1      	mov	r9, r4
 8002016:	46aa      	mov	sl, r5
 8002018:	46b3      	mov	fp, r6
 800201a:	e042      	b.n	80020a2 <svcMessageGet+0xb2>
  }

  if (((P_MCB)queue_id)->cb_type != MCB) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d00c      	beq.n	800203e <svcMessageGet+0x4e>
    ret.status = osErrorParameter;
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	60bb      	str	r3, [r7, #8]
    return osEvent_ret_status;
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	2300      	movs	r3, #0
 800202c:	2400      	movs	r4, #0
 800202e:	2500      	movs	r5, #0
 8002030:	2600      	movs	r6, #0
 8002032:	4613      	mov	r3, r2
 8002034:	4698      	mov	r8, r3
 8002036:	46a1      	mov	r9, r4
 8002038:	46aa      	mov	sl, r5
 800203a:	46b3      	mov	fp, r6
 800203c:	e031      	b.n	80020a2 <svcMessageGet+0xb2>
  }

  res = rt_mbx_wait(queue_id, &ret.value.p, rt_ms2tick(millisec));
 800203e:	6838      	ldr	r0, [r7, #0]
 8002040:	f7ff fbf4 	bl	800182c <rt_ms2tick>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	3304      	adds	r3, #4
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fbab 	bl	80027ac <rt_mbx_wait>
 8002056:	6178      	str	r0, [r7, #20]
  
  if (res == OS_R_TMO) {
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d113      	bne.n	8002086 <svcMessageGet+0x96>
    ret.status = (millisec != 0U) ? osEventTimeout : osOK;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <svcMessageGet+0x78>
 8002064:	2340      	movs	r3, #64	; 0x40
 8002066:	e000      	b.n	800206a <svcMessageGet+0x7a>
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
    return osEvent_ret_value;
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	2300      	movs	r3, #0
 8002072:	2400      	movs	r4, #0
 8002074:	2500      	movs	r5, #0
 8002076:	2600      	movs	r6, #0
 8002078:	460b      	mov	r3, r1
 800207a:	4614      	mov	r4, r2
 800207c:	4698      	mov	r8, r3
 800207e:	46a1      	mov	r9, r4
 8002080:	46aa      	mov	sl, r5
 8002082:	46b3      	mov	fp, r6
 8002084:	e00d      	b.n	80020a2 <svcMessageGet+0xb2>
  }

  ret.status = osEventMessage;
 8002086:	2310      	movs	r3, #16
 8002088:	60bb      	str	r3, [r7, #8]

  return osEvent_ret_value;
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	2300      	movs	r3, #0
 8002090:	2400      	movs	r4, #0
 8002092:	2500      	movs	r5, #0
 8002094:	2600      	movs	r6, #0
 8002096:	460b      	mov	r3, r1
 8002098:	4614      	mov	r4, r2
 800209a:	4698      	mov	r8, r3
 800209c:	46a1      	mov	r9, r4
 800209e:	46aa      	mov	sl, r5
 80020a0:	46b3      	mov	fp, r6
 80020a2:	4643      	mov	r3, r8
 80020a4:	464c      	mov	r4, r9
 80020a6:	4655      	mov	r5, sl
 80020a8:	465e      	mov	r6, fp
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	4621      	mov	r1, r4
 80020ae:	462a      	mov	r2, r5
 80020b0:	4633      	mov	r3, r6
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ba:	bf00      	nop

080020bc <isrMessagePut>:


// Message Queue ISR Calls

/// Put a Message to a Queue
osStatus isrMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]

  if ((queue_id == NULL) || (millisec != 0U)) {
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <isrMessagePut+0x18>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <isrMessagePut+0x1c>
    return osErrorParameter;
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	e013      	b.n	8002100 <isrMessagePut+0x44>
  }

  if (((P_MCB)queue_id)->cb_type != MCB) {
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d001      	beq.n	80020e4 <isrMessagePut+0x28>
    return osErrorParameter;
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	e00d      	b.n	8002100 <isrMessagePut+0x44>
  }

  if (rt_mbx_check(queue_id) == 0U) {           // Check if Queue is full
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fbed 	bl	80028c4 <rt_mbx_check>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <isrMessagePut+0x38>
    return osErrorResource;
 80020f0:	2381      	movs	r3, #129	; 0x81
 80020f2:	e005      	b.n	8002100 <isrMessagePut+0x44>
  }

  isr_mbx_send(queue_id, (void *)info);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4619      	mov	r1, r3
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fbf5 	bl	80028e8 <isr_mbx_send>

  return osOK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <isrMessageGet>:

/// Get a Message or Wait for a Message from a Queue
os_InRegs osEvent isrMessageGet (osMessageQId queue_id, uint32_t millisec) {
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  OS_RESULT res;
  osEvent   ret;

  if ((queue_id == NULL) || (millisec != 0U)) {
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <isrMessageGet+0x18>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <isrMessageGet+0x2e>
    ret.status = osErrorParameter;
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	613b      	str	r3, [r7, #16]
    return ret;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	461c      	mov	r4, r3
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002134:	e02e      	b.n	8002194 <isrMessageGet+0x8c>
  }

  if (((P_MCB)queue_id)->cb_type != MCB) {
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d00a      	beq.n	8002154 <isrMessageGet+0x4c>
    ret.status = osErrorParameter;
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	613b      	str	r3, [r7, #16]
    return ret;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	461c      	mov	r4, r3
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800214e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002152:	e01f      	b.n	8002194 <isrMessageGet+0x8c>
  }

  res = isr_mbx_receive(queue_id, &ret.value.p);
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	3304      	adds	r3, #4
 800215a:	4619      	mov	r1, r3
 800215c:	68b8      	ldr	r0, [r7, #8]
 800215e:	f000 fbd5 	bl	800290c <isr_mbx_receive>
 8002162:	61f8      	str	r0, [r7, #28]
  
  if (res != OS_R_MBX) {
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d00a      	beq.n	8002180 <isrMessageGet+0x78>
    ret.status = osOK;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
    return ret;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	461c      	mov	r4, r3
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800217a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800217e:	e009      	b.n	8002194 <isrMessageGet+0x8c>
  }

  ret.status = osEventMessage; 
 8002180:	2310      	movs	r3, #16
 8002182:	613b      	str	r3, [r7, #16]

  return ret;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	461c      	mov	r4, r3
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	3724      	adds	r7, #36	; 0x24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}

0800219c <osMessageGet>:
    return __svcMessagePut(queue_id, info, millisec);
  }
}

/// Get a Message or Wait for a Message from a Queue
os_InRegs osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a8:	f3ef 8105 	mrs	r1, IPSR
 80021ac:	61b9      	str	r1, [r7, #24]
  return(result);
 80021ae:	69b9      	ldr	r1, [r7, #24]
  if (__get_IPSR() != 0U) {                     // in ISR
 80021b0:	2900      	cmp	r1, #0
 80021b2:	d006      	beq.n	80021c2 <osMessageGet+0x26>
    return   isrMessageGet(queue_id, millisec);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ffa4 	bl	8002108 <isrMessageGet>
 80021c0:	e013      	b.n	80021ea <osMessageGet+0x4e>
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	61f9      	str	r1, [r7, #28]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	6179      	str	r1, [r7, #20]
// ==== Message Queue Management Functions ====

// Message Queue Management Service Calls declarations
SVC_2_1(svcMessageCreate,        osMessageQId, const osMessageQDef_t *, osThreadId,           RET_pointer)
SVC_3_1(svcMessagePut,           osStatus,           osMessageQId,      uint32_t,   uint32_t, RET_osStatus)
SVC_2_3(svcMessageGet, os_InRegs osEvent,            osMessageQId,      uint32_t,             RET_osEvent)
 80021ca:	69f8      	ldr	r0, [r7, #28]
 80021cc:	6979      	ldr	r1, [r7, #20]
 80021ce:	f8df c024 	ldr.w	ip, [pc, #36]	; 80021f4 <osMessageGet+0x58>
 80021d2:	df00      	svc	0
 80021d4:	4603      	mov	r3, r0
 80021d6:	4618      	mov	r0, r3
 80021d8:	4613      	mov	r3, r2
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6018      	str	r0, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6059      	str	r1, [r3, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	609a      	str	r2, [r3, #8]
/// Get a Message or Wait for a Message from a Queue
os_InRegs osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec) {
  if (__get_IPSR() != 0U) {                     // in ISR
    return   isrMessageGet(queue_id, millisec);
  } else {                                      // in Thread
    return __svcMessageGet(queue_id, millisec);
 80021e8:	bf00      	nop
  }
}
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	0000      	.short	0x0000
 80021f4:	08001ff1 	.word	0x08001ff1

080021f8 <rt_evt_psh>:
}


/*--------------------------- rt_evt_psh ------------------------------------*/

void rt_evt_psh (P_TCB p_CB, U16 set_flags) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
  /* Check if task has to be waken up */
  U16 event_flags;

  p_CB->events |= set_flags;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8b1a      	ldrh	r2, [r3, #24]
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	4313      	orrs	r3, r2
 800220c:	b29a      	uxth	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	831a      	strh	r2, [r3, #24]
  event_flags = p_CB->waits;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8b5b      	ldrh	r3, [r3, #26]
 8002216:	81fb      	strh	r3, [r7, #14]
  if (p_CB->state == WAIT_AND) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d107      	bne.n	8002230 <rt_evt_psh+0x38>
    /* Check for AND-connected events */
    if ((p_CB->events & event_flags) == event_flags) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8b1a      	ldrh	r2, [r3, #24]
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	4013      	ands	r3, r2
 8002228:	b29b      	uxth	r3, r3
 800222a:	89fa      	ldrh	r2, [r7, #14]
 800222c:	429a      	cmp	r2, r3
 800222e:	d013      	beq.n	8002258 <rt_evt_psh+0x60>
      goto rdy;
    }
  }
  if (p_CB->state == WAIT_OR) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d12c      	bne.n	8002292 <rt_evt_psh+0x9a>
    /* Check for OR-connected events */
    if (p_CB->events & event_flags) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8b1a      	ldrh	r2, [r3, #24]
 800223c:	89fb      	ldrh	r3, [r7, #14]
 800223e:	4013      	ands	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d025      	beq.n	8002292 <rt_evt_psh+0x9a>
      p_CB->waits  &= p_CB->events;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8b5a      	ldrh	r2, [r3, #26]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8b1b      	ldrh	r3, [r3, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	b29a      	uxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	835a      	strh	r2, [r3, #26]
 8002256:	e000      	b.n	800225a <rt_evt_psh+0x62>
  p_CB->events |= set_flags;
  event_flags = p_CB->waits;
  if (p_CB->state == WAIT_AND) {
    /* Check for AND-connected events */
    if ((p_CB->events & event_flags) == event_flags) {
      goto rdy;
 8002258:	bf00      	nop
  }
  if (p_CB->state == WAIT_OR) {
    /* Check for OR-connected events */
    if (p_CB->events & event_flags) {
      p_CB->waits  &= p_CB->events;
rdy:  p_CB->events &= ~event_flags;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	8b1b      	ldrh	r3, [r3, #24]
 800225e:	b29a      	uxth	r2, r3
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	43db      	mvns	r3, r3
 8002264:	b29b      	uxth	r3, r3
 8002266:	4013      	ands	r3, r2
 8002268:	b29b      	uxth	r3, r3
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	831a      	strh	r2, [r3, #24]
      rt_rmv_dly (p_CB);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fa17 	bl	80026a4 <rt_rmv_dly>
      p_CB->state   = READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	705a      	strb	r2, [r3, #1]
#ifdef __CMSIS_RTOS
      rt_ret_val2(p_CB, 0x08U/*osEventSignal*/, p_CB->waits); 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8b5b      	ldrh	r3, [r3, #26]
 8002280:	461a      	mov	r2, r3
 8002282:	2108      	movs	r1, #8
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fabb 	bl	8001800 <rt_ret_val2>
#else
      rt_ret_val (p_CB, OS_R_EVT);
#endif
      rt_put_prio (&os_rdy, p_CB);
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <rt_evt_psh+0xa4>)
 800228e:	f000 f837 	bl	8002300 <rt_put_prio>
    }
  }
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000178 	.word	0x20000178

080022a0 <rt_inc_qi>:
#else
 #define rt_inc(p)     __disable_irq();(*p)++;__enable_irq();
 #define rt_dec(p)     __disable_irq();(*p)--;__enable_irq();
#endif

__inline static U32 rt_inc_qi (U32 size, U8 *count, U8 *first) {
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]

__attribute__((always_inline)) static inline U32 __disable_irq(void)
{
  U32 result;

  __asm volatile ("mrs %0, primask" : "=r" (result));
 80022ac:	f3ef 8310 	mrs	r3, PRIMASK
 80022b0:	617b      	str	r3, [r7, #20]
  __asm volatile ("cpsid i");
 80022b2:	b672      	cpsid	i
    c2 = (cnt = __ldrex(first)) + 1U;
    if (c2 == size) { c2 = 0U; }
  } while (__strex(c2, first));
#else
  __disable_irq();
  if ((cnt = *count) < size) {
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d215      	bcs.n	80022ee <rt_inc_qi+0x4e>
    *count = (U8)(cnt+1U);
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	701a      	strb	r2, [r3, #0]
    c2 = (cnt = *first) + 1U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	3301      	adds	r3, #1
 80022d8:	61bb      	str	r3, [r7, #24]
    if (c2 == size) { c2 = 0U; }
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d101      	bne.n	80022e6 <rt_inc_qi+0x46>
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
    *first = (U8)c2; 
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	701a      	strb	r2, [r3, #0]

#ifndef __CMSIS_GENERIC

__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i");
 80022ee:	b662      	cpsie	i
    if (c2 == size) { c2 = 0U; }
    *first = (U8)c2; 
  }
  __enable_irq ();
#endif
  return (cnt);
 80022f0:	69fb      	ldr	r3, [r7, #28]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <rt_put_prio>:
 *---------------------------------------------------------------------------*/


/*--------------------------- rt_put_prio -----------------------------------*/

void rt_put_prio (P_XCB p_CB, P_TCB p_task) {
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  /* Put task identified with "p_task" into list ordered by priority.       */
  /* "p_CB" points to head of list; list has always an element at end with  */
  /* a priority less than "p_task->prio".                                   */
  P_TCB p_CB2;
  U32 prio;
  BOOL sem_mbx = __FALSE;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]

  if ((p_CB->cb_type == SCB) || (p_CB->cb_type == MCB) || (p_CB->cb_type == MUCB)) {
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d007      	beq.n	8002326 <rt_put_prio+0x26>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d003      	beq.n	8002326 <rt_put_prio+0x26>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d101      	bne.n	800232a <rt_put_prio+0x2a>
    sem_mbx = __TRUE;
 8002326:	2301      	movs	r3, #1
 8002328:	613b      	str	r3, [r7, #16]
  }
  prio = p_task->prio;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	789b      	ldrb	r3, [r3, #2]
 800232e:	60fb      	str	r3, [r7, #12]
  p_CB2 = p_CB->p_lnk;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	617b      	str	r3, [r7, #20]
  /* Search for an entry in the list */
  while ((p_CB2 != NULL) && (prio <= p_CB2->prio)) {
 8002336:	e004      	b.n	8002342 <rt_put_prio+0x42>
    p_CB = (P_XCB)p_CB2;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	607b      	str	r3, [r7, #4]
    p_CB2 = p_CB2->p_lnk;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	617b      	str	r3, [r7, #20]
    sem_mbx = __TRUE;
  }
  prio = p_task->prio;
  p_CB2 = p_CB->p_lnk;
  /* Search for an entry in the list */
  while ((p_CB2 != NULL) && (prio <= p_CB2->prio)) {
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <rt_put_prio+0x54>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	789b      	ldrb	r3, [r3, #2]
 800234c:	461a      	mov	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d2f1      	bcs.n	8002338 <rt_put_prio+0x38>
    p_CB = (P_XCB)p_CB2;
    p_CB2 = p_CB2->p_lnk;
  }
  /* Entry found, insert the task into the list */
  p_task->p_lnk = p_CB2;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	605a      	str	r2, [r3, #4]
  p_CB->p_lnk = p_task;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]
  if (sem_mbx) {
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <rt_put_prio+0x7a>
    if (p_CB2 != NULL) {
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <rt_put_prio+0x72>
      p_CB2->p_rlnk = p_task;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	609a      	str	r2, [r3, #8]
    }
    p_task->p_rlnk = (P_TCB)p_CB;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
  }
  else {
    p_task->p_rlnk = NULL;
  }
}
 8002378:	e002      	b.n	8002380 <rt_put_prio+0x80>
      p_CB2->p_rlnk = p_task;
    }
    p_task->p_rlnk = (P_TCB)p_CB;
  }
  else {
    p_task->p_rlnk = NULL;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  }
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <rt_get_first>:


/*--------------------------- rt_get_first ----------------------------------*/

P_TCB rt_get_first (P_XCB p_CB) {
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Get task at head of list: it is the task with highest priority. */
  /* "p_CB" points to head of list. */
  P_TCB p_first;

  p_first = p_CB->p_lnk;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	60fb      	str	r3, [r7, #12]
  p_CB->p_lnk = p_first->p_lnk;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	605a      	str	r2, [r3, #4]
  if ((p_CB->cb_type == SCB) || (p_CB->cb_type == MCB) || (p_CB->cb_type == MUCB)) {
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d007      	beq.n	80023ba <rt_get_first+0x2e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d003      	beq.n	80023ba <rt_get_first+0x2e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d10e      	bne.n	80023d8 <rt_get_first+0x4c>
    if (p_first->p_lnk != NULL) {
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <rt_get_first+0x44>
      p_first->p_lnk->p_rlnk = (P_TCB)p_CB;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]
      p_first->p_lnk = NULL;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
    }
    p_first->p_rlnk = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	e002      	b.n	80023de <rt_get_first+0x52>
  }
  else {
    p_first->p_lnk = NULL;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	605a      	str	r2, [r3, #4]
  }
  return (p_first);
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <rt_put_rdy_first>:


/*--------------------------- rt_put_rdy_first ------------------------------*/

void rt_put_rdy_first (P_TCB p_task) {
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Put task identified with "p_task" at the head of the ready list. The   */
  /* task must have at least a priority equal to highest priority in list.  */
  p_task->p_lnk = os_rdy.p_lnk;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <rt_put_rdy_first+0x28>)
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	605a      	str	r2, [r3, #4]
  p_task->p_rlnk = NULL;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  os_rdy.p_lnk = p_task;
 8002402:	4a04      	ldr	r2, [pc, #16]	; (8002414 <rt_put_rdy_first+0x28>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6053      	str	r3, [r2, #4]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	20000178 	.word	0x20000178

08002418 <rt_get_same_rdy_prio>:


/*--------------------------- rt_get_same_rdy_prio --------------------------*/

P_TCB rt_get_same_rdy_prio (void) {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
  /* Remove a task of same priority from ready list if any exists. Other-   */
  /* wise return NULL.                                                      */
  P_TCB p_first;

  p_first = os_rdy.p_lnk;
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <rt_get_same_rdy_prio+0x38>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	607b      	str	r3, [r7, #4]
  if (p_first->prio == os_tsk.run->prio) {
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	789a      	ldrb	r2, [r3, #2]
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <rt_get_same_rdy_prio+0x3c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	789b      	ldrb	r3, [r3, #2]
 800242e:	429a      	cmp	r2, r3
 8002430:	d106      	bne.n	8002440 <rt_get_same_rdy_prio+0x28>
    os_rdy.p_lnk = os_rdy.p_lnk->p_lnk;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <rt_get_same_rdy_prio+0x38>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a05      	ldr	r2, [pc, #20]	; (8002450 <rt_get_same_rdy_prio+0x38>)
 800243a:	6053      	str	r3, [r2, #4]
    return (p_first);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	e000      	b.n	8002442 <rt_get_same_rdy_prio+0x2a>
  }
  return (NULL);
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000178 	.word	0x20000178
 8002454:	200001b4 	.word	0x200001b4

08002458 <rt_resort_prio>:


/*--------------------------- rt_resort_prio --------------------------------*/

void rt_resort_prio (P_TCB p_task) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Re-sort ordered lists after the priority of 'p_task' has changed.      */
  P_TCB p_CB;

  if (p_task->p_rlnk == NULL) {
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <rt_resort_prio+0x1e>
    if (p_task->state == READY) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d114      	bne.n	800249a <rt_resort_prio+0x42>
      /* Task is chained into READY list. */
      p_CB = (P_TCB)&os_rdy;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <rt_resort_prio+0x4c>)
 8002472:	60fb      	str	r3, [r7, #12]
      goto res;
 8002474:	e00a      	b.n	800248c <rt_resort_prio+0x34>
    }
  }
  else {
    p_CB = p_task->p_rlnk;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	60fb      	str	r3, [r7, #12]
    while (p_CB->cb_type == TCB) {
 800247c:	e002      	b.n	8002484 <rt_resort_prio+0x2c>
      /* Find a header of this task chain list. */
      p_CB = p_CB->p_rlnk;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60fb      	str	r3, [r7, #12]
      goto res;
    }
  }
  else {
    p_CB = p_task->p_rlnk;
    while (p_CB->cb_type == TCB) {
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f8      	beq.n	800247e <rt_resort_prio+0x26>
      /* Find a header of this task chain list. */
      p_CB = p_CB->p_rlnk;
    }
res:rt_rmv_list (p_task);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8d5 	bl	800263c <rt_rmv_list>
    rt_put_prio ((P_XCB)p_CB, p_task);
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7ff ff33 	bl	8002300 <rt_put_prio>
  }
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000178 	.word	0x20000178

080024a8 <rt_put_dly>:


/*--------------------------- rt_put_dly ------------------------------------*/

void rt_put_dly (P_TCB p_task, U16 delay) {
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
  /* Put a task identified with "p_task" into chained delay wait list using */
  /* a delay value of "delay".                                              */
  P_TCB p;
  U32 delta,idelay = delay;
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	60fb      	str	r3, [r7, #12]

  p = (P_TCB)&os_dly;
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <rt_put_dly+0xc4>)
 80024ba:	617b      	str	r3, [r7, #20]
  if (p->p_dlnk == NULL) {
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <rt_put_dly+0x22>
    /* Delay list empty */
    delta = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
    goto last;
 80024c8:	e007      	b.n	80024da <rt_put_dly+0x32>
  }
  delta = os_dly.delta_time;
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <rt_put_dly+0xc4>)
 80024cc:	8a9b      	ldrh	r3, [r3, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  while (delta < idelay) {
 80024d0:	e021      	b.n	8002516 <rt_put_dly+0x6e>
    if (p->p_dlnk == NULL) {
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d114      	bne.n	8002504 <rt_put_dly+0x5c>
      /* End of list found */
last: p_task->p_dlnk = NULL;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
      p->p_dlnk = p_task;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	60da      	str	r2, [r3, #12]
      p_task->p_blnk = p;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	611a      	str	r2, [r3, #16]
      p->delta_time = (U16)(idelay - delta);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	829a      	strh	r2, [r3, #20]
      p_task->delta_time = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	829a      	strh	r2, [r3, #20]
      return;
 8002502:	e02e      	b.n	8002562 <rt_put_dly+0xba>
    }
    p = p->p_dlnk;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	617b      	str	r3, [r7, #20]
    delta += p->delta_time;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	8a9b      	ldrh	r3, [r3, #20]
 800250e:	461a      	mov	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
    /* Delay list empty */
    delta = 0U;
    goto last;
  }
  delta = os_dly.delta_time;
  while (delta < idelay) {
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	429a      	cmp	r2, r3
 800251c:	d3d9      	bcc.n	80024d2 <rt_put_dly+0x2a>
    }
    p = p->p_dlnk;
    delta += p->delta_time;
  }
  /* Right place found */
  p_task->p_dlnk = p->p_dlnk;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60da      	str	r2, [r3, #12]
  p->p_dlnk = p_task;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]
  p_task->p_blnk = p;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	611a      	str	r2, [r3, #16]
  if (p_task->p_dlnk != NULL) {
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <rt_put_dly+0x9a>
    p_task->p_dlnk->p_blnk = p_task;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]
  }
  p_task->delta_time = (U16)(delta - idelay);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	b29b      	uxth	r3, r3
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	829a      	strh	r2, [r3, #20]
  p->delta_time -= p_task->delta_time;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	8a9a      	ldrh	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8a9b      	ldrh	r3, [r3, #20]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	b29a      	uxth	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	829a      	strh	r2, [r3, #20]
}
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	20000190 	.word	0x20000190

08002570 <rt_dec_dly>:


/*--------------------------- rt_dec_dly ------------------------------------*/

void rt_dec_dly (void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
  /* Decrement delta time of list head: remove tasks having a value of zero.*/
  P_TCB p_rdy;

  if (os_dly.p_dlnk == NULL) {
 8002576:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <rt_dec_dly+0xc0>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d054      	beq.n	8002628 <rt_dec_dly+0xb8>
    return;
  }
  os_dly.delta_time--;
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <rt_dec_dly+0xc0>)
 8002580:	8a9b      	ldrh	r3, [r3, #20]
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <rt_dec_dly+0xc0>)
 8002588:	829a      	strh	r2, [r3, #20]
  while ((os_dly.delta_time == 0U) && (os_dly.p_dlnk != NULL)) {
 800258a:	e044      	b.n	8002616 <rt_dec_dly+0xa6>
    p_rdy = os_dly.p_dlnk;
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <rt_dec_dly+0xc0>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	607b      	str	r3, [r7, #4]
    if (p_rdy->p_rlnk != NULL) {
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d013      	beq.n	80025c2 <rt_dec_dly+0x52>
      /* Task is really enqueued, remove task from semaphore/mailbox */
      /* timeout waiting list. */
      p_rdy->p_rlnk->p_lnk = p_rdy->p_lnk;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6852      	ldr	r2, [r2, #4]
 80025a2:	605a      	str	r2, [r3, #4]
      if (p_rdy->p_lnk != NULL) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <rt_dec_dly+0x4c>
        p_rdy->p_lnk->p_rlnk = p_rdy->p_rlnk;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6892      	ldr	r2, [r2, #8]
 80025b4:	609a      	str	r2, [r3, #8]
        p_rdy->p_lnk = NULL;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
      }
      p_rdy->p_rlnk = NULL;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
    }
    rt_put_prio (&os_rdy, p_rdy);
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	481b      	ldr	r0, [pc, #108]	; (8002634 <rt_dec_dly+0xc4>)
 80025c6:	f7ff fe9b 	bl	8002300 <rt_put_prio>
    os_dly.delta_time = p_rdy->delta_time;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8a9a      	ldrh	r2, [r3, #20]
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <rt_dec_dly+0xc0>)
 80025d0:	829a      	strh	r2, [r3, #20]
    if (p_rdy->state == WAIT_ITV) {
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d108      	bne.n	80025ec <rt_dec_dly+0x7c>
      /* Calculate the next time for interval wait. */
      p_rdy->delta_time = p_rdy->interval_time + (U16)os_time;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	8ada      	ldrh	r2, [r3, #22]
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <rt_dec_dly+0xc8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	829a      	strh	r2, [r3, #20]
    }
    p_rdy->state   = READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	705a      	strb	r2, [r3, #1]
    os_dly.p_dlnk = p_rdy->p_dlnk;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <rt_dec_dly+0xc0>)
 80025f8:	60d3      	str	r3, [r2, #12]
    if (p_rdy->p_dlnk != NULL) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <rt_dec_dly+0xa0>
      p_rdy->p_dlnk->p_blnk = (P_TCB)&os_dly;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <rt_dec_dly+0xc0>)
 8002608:	611a      	str	r2, [r3, #16]
      p_rdy->p_dlnk = NULL;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
    }
    p_rdy->p_blnk = NULL;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]

  if (os_dly.p_dlnk == NULL) {
    return;
  }
  os_dly.delta_time--;
  while ((os_dly.delta_time == 0U) && (os_dly.p_dlnk != NULL)) {
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <rt_dec_dly+0xc0>)
 8002618:	8a9b      	ldrh	r3, [r3, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <rt_dec_dly+0xba>
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <rt_dec_dly+0xc0>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1b2      	bne.n	800258c <rt_dec_dly+0x1c>
 8002626:	e000      	b.n	800262a <rt_dec_dly+0xba>
void rt_dec_dly (void) {
  /* Decrement delta time of list head: remove tasks having a value of zero.*/
  P_TCB p_rdy;

  if (os_dly.p_dlnk == NULL) {
    return;
 8002628:	bf00      	nop
      p_rdy->p_dlnk->p_blnk = (P_TCB)&os_dly;
      p_rdy->p_dlnk = NULL;
    }
    p_rdy->p_blnk = NULL;
  }
}
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000190 	.word	0x20000190
 8002634:	20000178 	.word	0x20000178
 8002638:	200001f0 	.word	0x200001f0

0800263c <rt_rmv_list>:


/*--------------------------- rt_rmv_list -----------------------------------*/

void rt_rmv_list (P_TCB p_task) {
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Remove task identified with "p_task" from ready, semaphore or mailbox  */
  /* waiting list if enqueued.                                              */
  P_TCB p_b;

  if (p_task->p_rlnk != NULL) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00e      	beq.n	800266a <rt_rmv_list+0x2e>
    /* A task is enqueued in semaphore / mailbox waiting list. */
    p_task->p_rlnk->p_lnk = p_task->p_lnk;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6852      	ldr	r2, [r2, #4]
 8002654:	605a      	str	r2, [r3, #4]
    if (p_task->p_lnk != NULL) {
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d019      	beq.n	8002692 <rt_rmv_list+0x56>
      p_task->p_lnk->p_rlnk = p_task->p_rlnk;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6892      	ldr	r2, [r2, #8]
 8002666:	609a      	str	r2, [r3, #8]
    }
    return;
 8002668:	e013      	b.n	8002692 <rt_rmv_list+0x56>
  }

  p_b = (P_TCB)&os_rdy;
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <rt_rmv_list+0x64>)
 800266c:	60fb      	str	r3, [r7, #12]
  while (p_b != NULL) {
 800266e:	e00c      	b.n	800268a <rt_rmv_list+0x4e>
    /* Search the ready list for task "p_task" */
    if (p_b->p_lnk == p_task) {
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	d104      	bne.n	8002684 <rt_rmv_list+0x48>
      p_b->p_lnk = p_task->p_lnk;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	605a      	str	r2, [r3, #4]
      return;
 8002682:	e007      	b.n	8002694 <rt_rmv_list+0x58>
    }
    p_b = p_b->p_lnk;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
    }
    return;
  }

  p_b = (P_TCB)&os_rdy;
  while (p_b != NULL) {
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ef      	bne.n	8002670 <rt_rmv_list+0x34>
 8002690:	e000      	b.n	8002694 <rt_rmv_list+0x58>
    /* A task is enqueued in semaphore / mailbox waiting list. */
    p_task->p_rlnk->p_lnk = p_task->p_lnk;
    if (p_task->p_lnk != NULL) {
      p_task->p_lnk->p_rlnk = p_task->p_rlnk;
    }
    return;
 8002692:	bf00      	nop
      p_b->p_lnk = p_task->p_lnk;
      return;
    }
    p_b = p_b->p_lnk;
  }
}
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000178 	.word	0x20000178

080026a4 <rt_rmv_dly>:


/*--------------------------- rt_rmv_dly ------------------------------------*/

void rt_rmv_dly (P_TCB p_task) {
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Remove task identified with "p_task" from delay list if enqueued.      */
  P_TCB p_b;

  p_b = p_task->p_blnk;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	60fb      	str	r3, [r7, #12]
  if (p_b != NULL) {
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01d      	beq.n	80026f4 <rt_rmv_dly+0x50>
    /* Task is really enqueued */
    p_b->p_dlnk = p_task->p_dlnk;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	60da      	str	r2, [r3, #12]
    if (p_task->p_dlnk != NULL) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00f      	beq.n	80026e8 <rt_rmv_dly+0x44>
      /* 'p_task' is in the middle of list */
      p_b->delta_time += p_task->delta_time;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8a9a      	ldrh	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8a9b      	ldrh	r3, [r3, #20]
 80026d0:	4413      	add	r3, r2
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	829a      	strh	r2, [r3, #20]
      p_task->p_dlnk->p_blnk = p_b;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	611a      	str	r2, [r3, #16]
      p_task->p_dlnk = NULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	e002      	b.n	80026ee <rt_rmv_dly+0x4a>
    }
    else {
      /* 'p_task' is at the end of list */
      p_b->delta_time = 0U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	829a      	strh	r2, [r3, #20]
    }
    p_task->p_blnk = NULL;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  }
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <rt_psq_enq>:


/*--------------------------- rt_psq_enq ------------------------------------*/

void rt_psq_enq (OS_ID entry, U32 arg) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Insert post service request "entry" into ps-queue. */
  U32 idx;

  idx = rt_inc_qi (os_psq->size, &os_psq->count, &os_psq->first);
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <rt_psq_enq+0x50>)
 800270c:	78db      	ldrb	r3, [r3, #3]
 800270e:	4618      	mov	r0, r3
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <rt_psq_enq+0x54>)
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <rt_psq_enq+0x50>)
 8002714:	4619      	mov	r1, r3
 8002716:	f7ff fdc3 	bl	80022a0 <rt_inc_qi>
 800271a:	60f8      	str	r0, [r7, #12]
  if (idx < os_psq->size) {
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <rt_psq_enq+0x50>)
 800271e:	78db      	ldrb	r3, [r3, #3]
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	429a      	cmp	r2, r3
 8002726:	d90c      	bls.n	8002742 <rt_psq_enq+0x42>
    os_psq->q[idx].id  = entry;
 8002728:	4a09      	ldr	r2, [pc, #36]	; (8002750 <rt_psq_enq+0x50>)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]
    os_psq->q[idx].arg = arg;
 8002734:	4a06      	ldr	r2, [pc, #24]	; (8002750 <rt_psq_enq+0x50>)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	609a      	str	r2, [r3, #8]
  }
  else {
    os_error (OS_ERR_FIFO_OVF);
  }
}
 8002740:	e002      	b.n	8002748 <rt_psq_enq+0x48>
  if (idx < os_psq->size) {
    os_psq->q[idx].id  = entry;
    os_psq->q[idx].arg = arg;
  }
  else {
    os_error (OS_ERR_FIFO_OVF);
 8002742:	2002      	movs	r0, #2
 8002744:	f001 f8d2 	bl	80038ec <os_error>
  }
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200039d0 	.word	0x200039d0
 8002754:	200039d2 	.word	0x200039d2

08002758 <rt_mbx_init>:
 *---------------------------------------------------------------------------*/


/*--------------------------- rt_mbx_init -----------------------------------*/

void rt_mbx_init (OS_ID mailbox, U16 mbx_size) {
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
  /* Initialize a mailbox */
  P_MCB p_MCB = mailbox;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60fb      	str	r3, [r7, #12]

  p_MCB->cb_type = MCB;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
  p_MCB->state   = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	705a      	strb	r2, [r3, #1]
  p_MCB->isr_st  = 0U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	709a      	strb	r2, [r3, #2]
  p_MCB->p_lnk   = NULL;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
  p_MCB->first   = 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	811a      	strh	r2, [r3, #8]
  p_MCB->last    = 0U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	815a      	strh	r2, [r3, #10]
  p_MCB->count   = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	819a      	strh	r2, [r3, #12]
  p_MCB->size    = (U16)((mbx_size - (sizeof(struct OS_MCB) - (sizeof(void *))))
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	3b10      	subs	r3, #16
                         / sizeof(void *));
 8002796:	089b      	lsrs	r3, r3, #2
  p_MCB->isr_st  = 0U;
  p_MCB->p_lnk   = NULL;
  p_MCB->first   = 0U;
  p_MCB->last    = 0U;
  p_MCB->count   = 0U;
  p_MCB->size    = (U16)((mbx_size - (sizeof(struct OS_MCB) - (sizeof(void *))))
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	81da      	strh	r2, [r3, #14]
                         / sizeof(void *));
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop

080027ac <rt_mbx_wait>:
}


/*--------------------------- rt_mbx_wait -----------------------------------*/

OS_RESULT rt_mbx_wait (OS_ID mailbox, void **message, U16 timeout) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* Receive a message; possibly wait for it */
  P_MCB p_MCB = mailbox;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	61fb      	str	r3, [r7, #28]
  P_TCB p_TCB;

  /* If a message is available in the fifo buffer */
  /* remove it from the fifo buffer and return. */
  if (p_MCB->count) {
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	899b      	ldrh	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d053      	beq.n	800286e <rt_mbx_wait+0xc2>
    *message = p_MCB->msg[p_MCB->last];
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	895b      	ldrh	r3, [r3, #10]
 80027ca:	461a      	mov	r2, r3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	3204      	adds	r2, #4
 80027d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	601a      	str	r2, [r3, #0]
    if (++p_MCB->last == p_MCB->size) {
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	895b      	ldrh	r3, [r3, #10]
 80027dc:	3301      	adds	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	815a      	strh	r2, [r3, #10]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	895a      	ldrh	r2, [r3, #10]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	89db      	ldrh	r3, [r3, #14]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d102      	bne.n	80027f6 <rt_mbx_wait+0x4a>
      p_MCB->last = 0U;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2200      	movs	r2, #0
 80027f4:	815a      	strh	r2, [r3, #10]
    }
    if ((p_MCB->p_lnk != NULL) && (p_MCB->state == 2U)) {
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02a      	beq.n	8002854 <rt_mbx_wait+0xa8>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d126      	bne.n	8002854 <rt_mbx_wait+0xa8>
      /* A task is waiting to send message */
      p_TCB = rt_get_first ((P_XCB)p_MCB);
 8002806:	69f8      	ldr	r0, [r7, #28]
 8002808:	f7ff fdc0 	bl	800238c <rt_get_first>
 800280c:	61b8      	str	r0, [r7, #24]
#ifdef __CMSIS_RTOS
      rt_ret_val(p_TCB, 0U/*osOK*/);
 800280e:	2100      	movs	r1, #0
 8002810:	69b8      	ldr	r0, [r7, #24]
 8002812:	f7fe ffe5 	bl	80017e0 <rt_ret_val>
#else
      rt_ret_val(p_TCB, OS_R_OK);
#endif
      p_MCB->msg[p_MCB->first] = p_TCB->msg;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	891b      	ldrh	r3, [r3, #8]
 800281a:	461a      	mov	r2, r3
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	69d9      	ldr	r1, [r3, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	3204      	adds	r2, #4
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      if (++p_MCB->first == p_MCB->size) {
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	891b      	ldrh	r3, [r3, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	811a      	strh	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	891a      	ldrh	r2, [r3, #8]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	89db      	ldrh	r3, [r3, #14]
 800283c:	429a      	cmp	r2, r3
 800283e:	d102      	bne.n	8002846 <rt_mbx_wait+0x9a>
        p_MCB->first = 0U;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2200      	movs	r2, #0
 8002844:	811a      	strh	r2, [r3, #8]
      }
      rt_rmv_dly (p_TCB);
 8002846:	69b8      	ldr	r0, [r7, #24]
 8002848:	f7ff ff2c 	bl	80026a4 <rt_rmv_dly>
      rt_dispatch (p_TCB);
 800284c:	69b8      	ldr	r0, [r7, #24]
 800284e:	f000 fcbf 	bl	80031d0 <rt_dispatch>
 8002852:	e00a      	b.n	800286a <rt_mbx_wait+0xbe>

__attribute__((always_inline)) static inline U32 __disable_irq(void)
{
  U32 result;

  __asm volatile ("mrs %0, primask" : "=r" (result));
 8002854:	f3ef 8310 	mrs	r3, PRIMASK
 8002858:	617b      	str	r3, [r7, #20]
  __asm volatile ("cpsid i");
 800285a:	b672      	cpsid	i
    }
    else {
      rt_dec (&p_MCB->count);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	899b      	ldrh	r3, [r3, #12]
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	819a      	strh	r2, [r3, #12]

#ifndef __CMSIS_GENERIC

__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i");
 8002868:	b662      	cpsie	i
    }
    return (OS_R_OK);
 800286a:	2300      	movs	r3, #0
 800286c:	e024      	b.n	80028b8 <rt_mbx_wait+0x10c>
  }
  /* No message available: wait for one */
  if (timeout == 0U) {
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <rt_mbx_wait+0xcc>
    return (OS_R_TMO);
 8002874:	2301      	movs	r3, #1
 8002876:	e01f      	b.n	80028b8 <rt_mbx_wait+0x10c>
  }
  if (p_MCB->p_lnk != NULL) {
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <rt_mbx_wait+0xe2>
    rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <rt_mbx_wait+0x114>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	69f8      	ldr	r0, [r7, #28]
 8002888:	f7ff fd3a 	bl	8002300 <rt_put_prio>
 800288c:	e00e      	b.n	80028ac <rt_mbx_wait+0x100>
  }
  else {
    p_MCB->p_lnk = os_tsk.run;
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <rt_mbx_wait+0x114>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	605a      	str	r2, [r3, #4]
    os_tsk.run->p_lnk = NULL;
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <rt_mbx_wait+0x114>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	605a      	str	r2, [r3, #4]
    os_tsk.run->p_rlnk = (P_TCB)p_MCB;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <rt_mbx_wait+0x114>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	609a      	str	r2, [r3, #8]
    /* Task is waiting to receive a message */      
    p_MCB->state = 1U;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2201      	movs	r2, #1
 80028aa:	705a      	strb	r2, [r3, #1]
  }
  rt_block(timeout, WAIT_MBX);
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	2108      	movs	r1, #8
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fcbf 	bl	8003234 <rt_block>
#ifndef __CMSIS_RTOS
  os_tsk.run->msg = message;
#endif
  return (OS_R_TMO);
 80028b6:	2301      	movs	r3, #1
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200001b4 	.word	0x200001b4

080028c4 <rt_mbx_check>:


/*--------------------------- rt_mbx_check ----------------------------------*/

OS_RESULT rt_mbx_check (OS_ID mailbox) {
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check for free space in a mailbox. Returns the number of messages     */
  /* that can be stored to a mailbox. It returns 0 when mailbox is full.   */
  P_MCB p_MCB = mailbox;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  return ((U32)(p_MCB->size - p_MCB->count));
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	89db      	ldrh	r3, [r3, #14]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	899b      	ldrh	r3, [r3, #12]
 80028da:	1ad3      	subs	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <isr_mbx_send>:


/*--------------------------- isr_mbx_send ----------------------------------*/

void isr_mbx_send (OS_ID mailbox, void *p_msg) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* Same function as "os_mbx_send", but to be called by ISRs. */
  P_MCB p_MCB = mailbox;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

  rt_psq_enq (p_MCB, (U32)p_msg);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff ff00 	bl	8002700 <rt_psq_enq>
  rt_psh_req ();
 8002900:	f000 fad6 	bl	8002eb0 <rt_psh_req>
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <isr_mbx_receive>:


/*--------------------------- isr_mbx_receive -------------------------------*/

OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  /* Receive a message in the interrupt function. The interrupt function   */
  /* should not wait for a message since this would block the rtx os.      */
  P_MCB p_MCB = mailbox;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  if (p_MCB->count) {
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	899b      	ldrh	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02e      	beq.n	8002980 <isr_mbx_receive+0x74>
    /* A message is available in the fifo buffer. */
    *message = p_MCB->msg[p_MCB->last];
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	895b      	ldrh	r3, [r3, #10]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3204      	adds	r2, #4
 800292c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	601a      	str	r2, [r3, #0]
    if (p_MCB->state == 2U) {
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d105      	bne.n	8002948 <isr_mbx_receive+0x3c>
      /* A task is locked waiting to send message */
      rt_psq_enq (p_MCB, 0U);
 800293c:	2100      	movs	r1, #0
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff fede 	bl	8002700 <rt_psq_enq>
      rt_psh_req ();
 8002944:	f000 fab4 	bl	8002eb0 <rt_psh_req>

__attribute__((always_inline)) static inline U32 __disable_irq(void)
{
  U32 result;

  __asm volatile ("mrs %0, primask" : "=r" (result));
 8002948:	f3ef 8310 	mrs	r3, PRIMASK
 800294c:	60bb      	str	r3, [r7, #8]
  __asm volatile ("cpsid i");
 800294e:	b672      	cpsid	i
    }
    rt_dec (&p_MCB->count);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	899b      	ldrh	r3, [r3, #12]
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	819a      	strh	r2, [r3, #12]

#ifndef __CMSIS_GENERIC

__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i");
 800295c:	b662      	cpsie	i
    if (++p_MCB->last == p_MCB->size) {
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	895b      	ldrh	r3, [r3, #10]
 8002962:	3301      	adds	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	815a      	strh	r2, [r3, #10]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	895a      	ldrh	r2, [r3, #10]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	89db      	ldrh	r3, [r3, #14]
 8002972:	429a      	cmp	r2, r3
 8002974:	d102      	bne.n	800297c <isr_mbx_receive+0x70>
      p_MCB->last = 0U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	815a      	strh	r2, [r3, #10]
    }
    return (OS_R_MBX);
 800297c:	2304      	movs	r3, #4
 800297e:	e000      	b.n	8002982 <isr_mbx_receive+0x76>
  }
  return (OS_R_OK);
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop

0800298c <rt_mbx_psh>:


/*--------------------------- rt_mbx_psh ------------------------------------*/

void rt_mbx_psh (P_MCB p_CB, void *p_msg) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  /* Store the message to the mailbox queue or pass it to task directly. */
  P_TCB p_TCB;
  void *mem;

  if (p_CB->p_lnk != NULL) switch (p_CB->state) {
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d06f      	beq.n	8002a7e <rt_mbx_psh+0xf2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	785b      	ldrb	r3, [r3, #1]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d020      	beq.n	80029e8 <rt_mbx_psh+0x5c>
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d002      	beq.n	80029b0 <rt_mbx_psh+0x24>
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d052      	beq.n	8002a54 <rt_mbx_psh+0xc8>
      p_TCB->state = READY;
      rt_rmv_dly (p_TCB);
      rt_put_prio (&os_rdy, p_TCB);
      break;
    default:
      break;
 80029ae:	e094      	b.n	8002ada <rt_mbx_psh+0x14e>

  if (p_CB->p_lnk != NULL) switch (p_CB->state) {
#ifdef __CMSIS_RTOS
    case 3:
      /* Task is waiting to allocate memory, remove it from the waiting list */
      mem = rt_alloc_box(p_msg);
 80029b0:	6838      	ldr	r0, [r7, #0]
 80029b2:	f000 f8ef 	bl	8002b94 <rt_alloc_box>
 80029b6:	6178      	str	r0, [r7, #20]
      if (mem == NULL) { break; }
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 808c 	beq.w	8002ad8 <rt_mbx_psh+0x14c>
      p_TCB = rt_get_first ((P_XCB)p_CB);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fce3 	bl	800238c <rt_get_first>
 80029c6:	6138      	str	r0, [r7, #16]
      rt_ret_val(p_TCB, (U32)mem);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	4619      	mov	r1, r3
 80029cc:	6938      	ldr	r0, [r7, #16]
 80029ce:	f7fe ff07 	bl	80017e0 <rt_ret_val>
      p_TCB->state = READY;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2201      	movs	r2, #1
 80029d6:	705a      	strb	r2, [r3, #1]
      rt_rmv_dly (p_TCB);
 80029d8:	6938      	ldr	r0, [r7, #16]
 80029da:	f7ff fe63 	bl	80026a4 <rt_rmv_dly>
      rt_put_prio (&os_rdy, p_TCB);
 80029de:	6939      	ldr	r1, [r7, #16]
 80029e0:	4840      	ldr	r0, [pc, #256]	; (8002ae4 <rt_mbx_psh+0x158>)
 80029e2:	f7ff fc8d 	bl	8002300 <rt_put_prio>
      break;
 80029e6:	e078      	b.n	8002ada <rt_mbx_psh+0x14e>
#endif
    case 2:
      /* Task is waiting to send a message, remove it from the waiting list */
      p_TCB = rt_get_first ((P_XCB)p_CB);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fccf 	bl	800238c <rt_get_first>
 80029ee:	6138      	str	r0, [r7, #16]
#ifdef __CMSIS_RTOS
      rt_ret_val(p_TCB, 0U/*osOK*/);
 80029f0:	2100      	movs	r1, #0
 80029f2:	6938      	ldr	r0, [r7, #16]
 80029f4:	f7fe fef4 	bl	80017e0 <rt_ret_val>
#else
      rt_ret_val(p_TCB, OS_R_OK);
#endif
      p_CB->msg[p_CB->first] = p_TCB->msg;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	891b      	ldrh	r3, [r3, #8]
 80029fc:	461a      	mov	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	69d9      	ldr	r1, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3204      	adds	r2, #4
 8002a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

__attribute__((always_inline)) static inline U32 __disable_irq(void)
{
  U32 result;

  __asm volatile ("mrs %0, primask" : "=r" (result));
 8002a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0e:	60fb      	str	r3, [r7, #12]
  __asm volatile ("cpsid i");
 8002a10:	b672      	cpsid	i
      rt_inc (&p_CB->count);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	899b      	ldrh	r3, [r3, #12]
 8002a16:	3301      	adds	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	819a      	strh	r2, [r3, #12]

#ifndef __CMSIS_GENERIC

__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i");
 8002a1e:	b662      	cpsie	i
      if (++p_CB->first == p_CB->size) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	891b      	ldrh	r3, [r3, #8]
 8002a24:	3301      	adds	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	811a      	strh	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	891a      	ldrh	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	89db      	ldrh	r3, [r3, #14]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d102      	bne.n	8002a3e <rt_mbx_psh+0xb2>
        p_CB->first = 0U;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	811a      	strh	r2, [r3, #8]
      }
      p_TCB->state = READY;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2201      	movs	r2, #1
 8002a42:	705a      	strb	r2, [r3, #1]
      rt_rmv_dly (p_TCB);
 8002a44:	6938      	ldr	r0, [r7, #16]
 8002a46:	f7ff fe2d 	bl	80026a4 <rt_rmv_dly>
      rt_put_prio (&os_rdy, p_TCB);
 8002a4a:	6939      	ldr	r1, [r7, #16]
 8002a4c:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <rt_mbx_psh+0x158>)
 8002a4e:	f7ff fc57 	bl	8002300 <rt_put_prio>
      break;
 8002a52:	e042      	b.n	8002ada <rt_mbx_psh+0x14e>
    case 1:
      /* Task is waiting for a message, pass the message to the task directly */
      p_TCB = rt_get_first ((P_XCB)p_CB);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff fc99 	bl	800238c <rt_get_first>
 8002a5a:	6138      	str	r0, [r7, #16]
#ifdef __CMSIS_RTOS
      rt_ret_val2(p_TCB, 0x10U/*osEventMessage*/, (U32)p_msg);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2110      	movs	r1, #16
 8002a62:	6938      	ldr	r0, [r7, #16]
 8002a64:	f7fe fecc 	bl	8001800 <rt_ret_val2>
#else
      *p_TCB->msg = p_msg;
      rt_ret_val (p_TCB, OS_R_MBX);
#endif
      p_TCB->state = READY;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	705a      	strb	r2, [r3, #1]
      rt_rmv_dly (p_TCB);
 8002a6e:	6938      	ldr	r0, [r7, #16]
 8002a70:	f7ff fe18 	bl	80026a4 <rt_rmv_dly>
      rt_put_prio (&os_rdy, p_TCB);
 8002a74:	6939      	ldr	r1, [r7, #16]
 8002a76:	481b      	ldr	r0, [pc, #108]	; (8002ae4 <rt_mbx_psh+0x158>)
 8002a78:	f7ff fc42 	bl	8002300 <rt_put_prio>
      break;
 8002a7c:	e02d      	b.n	8002ada <rt_mbx_psh+0x14e>
    default:
      break;
  } else {
    /* No task is waiting for a message, store it to the mailbox queue */
    if (p_CB->count < p_CB->size) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	899a      	ldrh	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	89db      	ldrh	r3, [r3, #14]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d222      	bcs.n	8002ad0 <rt_mbx_psh+0x144>
      p_CB->msg[p_CB->first] = p_msg;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	891b      	ldrh	r3, [r3, #8]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3204      	adds	r2, #4
 8002a94:	6839      	ldr	r1, [r7, #0]
 8002a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

__attribute__((always_inline)) static inline U32 __disable_irq(void)
{
  U32 result;

  __asm volatile ("mrs %0, primask" : "=r" (result));
 8002a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9e:	60bb      	str	r3, [r7, #8]
  __asm volatile ("cpsid i");
 8002aa0:	b672      	cpsid	i
      rt_inc (&p_CB->count);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	899b      	ldrh	r3, [r3, #12]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	819a      	strh	r2, [r3, #12]

#ifndef __CMSIS_GENERIC

__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i");
 8002aae:	b662      	cpsie	i
      if (++p_CB->first == p_CB->size) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	891b      	ldrh	r3, [r3, #8]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	811a      	strh	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	891a      	ldrh	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	89db      	ldrh	r3, [r3, #14]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d108      	bne.n	8002ada <rt_mbx_psh+0x14e>
        p_CB->first = 0U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	811a      	strh	r2, [r3, #8]
    }
    else {
      os_error (OS_ERR_MBX_OVF);
    }
  }
}
 8002ace:	e004      	b.n	8002ada <rt_mbx_psh+0x14e>
      if (++p_CB->first == p_CB->size) {
        p_CB->first = 0U;
      }
    }
    else {
      os_error (OS_ERR_MBX_OVF);
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f000 ff0b 	bl	80038ec <os_error>
    }
  }
}
 8002ad6:	e000      	b.n	8002ada <rt_mbx_psh+0x14e>
  if (p_CB->p_lnk != NULL) switch (p_CB->state) {
#ifdef __CMSIS_RTOS
    case 3:
      /* Task is waiting to allocate memory, remove it from the waiting list */
      mem = rt_alloc_box(p_msg);
      if (mem == NULL) { break; }
 8002ad8:	bf00      	nop
    }
    else {
      os_error (OS_ERR_MBX_OVF);
    }
  }
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000178 	.word	0x20000178

08002ae8 <_init_box>:
 *---------------------------------------------------------------------------*/


/*--------------------------- _init_box -------------------------------------*/

U32 _init_box  (void *box_mem, U32 box_size, U32 blk_size) {
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  void *blk;
  void *next;
  U32  sizeof_bm;

  /* Create memory structure. */
  if (blk_size & BOX_ALIGN_8) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da09      	bge.n	8002b0e <_init_box+0x26>
    /* Memory blocks 8-byte aligned. */ 
    blk_size = ((blk_size & ~BOX_ALIGN_8) + 7U) & ~(U32)7U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b00:	3307      	adds	r3, #7
 8002b02:	f023 0307 	bic.w	r3, r3, #7
 8002b06:	607b      	str	r3, [r7, #4]
    sizeof_bm = (sizeof (struct OS_BM) + 7U) & ~(U32)7U;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e006      	b.n	8002b1c <_init_box+0x34>
  }
  else {
    /* Memory blocks 4-byte aligned. */
    blk_size = (blk_size + 3U) & ~(U32)3U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3303      	adds	r3, #3
 8002b12:	f023 0303 	bic.w	r3, r3, #3
 8002b16:	607b      	str	r3, [r7, #4]
    sizeof_bm = sizeof (struct OS_BM);
 8002b18:	230c      	movs	r3, #12
 8002b1a:	61bb      	str	r3, [r7, #24]
  }
  if (blk_size == 0U) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <_init_box+0x3e>
    return (1U);
 8002b22:	2301      	movs	r3, #1
 8002b24:	e030      	b.n	8002b88 <_init_box+0xa0>
  }
  if ((blk_size + sizeof_bm) > box_size) {
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	441a      	add	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d901      	bls.n	8002b36 <_init_box+0x4e>
    return (1U);
 8002b32:	2301      	movs	r3, #1
 8002b34:	e028      	b.n	8002b88 <_init_box+0xa0>
  }
  /* Create a Memory structure. */
  blk = ((U8 *) box_mem) + sizeof_bm;
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	61fb      	str	r3, [r7, #28]
  ((P_BM) box_mem)->free = blk;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	601a      	str	r2, [r3, #0]
  end = ((U8 *) box_mem) + box_size;
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4413      	add	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  ((P_BM) box_mem)->end      = end;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	605a      	str	r2, [r3, #4]
  ((P_BM) box_mem)->blk_size = blk_size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]

  /* Link all free blocks using offsets. */
  end = ((U8 *) end) - blk_size;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	425b      	negs	r3, r3
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4413      	add	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
  while (1)  {
    next = ((U8 *) blk) + blk_size;
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
    if (next > end) { break; }
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d805      	bhi.n	8002b7e <_init_box+0x96>
    *((void **)blk) = next;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	601a      	str	r2, [r3, #0]
    blk = next;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	61fb      	str	r3, [r7, #28]
  }
 8002b7c:	e7f1      	b.n	8002b62 <_init_box+0x7a>

  /* Link all free blocks using offsets. */
  end = ((U8 *) end) - blk_size;
  while (1)  {
    next = ((U8 *) blk) + blk_size;
    if (next > end) { break; }
 8002b7e:	bf00      	nop
    *((void **)blk) = next;
    blk = next;
  }
  /* end marker */
  *((void **)blk) = 0U;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
  return (0U);
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3724      	adds	r7, #36	; 0x24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <rt_alloc_box>:

/*--------------------------- rt_alloc_box ----------------------------------*/

void *rt_alloc_box (void *box_mem) {
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

__attribute__((always_inline)) static inline U32 __disable_irq(void)
{
  U32 result;

  __asm volatile ("mrs %0, primask" : "=r" (result));
 8002b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba0:	60fb      	str	r3, [r7, #12]
  __asm volatile ("cpsid i");
 8002ba2:	b672      	cpsid	i
  return(result & 1);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
  /* Allocate a memory block and return start address. */
  void **free;
#ifndef __USE_EXCLUSIVE_ACCESS
  U32  irq_mask;

  irq_mask = (U32)__disable_irq ();
 8002baa:	617b      	str	r3, [r7, #20]
  free = ((P_BM) box_mem)->free;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	613b      	str	r3, [r7, #16]
  if (free) {
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <rt_alloc_box+0x2c>
    ((P_BM) box_mem)->free = *free;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	601a      	str	r2, [r3, #0]
  }
  if (irq_mask == 0U) { __enable_irq (); }
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d100      	bne.n	8002bc8 <rt_alloc_box+0x34>

#ifndef __CMSIS_GENERIC

__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i");
 8002bc6:	b662      	cpsie	i
      __clrex();
      break;
    }
  } while (__strex((U32)*free, &((P_BM) box_mem)->free));
#endif
  return (free);
 8002bc8:	693b      	ldr	r3, [r7, #16]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop

08002bd8 <rt_free_box>:
}


/*--------------------------- rt_free_box -----------------------------------*/

U32 rt_free_box (void *box_mem, void *box) {
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  /* Free a memory block, returns 0 if OK, 1 if box does not belong to box_mem */
#ifndef __USE_EXCLUSIVE_ACCESS
  U32 irq_mask;
#endif

  if ((box < box_mem) || (box >= ((P_BM) box_mem)->end)) {
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d304      	bcc.n	8002bf4 <rt_free_box+0x1c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d801      	bhi.n	8002bf8 <rt_free_box+0x20>
    return (1U);
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e013      	b.n	8002c20 <rt_free_box+0x48>

__attribute__((always_inline)) static inline U32 __disable_irq(void)
{
  U32 result;

  __asm volatile ("mrs %0, primask" : "=r" (result));
 8002bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfc:	60bb      	str	r3, [r7, #8]
  __asm volatile ("cpsid i");
 8002bfe:	b672      	cpsid	i
  return(result & 1);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
  }

#ifndef __USE_EXCLUSIVE_ACCESS
  irq_mask = (U32)__disable_irq ();
 8002c06:	60fb      	str	r3, [r7, #12]
  *((void **)box) = ((P_BM) box_mem)->free;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	601a      	str	r2, [r3, #0]
  ((P_BM) box_mem)->free = box;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	601a      	str	r2, [r3, #0]
  if (irq_mask == 0U) { __enable_irq (); }
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d100      	bne.n	8002c1e <rt_free_box+0x46>

#ifndef __CMSIS_GENERIC

__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i");
 8002c1c:	b662      	cpsie	i
      *((void **)box) = ((P_BM) box_mem)->free;
      __DMB();
    } while (*(void**)box != (void *)__ldrex(&((P_BM) box_mem)->free));
  } while (__strex ((U32)box, &((P_BM) box_mem)->free));
#endif
  return (0U);
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <rt_init_mem>:
//   Parameters:
//     pool:    Pointer to memory pool
//     size:    Size of memory pool in bytes
//   Return:    0 - OK, 1 - Error

U32 rt_init_mem (void *pool, U32 size) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  MEMP *ptr;

  if ((pool == NULL) || (size < sizeof(MEMP))) { return (1U); }
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <rt_init_mem+0x16>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b07      	cmp	r3, #7
 8002c40:	d801      	bhi.n	8002c46 <rt_init_mem+0x1a>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e010      	b.n	8002c68 <rt_init_mem+0x3c>

  ptr = (MEMP *)pool;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]
  ptr->next = (MEMP *)((U32)pool + size - sizeof(MEMP *));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3b04      	subs	r3, #4
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]
  ptr->next->next = NULL;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  ptr->len = 0U; 
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	605a      	str	r2, [r3, #4]

  return (0U);
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <rt_alloc_mem>:
//   Parameters:
//     pool:    Pointer to memory pool
//     size:    Size of memory in bytes to allocate
//   Return:    Pointer to allocated memory

void *rt_alloc_mem (void *pool, U32 size) {
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  MEMP *p, *p_search, *p_new;
  U32   hole_size;

  if ((pool == NULL) || (size == 0U)) { return NULL; }
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <rt_alloc_mem+0x16>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <rt_alloc_mem+0x1a>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e040      	b.n	8002d10 <rt_alloc_mem+0x9c>

  /* Add header offset to 'size' */
  size += sizeof(MEMP);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	3308      	adds	r3, #8
 8002c92:	603b      	str	r3, [r7, #0]
  /* Make sure that block is 4-byte aligned  */
  size = (size + 3U) & ~(U32)3U;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3303      	adds	r3, #3
 8002c98:	f023 0303 	bic.w	r3, r3, #3
 8002c9c:	603b      	str	r3, [r7, #0]

  p_search = (MEMP *)pool;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	613b      	str	r3, [r7, #16]
  while (1) {
    hole_size  = (U32)p_search->next - (U32)p_search;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	60fb      	str	r3, [r7, #12]
    hole_size -= p_search->len;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	60fb      	str	r3, [r7, #12]
    /* Check if hole size is big enough */
    if (hole_size >= size) { break; }
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d208      	bcs.n	8002cd2 <rt_alloc_mem+0x5e>
    p_search = p_search->next;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	613b      	str	r3, [r7, #16]
    if (p_search->next == NULL) {
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e9      	bne.n	8002ca2 <rt_alloc_mem+0x2e>
      /* Failed, we are at the end of the list */
      return NULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e01e      	b.n	8002d10 <rt_alloc_mem+0x9c>
  p_search = (MEMP *)pool;
  while (1) {
    hole_size  = (U32)p_search->next - (U32)p_search;
    hole_size -= p_search->len;
    /* Check if hole size is big enough */
    if (hole_size >= size) { break; }
 8002cd2:	bf00      	nop
      /* Failed, we are at the end of the list */
      return NULL;
    }
  }

  if (p_search->len == 0U) {
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <rt_alloc_mem+0x76>
    /* No block is allocated, set the Length of the first element */
    p_search->len = size;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
    p = (MEMP *)(((U32)p_search) + sizeof(MEMP));
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e011      	b.n	8002d0e <rt_alloc_mem+0x9a>
  } else {
    /* Insert new list element into the memory list */
    p_new       = (MEMP *)((U32)p_search + p_search->len);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
    p_new->next = p_search->next;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	601a      	str	r2, [r3, #0]
    p_new->len  = size;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	605a      	str	r2, [r3, #4]
    p_search->next = p_new;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	601a      	str	r2, [r3, #0]
    p = (MEMP *)(((U32)p_new) + sizeof(MEMP));
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	617b      	str	r3, [r7, #20]
  }

  return (p);
 8002d0e:	697b      	ldr	r3, [r7, #20]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <rt_free_mem>:
//   Parameters:
//     pool:    Pointer to memory pool
//     mem:     Pointer to memory to free
//   Return:    0 - OK, 1 - Error

U32 rt_free_mem (void *pool, void *mem) {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  MEMP *p_search, *p_prev, *p_return;

  if ((pool == NULL) || (mem == NULL)) { return (1U); }
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <rt_free_mem+0x16>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <rt_free_mem+0x1a>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e021      	b.n	8002d7a <rt_free_mem+0x5e>

  p_return = (MEMP *)((U32)mem - sizeof(MEMP));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	3b08      	subs	r3, #8
 8002d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set list header */
  p_prev = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  p_search = (MEMP *)pool;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	617b      	str	r3, [r7, #20]
  while (p_search != p_return) {
 8002d44:	e009      	b.n	8002d5a <rt_free_mem+0x3e>
    p_prev   = p_search;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	613b      	str	r3, [r7, #16]
    p_search = p_search->next;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]
    if (p_search == NULL) {
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <rt_free_mem+0x3e>
      /* Valid Memory block not found */
      return (1U);
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <rt_free_mem+0x5e>
  p_return = (MEMP *)((U32)mem - sizeof(MEMP));
  
  /* Set list header */
  p_prev = NULL;
  p_search = (MEMP *)pool;
  while (p_search != p_return) {
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d1f1      	bne.n	8002d46 <rt_free_mem+0x2a>
      /* Valid Memory block not found */
      return (1U);
    }
  }

  if (p_prev == NULL) {
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <rt_free_mem+0x54>
    /* First block to be released, only set length to 0 */
    p_search->len = 0U;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e003      	b.n	8002d78 <rt_free_mem+0x5c>
  } else {
    /* Discard block from chain list */
    p_prev->next = p_search->next;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	601a      	str	r2, [r3, #0]
  }

  return (0U);
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop

08002d88 <rt_init_robin>:
 *      Global Functions
 *---------------------------------------------------------------------------*/

/*--------------------------- rt_init_robin ---------------------------------*/

__weak void rt_init_robin (void) {
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* Initialize Round Robin variables. */
  os_robin.task = NULL;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <rt_init_robin+0x20>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
  os_robin.tout = (U16)os_rrobin;
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <rt_init_robin+0x24>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <rt_init_robin+0x20>)
 8002d9a:	80da      	strh	r2, [r3, #6]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	200001a8 	.word	0x200001a8
 8002dac:	08005fac 	.word	0x08005fac

08002db0 <rt_chk_robin>:

/*--------------------------- rt_chk_robin ----------------------------------*/

__weak void rt_chk_robin (void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
  /* Check if Round Robin timeout expired and switch to the next ready task.*/
  P_TCB p_new;

  if (os_robin.task != os_rdy.p_lnk) {
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <rt_chk_robin+0x60>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <rt_chk_robin+0x64>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d00e      	beq.n	8002de0 <rt_chk_robin+0x30>
    /* New task was suspended, reset Round Robin timeout. */
    os_robin.task = os_rdy.p_lnk;
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <rt_chk_robin+0x64>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <rt_chk_robin+0x60>)
 8002dc8:	6013      	str	r3, [r2, #0]
    os_robin.time = (U16)os_time + os_robin.tout - 1U;
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <rt_chk_robin+0x68>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <rt_chk_robin+0x60>)
 8002dd2:	88db      	ldrh	r3, [r3, #6]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <rt_chk_robin+0x60>)
 8002dde:	809a      	strh	r2, [r3, #4]
  }
  if (os_robin.time == (U16)os_time) {
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <rt_chk_robin+0x60>)
 8002de2:	889b      	ldrh	r3, [r3, #4]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <rt_chk_robin+0x68>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d10a      	bne.n	8002e06 <rt_chk_robin+0x56>
    /* Round Robin timeout has expired, swap Robin tasks. */
    os_robin.task = NULL;
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <rt_chk_robin+0x60>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
    p_new = rt_get_first (&os_rdy);
 8002df6:	4807      	ldr	r0, [pc, #28]	; (8002e14 <rt_chk_robin+0x64>)
 8002df8:	f7ff fac8 	bl	800238c <rt_get_first>
 8002dfc:	6078      	str	r0, [r7, #4]
    rt_put_prio ((P_XCB)&os_rdy, p_new);
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <rt_chk_robin+0x64>)
 8002e02:	f7ff fa7d 	bl	8002300 <rt_put_prio>
  }
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200001a8 	.word	0x200001a8
 8002e14:	20000178 	.word	0x20000178
 8002e18:	200001f0 	.word	0x200001f0

08002e1c <rt_sem_psh>:
}


/*--------------------------- rt_sem_psh ------------------------------------*/

void rt_sem_psh (P_SCB p_CB) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check if task has to be waken up */
  P_TCB p_TCB;

  if (p_CB->p_lnk != NULL) {
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d012      	beq.n	8002e52 <rt_sem_psh+0x36>
    /* A task is waiting for token */
    p_TCB = rt_get_first ((P_XCB)p_CB);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff faad 	bl	800238c <rt_get_first>
 8002e32:	60f8      	str	r0, [r7, #12]
    rt_rmv_dly (p_TCB);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff fc35 	bl	80026a4 <rt_rmv_dly>
    p_TCB->state   = READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	705a      	strb	r2, [r3, #1]
#ifdef __CMSIS_RTOS
    rt_ret_val(p_TCB, 1U);
 8002e40:	2101      	movs	r1, #1
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7fe fccc 	bl	80017e0 <rt_ret_val>
#else
    rt_ret_val(p_TCB, OS_R_SEM);
#endif
    rt_put_prio (&os_rdy, p_TCB);
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	4807      	ldr	r0, [pc, #28]	; (8002e68 <rt_sem_psh+0x4c>)
 8002e4c:	f7ff fa58 	bl	8002300 <rt_put_prio>
  }
  else {
    /* Store token */
    p_CB->tokens++;
  }
}
 8002e50:	e005      	b.n	8002e5e <rt_sem_psh+0x42>
#endif
    rt_put_prio (&os_rdy, p_TCB);
  }
  else {
    /* Store token */
    p_CB->tokens++;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	885b      	ldrh	r3, [r3, #2]
 8002e56:	3301      	adds	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	805a      	strh	r2, [r3, #2]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000178 	.word	0x20000178

08002e6c <rt_systick_init>:
  __enable_irq ();
#endif
  return (cnt);
}

__inline static void rt_systick_init (void) {
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  NVIC_ST_RELOAD  = os_trv;
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <rt_systick_init+0x30>)
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <rt_systick_init+0x34>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6013      	str	r3, [r2, #0]
  NVIC_ST_CURRENT = 0U;
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <rt_systick_init+0x38>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
  NVIC_ST_CTRL    = 0x0007U;
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <rt_systick_init+0x3c>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
  NVIC_SYS_PRI3  |= 0xFF000000U;
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <rt_systick_init+0x40>)
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <rt_systick_init+0x40>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e014 	.word	0xe000e014
 8002ea0:	08005fb0 	.word	0x08005fb0
 8002ea4:	e000e018 	.word	0xe000e018
 8002ea8:	e000e010 	.word	0xe000e010
 8002eac:	e000ed20 	.word	0xe000ed20

08002eb0 <rt_psh_req>:
}


/*--------------------------- rt_psh_req ------------------------------------*/

void rt_psh_req (void) {
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* Initiate a post service handling request if required. */
  if (os_lock == __FALSE) {
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <rt_psh_req+0x28>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d104      	bne.n	8002ec8 <rt_psh_req+0x18>
    OS_PEND_IRQ();
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <rt_psh_req+0x2c>)
 8002ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec4:	601a      	str	r2, [r3, #0]
  }
  else {
    os_psh_flag = __TRUE;
  }
}
 8002ec6:	e002      	b.n	8002ece <rt_psh_req+0x1e>
  /* Initiate a post service handling request if required. */
  if (os_lock == __FALSE) {
    OS_PEND_IRQ();
  }
  else {
    os_psh_flag = __TRUE;
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <rt_psh_req+0x30>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
  }
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20000068 	.word	0x20000068
 8002edc:	e000ed04 	.word	0xe000ed04
 8002ee0:	20000069 	.word	0x20000069

08002ee4 <rt_pop_req>:


/*--------------------------- rt_pop_req ------------------------------------*/

void rt_pop_req (void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
  /* Process an ISR post service requests. */
  struct OS_XCB *p_CB;
  P_TCB next;
  U32  idx;

  os_tsk.run->state = READY;
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <rt_pop_req+0xbc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	705a      	strb	r2, [r3, #1]
  rt_put_rdy_first (os_tsk.run);
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <rt_pop_req+0xbc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fa78 	bl	80023ec <rt_put_rdy_first>

  idx = os_psq->last;
 8002efc:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <rt_pop_req+0xc0>)
 8002efe:	785b      	ldrb	r3, [r3, #1]
 8002f00:	60fb      	str	r3, [r7, #12]
  while (os_psq->count) {
 8002f02:	e03a      	b.n	8002f7a <rt_pop_req+0x96>
    p_CB = os_psq->q[idx].id;
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <rt_pop_req+0xc0>)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60bb      	str	r3, [r7, #8]
    if (p_CB->cb_type == TCB) {
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <rt_pop_req+0x4a>
      /* Is of TCB type */
      rt_evt_psh ((P_TCB)p_CB, (U16)os_psq->q[idx].arg);
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <rt_pop_req+0xc0>)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4619      	mov	r1, r3
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	f7ff f966 	bl	80021f8 <rt_evt_psh>
 8002f2c:	e010      	b.n	8002f50 <rt_pop_req+0x6c>
    }
    else if (p_CB->cb_type == MCB) {
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d109      	bne.n	8002f4a <rt_pop_req+0x66>
      /* Is of MCB type */
      rt_mbx_psh ((P_MCB)p_CB, (void *)os_psq->q[idx].arg);
 8002f36:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <rt_pop_req+0xc0>)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4619      	mov	r1, r3
 8002f42:	68b8      	ldr	r0, [r7, #8]
 8002f44:	f7ff fd22 	bl	800298c <rt_mbx_psh>
 8002f48:	e002      	b.n	8002f50 <rt_pop_req+0x6c>
    }
    else {
      /* Must be of SCB type */
      rt_sem_psh ((P_SCB)p_CB);
 8002f4a:	68b8      	ldr	r0, [r7, #8]
 8002f4c:	f7ff ff66 	bl	8002e1c <rt_sem_psh>
    }
    if (++idx == os_psq->size) { idx = 0U; }
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <rt_pop_req+0xc0>)
 8002f58:	78db      	ldrb	r3, [r3, #3]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <rt_pop_req+0x82>
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]

__attribute__((always_inline)) static inline U32 __disable_irq(void)
{
  U32 result;

  __asm volatile ("mrs %0, primask" : "=r" (result));
 8002f66:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6a:	607b      	str	r3, [r7, #4]
  __asm volatile ("cpsid i");
 8002f6c:	b672      	cpsid	i
    rt_dec (&os_psq->count);
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <rt_pop_req+0xc4>)
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	3a01      	subs	r2, #1
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]

#ifndef __CMSIS_GENERIC

__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i");
 8002f78:	b662      	cpsie	i

  os_tsk.run->state = READY;
  rt_put_rdy_first (os_tsk.run);

  idx = os_psq->last;
  while (os_psq->count) {
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <rt_pop_req+0xc0>)
 8002f7c:	789b      	ldrb	r3, [r3, #2]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1c0      	bne.n	8002f04 <rt_pop_req+0x20>
      rt_sem_psh ((P_SCB)p_CB);
    }
    if (++idx == os_psq->size) { idx = 0U; }
    rt_dec (&os_psq->count);
  }
  os_psq->last = (U8)idx;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <rt_pop_req+0xc0>)
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	705a      	strb	r2, [r3, #1]

  next = rt_get_first (&os_rdy);
 8002f8a:	4808      	ldr	r0, [pc, #32]	; (8002fac <rt_pop_req+0xc8>)
 8002f8c:	f7ff f9fe 	bl	800238c <rt_get_first>
 8002f90:	6038      	str	r0, [r7, #0]
  rt_switch_req (next);
 8002f92:	6838      	ldr	r0, [r7, #0]
 8002f94:	f000 f90a 	bl	80031ac <rt_switch_req>
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	200001b4 	.word	0x200001b4
 8002fa4:	200039d0 	.word	0x200039d0
 8002fa8:	200039d2 	.word	0x200039d2
 8002fac:	20000178 	.word	0x20000178

08002fb0 <os_tick_init>:


/*--------------------------- os_tick_init ----------------------------------*/

__weak S32 os_tick_init (void) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Initialize SysTick timer as system tick timer. */
  rt_systick_init();
 8002fb4:	f7ff ff5a 	bl	8002e6c <rt_systick_init>
  return (-1);  /* Return IRQ number of SysTick timer */
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <os_tick_irqack>:
  return rt_systick_ovf();
}

/*--------------------------- os_tick_irqack --------------------------------*/

__weak void os_tick_irqack (void) {
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* Acknowledge timer interrupt. */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <rt_systick>:

/*--------------------------- rt_systick ------------------------------------*/

extern void sysTimerTick(void);

void rt_systick (void) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
  /* Check for system clock update, suspend running task. */
  P_TCB next;

  os_tsk.run->state = READY;
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <rt_systick+0x44>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	705a      	strb	r2, [r3, #1]
  rt_put_rdy_first (os_tsk.run);
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <rt_systick+0x44>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fa02 	bl	80023ec <rt_put_rdy_first>

  /* Check Round Robin timeout. */
  rt_chk_robin ();
 8002fe8:	f7ff fee2 	bl	8002db0 <rt_chk_robin>

  /* Update delays. */
  os_time++;
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <rt_systick+0x48>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <rt_systick+0x48>)
 8002ff4:	6013      	str	r3, [r2, #0]
  rt_dec_dly ();
 8002ff6:	f7ff fabb 	bl	8002570 <rt_dec_dly>

  /* Check the user timers. */
#ifdef __CMSIS_RTOS
  sysTimerTick();
 8002ffa:	f7fe ff49 	bl	8001e90 <sysTimerTick>
#else
  rt_tmr_tick ();
#endif

  /* Switch back to highest ready task */
  next = rt_get_first (&os_rdy);
 8002ffe:	4807      	ldr	r0, [pc, #28]	; (800301c <rt_systick+0x4c>)
 8003000:	f7ff f9c4 	bl	800238c <rt_get_first>
 8003004:	6078      	str	r0, [r7, #4]
  rt_switch_req (next);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8d0 	bl	80031ac <rt_switch_req>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200001b4 	.word	0x200001b4
 8003018:	200001f0 	.word	0x200001f0
 800301c:	20000178 	.word	0x20000178

08003020 <rt_stk_check>:

/*--------------------------- rt_stk_check ----------------------------------*/

__weak void rt_stk_check (void) {
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Check for stack overflow. */
  if ((os_tsk.run->tsk_stack < (U32)os_tsk.run->stack) || 
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <rt_stk_check+0x2c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <rt_stk_check+0x2c>)
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003030:	4293      	cmp	r3, r2
 8003032:	d306      	bcc.n	8003042 <rt_stk_check+0x22>
      (os_tsk.run->stack[0] != MAGIC_WORD)) {
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <rt_stk_check+0x2c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	681b      	ldr	r3, [r3, #0]

/*--------------------------- rt_stk_check ----------------------------------*/

__weak void rt_stk_check (void) {
  /* Check for stack overflow. */
  if ((os_tsk.run->tsk_stack < (U32)os_tsk.run->stack) || 
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <rt_stk_check+0x30>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d002      	beq.n	8003048 <rt_stk_check+0x28>
      (os_tsk.run->stack[0] != MAGIC_WORD)) {
    os_error (OS_ERR_STK_OVF);
 8003042:	2001      	movs	r0, #1
 8003044:	f000 fc52 	bl	80038ec <os_error>
  }
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200001b4 	.word	0x200001b4
 8003050:	e25a2ea5 	.word	0xe25a2ea5

08003054 <rt_svc_init>:

__inline static U32 rt_systick_ovf (void) {
  return ((NVIC_INT_CTRL >> 26) & 1U);
}

__inline static void rt_svc_init (void) {
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
#if !defined(__TARGET_ARCH_6S_M)
  U32 sh,prigroup;
#endif
  NVIC_SYS_PRI3 |= 0x00FF0000U;
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <rt_svc_init+0x74>)
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <rt_svc_init+0x74>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003064:	6013      	str	r3, [r2, #0]
#if defined(__TARGET_ARCH_6S_M)
  NVIC_SYS_PRI2 |= (NVIC_SYS_PRI3<<(8+1)) & 0xFC000000U;
#else
  sh       = 8U - __clz(~((NVIC_SYS_PRI3 << 8) & 0xFF000000U));
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <rt_svc_init+0x74>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003070:	43db      	mvns	r3, r3
 8003072:	607b      	str	r3, [r7, #4]

__attribute__(( always_inline)) static inline U8 __clz(U32 value)
{
  U8 result;
  
  __asm volatile ("clz %0, %1" : "=r" (result) : "r" (value));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	70fb      	strb	r3, [r7, #3]
  return(result);
 800307c:	78fb      	ldrb	r3, [r7, #3]
#endif
  NVIC_SYS_PRI3 |= 0x00FF0000U;
#if defined(__TARGET_ARCH_6S_M)
  NVIC_SYS_PRI2 |= (NVIC_SYS_PRI3<<(8+1)) & 0xFC000000U;
#else
  sh       = 8U - __clz(~((NVIC_SYS_PRI3 << 8) & 0xFF000000U));
 800307e:	f1c3 0308 	rsb	r3, r3, #8
 8003082:	60fb      	str	r3, [r7, #12]
  prigroup = ((NVIC_AIR_CTRL >> 8) & 0x07U);
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <rt_svc_init+0x78>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60bb      	str	r3, [r7, #8]
  if (prigroup >= sh) {
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	429a      	cmp	r2, r3
 8003096:	d302      	bcc.n	800309e <rt_svc_init+0x4a>
    sh = prigroup + 1U;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
  }
  NVIC_SYS_PRI2 = ((0xFEFFFFFFU << sh) & 0xFF000000U) | (NVIC_SYS_PRI2 & 0x00FFFFFFU);
 800309e:	490c      	ldr	r1, [pc, #48]	; (80030d0 <rt_svc_init+0x7c>)
 80030a0:	f06f 7280 	mvn.w	r2, #16777216	; 0x1000000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <rt_svc_init+0x7c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
#endif
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000ed20 	.word	0xe000ed20
 80030cc:	e000ed0c 	.word	0xe000ed0c
 80030d0:	e000ed1c 	.word	0xe000ed1c

080030d4 <rt_get_TID>:

/*----------------------------------------------------------------------------
 *      Local Functions
 *---------------------------------------------------------------------------*/

static OS_TID rt_get_TID (void) {
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
  U32 tid;

  for (tid = 1U; tid <= os_maxtaskrun; tid++) {
 80030da:	2301      	movs	r3, #1
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	e00b      	b.n	80030f8 <rt_get_TID+0x24>
    if (os_active_TCB[tid-1U] == NULL) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <rt_get_TID+0x40>)
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <rt_get_TID+0x1e>
      return ((OS_TID)tid);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	e009      	b.n	8003106 <rt_get_TID+0x32>
 *---------------------------------------------------------------------------*/

static OS_TID rt_get_TID (void) {
  U32 tid;

  for (tid = 1U; tid <= os_maxtaskrun; tid++) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3301      	adds	r3, #1
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <rt_get_TID+0x44>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d2ed      	bcs.n	80030e0 <rt_get_TID+0xc>
    if (os_active_TCB[tid-1U] == NULL) {
      return ((OS_TID)tid);
    }
  }
  return (0U);
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	200030f0 	.word	0x200030f0
 8003118:	08005fa4 	.word	0x08005fa4

0800311c <rt_init_context>:


/*--------------------------- rt_init_context -------------------------------*/

static void rt_init_context (P_TCB p_TCB, U8 priority, FUNCP task_body) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	460b      	mov	r3, r1
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	72fb      	strb	r3, [r7, #11]
  /* Initialize general part of the Task Control Block. */
  p_TCB->cb_type   = TCB;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
  p_TCB->state     = READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	705a      	strb	r2, [r3, #1]
  p_TCB->prio      = priority;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	7afa      	ldrb	r2, [r7, #11]
 800313a:	709a      	strb	r2, [r3, #2]
  p_TCB->prio_base = priority;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	7afa      	ldrb	r2, [r7, #11]
 8003140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  p_TCB->p_lnk     = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
  p_TCB->p_rlnk    = NULL;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  p_TCB->p_dlnk    = NULL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  p_TCB->p_blnk    = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  p_TCB->p_mlnk    = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	621a      	str	r2, [r3, #32]
  p_TCB->delta_time    = 0U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	829a      	strh	r2, [r3, #20]
  p_TCB->interval_time = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	82da      	strh	r2, [r3, #22]
  p_TCB->events  = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	831a      	strh	r2, [r3, #24]
  p_TCB->waits   = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	835a      	strh	r2, [r3, #26]
  p_TCB->stack_frame = 0U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if (p_TCB->priv_stack == 0U) {
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <rt_init_context+0x7a>
    /* Allocate the memory space for the stack. */
    p_TCB->stack = rt_alloc_box (mp_stk);
 800318a:	4807      	ldr	r0, [pc, #28]	; (80031a8 <rt_init_context+0x8c>)
 800318c:	f7ff fd02 	bl	8002b94 <rt_alloc_box>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  rt_init_stack (p_TCB, task_body);
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7fe fa89 	bl	80016b0 <rt_init_stack>
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000200 	.word	0x20000200

080031ac <rt_switch_req>:


/*--------------------------- rt_switch_req ---------------------------------*/

void rt_switch_req (P_TCB p_new) {
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Switch to next task (identified by "p_new"). */
  os_tsk.new   = p_new;
 80031b4:	4a05      	ldr	r2, [pc, #20]	; (80031cc <rt_switch_req+0x20>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6053      	str	r3, [r2, #4]
  p_new->state = RUNNING;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	705a      	strb	r2, [r3, #1]
  DBG_TASK_SWITCH(p_new->task_id);
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	200001b4 	.word	0x200001b4

080031d0 <rt_dispatch>:


/*--------------------------- rt_dispatch -----------------------------------*/

void rt_dispatch (P_TCB next_TCB) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Dispatch next task if any identified or dispatch highest ready task    */
  /* "next_TCB" identifies a task to run or has value NULL (=no next task)  */
  if (next_TCB == NULL) {
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d107      	bne.n	80031ee <rt_dispatch+0x1e>
    /* Running task was blocked: continue with highest ready task */
    next_TCB = rt_get_first (&os_rdy);
 80031de:	4813      	ldr	r0, [pc, #76]	; (800322c <rt_dispatch+0x5c>)
 80031e0:	f7ff f8d4 	bl	800238c <rt_get_first>
 80031e4:	6078      	str	r0, [r7, #4]
    rt_switch_req (next_TCB);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffe0 	bl	80031ac <rt_switch_req>
      /* put next task into ready list, no task switch takes place */
      next_TCB->state = READY;
      rt_put_prio (&os_rdy, next_TCB);
    }
  }
}
 80031ec:	e01a      	b.n	8003224 <rt_dispatch+0x54>
    next_TCB = rt_get_first (&os_rdy);
    rt_switch_req (next_TCB);
  }
  else {
    /* Check which task continues */
    if (next_TCB->prio > os_tsk.run->prio) {
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	789a      	ldrb	r2, [r3, #2]
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <rt_dispatch+0x60>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	789b      	ldrb	r3, [r3, #2]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d90c      	bls.n	8003216 <rt_dispatch+0x46>
      /* preempt running task */
      rt_put_rdy_first (os_tsk.run);
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <rt_dispatch+0x60>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff f8f3 	bl	80023ec <rt_put_rdy_first>
      os_tsk.run->state = READY;
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <rt_dispatch+0x60>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	705a      	strb	r2, [r3, #1]
      rt_switch_req (next_TCB);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffcc 	bl	80031ac <rt_switch_req>
      /* put next task into ready list, no task switch takes place */
      next_TCB->state = READY;
      rt_put_prio (&os_rdy, next_TCB);
    }
  }
}
 8003214:	e006      	b.n	8003224 <rt_dispatch+0x54>
      os_tsk.run->state = READY;
      rt_switch_req (next_TCB);
    }
    else {
      /* put next task into ready list, no task switch takes place */
      next_TCB->state = READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	705a      	strb	r2, [r3, #1]
      rt_put_prio (&os_rdy, next_TCB);
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4803      	ldr	r0, [pc, #12]	; (800322c <rt_dispatch+0x5c>)
 8003220:	f7ff f86e 	bl	8002300 <rt_put_prio>
    }
  }
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000178 	.word	0x20000178
 8003230:	200001b4 	.word	0x200001b4

08003234 <rt_block>:


/*--------------------------- rt_block --------------------------------------*/

void rt_block (U16 timeout, U8 block_state) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	460a      	mov	r2, r1
 800323e:	80fb      	strh	r3, [r7, #6]
 8003240:	4613      	mov	r3, r2
 8003242:	717b      	strb	r3, [r7, #5]
  /* Block running task and choose next ready task.                         */
  /* "timeout" sets a time-out value or is 0xffff (=no time-out).           */
  /* "block_state" defines the appropriate task state */
  P_TCB next_TCB;

  if (timeout) {
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <rt_block+0x44>
    if (timeout < 0xFFFFU) {
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003250:	4293      	cmp	r3, r2
 8003252:	d006      	beq.n	8003262 <rt_block+0x2e>
      rt_put_dly (os_tsk.run, timeout);
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <rt_block+0x4c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f923 	bl	80024a8 <rt_put_dly>
    }
    os_tsk.run->state = block_state;
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <rt_block+0x4c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	797a      	ldrb	r2, [r7, #5]
 8003268:	705a      	strb	r2, [r3, #1]
    next_TCB = rt_get_first (&os_rdy);
 800326a:	4806      	ldr	r0, [pc, #24]	; (8003284 <rt_block+0x50>)
 800326c:	f7ff f88e 	bl	800238c <rt_get_first>
 8003270:	60f8      	str	r0, [r7, #12]
    rt_switch_req (next_TCB);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff ff9a 	bl	80031ac <rt_switch_req>
  }
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200001b4 	.word	0x200001b4
 8003284:	20000178 	.word	0x20000178

08003288 <rt_tsk_pass>:


/*--------------------------- rt_tsk_pass -----------------------------------*/

void rt_tsk_pass (void) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
  /* Allow tasks of same priority level to run cooperatively.*/
  P_TCB p_new;

  p_new = rt_get_same_rdy_prio();
 800328e:	f7ff f8c3 	bl	8002418 <rt_get_same_rdy_prio>
 8003292:	6078      	str	r0, [r7, #4]
  if (p_new != NULL) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <rt_tsk_pass+0x2c>
    rt_put_prio ((P_XCB)&os_rdy, os_tsk.run);
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <rt_tsk_pass+0x34>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	4807      	ldr	r0, [pc, #28]	; (80032c0 <rt_tsk_pass+0x38>)
 80032a2:	f7ff f82d 	bl	8002300 <rt_put_prio>
    os_tsk.run->state = READY;
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <rt_tsk_pass+0x34>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	705a      	strb	r2, [r3, #1]
    rt_switch_req (p_new);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ff7c 	bl	80031ac <rt_switch_req>
  }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200001b4 	.word	0x200001b4
 80032c0:	20000178 	.word	0x20000178

080032c4 <rt_tsk_self>:


/*--------------------------- rt_tsk_self -----------------------------------*/

OS_TID rt_tsk_self (void) {
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* Return own task identifier value. */
  if (os_tsk.run == NULL) {
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <rt_tsk_self+0x20>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <rt_tsk_self+0x10>
    return (0U);
 80032d0:	2300      	movs	r3, #0
 80032d2:	e002      	b.n	80032da <rt_tsk_self+0x16>
  }
  return ((OS_TID)os_tsk.run->task_id);
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <rt_tsk_self+0x20>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	78db      	ldrb	r3, [r3, #3]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	200001b4 	.word	0x200001b4

080032e8 <rt_tsk_prio>:


/*--------------------------- rt_tsk_prio -----------------------------------*/

OS_RESULT rt_tsk_prio (OS_TID task_id, U8 new_prio) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	70fb      	strb	r3, [r7, #3]
  /* Change execution priority of a task to "new_prio". */
  P_TCB p_task;

  if (task_id == 0U) {
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11f      	bne.n	800333a <rt_tsk_prio+0x52>
    /* Change execution priority of calling task. */
    os_tsk.run->prio      = new_prio;
 80032fa:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <rt_tsk_prio+0xbc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	709a      	strb	r2, [r3, #2]
    os_tsk.run->prio_base = new_prio;
 8003302:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <rt_tsk_prio+0xbc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800330c:	e000      	b.n	8003310 <rt_tsk_prio+0x28>
  }
  p_task = os_active_TCB[task_id-1U];
  p_task->prio      = new_prio;
  p_task->prio_base = new_prio;
  if (p_task == os_tsk.run) {
    goto run;
 800330e:	bf00      	nop

  if (task_id == 0U) {
    /* Change execution priority of calling task. */
    os_tsk.run->prio      = new_prio;
    os_tsk.run->prio_base = new_prio;
run:if (rt_rdy_prio() > new_prio) {
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <rt_tsk_prio+0xc0>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	789b      	ldrb	r3, [r3, #2]
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	429a      	cmp	r2, r3
 800331a:	d20c      	bcs.n	8003336 <rt_tsk_prio+0x4e>
      rt_put_prio (&os_rdy, os_tsk.run);
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <rt_tsk_prio+0xbc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	4821      	ldr	r0, [pc, #132]	; (80033a8 <rt_tsk_prio+0xc0>)
 8003324:	f7fe ffec 	bl	8002300 <rt_put_prio>
      os_tsk.run->state   = READY;
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <rt_tsk_prio+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	705a      	strb	r2, [r3, #1]
      rt_dispatch (NULL);
 8003330:	2000      	movs	r0, #0
 8003332:	f7ff ff4d 	bl	80031d0 <rt_dispatch>
    }
    return (OS_R_OK);
 8003336:	2300      	movs	r3, #0
 8003338:	e02f      	b.n	800339a <rt_tsk_prio+0xb2>
  }

  /* Find the task in the "os_active_TCB" array. */
  if ((task_id > os_maxtaskrun) || (os_active_TCB[task_id-1U] == NULL)) {
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <rt_tsk_prio+0xc4>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d306      	bcc.n	8003354 <rt_tsk_prio+0x6c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3b01      	subs	r3, #1
 800334a:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <rt_tsk_prio+0xc8>)
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <rt_tsk_prio+0x70>
    /* Task with "task_id" not found or not started. */
    return (OS_R_NOK);
 8003354:	23ff      	movs	r3, #255	; 0xff
 8003356:	e020      	b.n	800339a <rt_tsk_prio+0xb2>
  }
  p_task = os_active_TCB[task_id-1U];
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <rt_tsk_prio+0xc8>)
 800335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003362:	60fb      	str	r3, [r7, #12]
  p_task->prio      = new_prio;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	709a      	strb	r2, [r3, #2]
  p_task->prio_base = new_prio;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  if (p_task == os_tsk.run) {
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <rt_tsk_prio+0xbc>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d0c8      	beq.n	800330e <rt_tsk_prio+0x26>
    goto run;
  }
  rt_resort_prio (p_task);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff f86b 	bl	8002458 <rt_resort_prio>
  if (p_task->state == READY) {
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d106      	bne.n	8003398 <rt_tsk_prio+0xb0>
    /* Task enqueued in a ready list. */
    p_task = rt_get_first (&os_rdy);
 800338a:	4807      	ldr	r0, [pc, #28]	; (80033a8 <rt_tsk_prio+0xc0>)
 800338c:	f7fe fffe 	bl	800238c <rt_get_first>
 8003390:	60f8      	str	r0, [r7, #12]
    rt_dispatch (p_task);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ff1c 	bl	80031d0 <rt_dispatch>
  }
  return (OS_R_OK);
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200001b4 	.word	0x200001b4
 80033a8:	20000178 	.word	0x20000178
 80033ac:	08005fa4 	.word	0x08005fa4
 80033b0:	200030f0 	.word	0x200030f0

080033b4 <rt_tsk_create>:


/*--------------------------- rt_tsk_create ---------------------------------*/

OS_TID rt_tsk_create (FUNCP task, U32 prio_stksz, void *stk, void *argv) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  /* Start a new task declared with "task". */
  P_TCB task_context;
  U32 i;

  /* Priority 0 is reserved for idle task! */
  if ((prio_stksz & 0xFFU) == 0U) {
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <rt_tsk_create+0x1c>
    prio_stksz += 1U;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3301      	adds	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
  }
  task_context = rt_alloc_box (mp_tcb);
 80033d0:	481a      	ldr	r0, [pc, #104]	; (800343c <rt_tsk_create+0x88>)
 80033d2:	f7ff fbdf 	bl	8002b94 <rt_alloc_box>
 80033d6:	6178      	str	r0, [r7, #20]
  if (task_context == NULL) {
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <rt_tsk_create+0x2e>
    return (0U);
 80033de:	2300      	movs	r3, #0
 80033e0:	e027      	b.n	8003432 <rt_tsk_create+0x7e>
  }
  /* If "size != 0" use a private user provided stack. */
  task_context->stack      = stk;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
  task_context->priv_stack = (U16)(prio_stksz >> 8);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	84da      	strh	r2, [r3, #38]	; 0x26
  /* Pass parameter 'argv' to 'rt_init_context' */
  task_context->msg = argv;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	61da      	str	r2, [r3, #28]
  /* For 'size == 0' system allocates the user stack from the memory pool. */
  rt_init_context (task_context, (U8)(prio_stksz & 0xFFU), task);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4619      	mov	r1, r3
 8003400:	6978      	ldr	r0, [r7, #20]
 8003402:	f7ff fe8b 	bl	800311c <rt_init_context>

  /* Find a free entry in 'os_active_TCB' table. */
  i = rt_get_TID ();
 8003406:	f7ff fe65 	bl	80030d4 <rt_get_TID>
 800340a:	6138      	str	r0, [r7, #16]
  if (i == 0U) {
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <rt_tsk_create+0x62>
    return (0U);
 8003412:	2300      	movs	r3, #0
 8003414:	e00d      	b.n	8003432 <rt_tsk_create+0x7e>
  }
  os_active_TCB[i-1U] = task_context;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3b01      	subs	r3, #1
 800341a:	4909      	ldr	r1, [pc, #36]	; (8003440 <rt_tsk_create+0x8c>)
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  task_context->task_id = (U8)i;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	70da      	strb	r2, [r3, #3]
  DBG_TASK_NOTIFY(task_context, __TRUE);
  rt_dispatch (task_context);
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff fed0 	bl	80031d0 <rt_dispatch>
  return ((OS_TID)i);
 8003430:	693b      	ldr	r3, [r7, #16]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20003a6c 	.word	0x20003a6c
 8003440:	200030f0 	.word	0x200030f0

08003444 <rt_tsk_delete>:


/*--------------------------- rt_tsk_delete ---------------------------------*/

OS_RESULT rt_tsk_delete (OS_TID task_id) {
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Terminate the task identified with "task_id". */
  P_TCB  task_context;
  P_TCB  p_TCB;
  P_MUCB p_MCB, p_MCB0;

  if ((task_id == 0U) || (task_id == os_tsk.run->task_id)) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <rt_tsk_delete+0x1c>
 8003452:	4b7c      	ldr	r3, [pc, #496]	; (8003644 <rt_tsk_delete+0x200>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	78db      	ldrb	r3, [r3, #3]
 8003458:	461a      	mov	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d16a      	bne.n	8003536 <rt_tsk_delete+0xf2>
    /* Terminate itself. */
    os_tsk.run->state     = INACTIVE;
 8003460:	4b78      	ldr	r3, [pc, #480]	; (8003644 <rt_tsk_delete+0x200>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2200      	movs	r2, #0
 8003466:	705a      	strb	r2, [r3, #1]
    os_tsk.run->tsk_stack = rt_get_PSP ();
 8003468:	4b76      	ldr	r3, [pc, #472]	; (8003644 <rt_tsk_delete+0x200>)
 800346a:	681c      	ldr	r4, [r3, #0]
 800346c:	f7fd f893 	bl	8000596 <rt_get_PSP>
 8003470:	4603      	mov	r3, r0
 8003472:	62a3      	str	r3, [r4, #40]	; 0x28
    rt_stk_check ();
 8003474:	f7ff fdd4 	bl	8003020 <rt_stk_check>
    p_MCB = os_tsk.run->p_mlnk;
 8003478:	4b72      	ldr	r3, [pc, #456]	; (8003644 <rt_tsk_delete+0x200>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	617b      	str	r3, [r7, #20]
    while (p_MCB) {
 8003480:	e036      	b.n	80034f0 <rt_tsk_delete+0xac>
      /* Release mutexes owned by this task */
      if (p_MCB->p_lnk) {
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d024      	beq.n	80034d4 <rt_tsk_delete+0x90>
        /* A task is waiting for mutex. */
        p_TCB = rt_get_first ((P_XCB)p_MCB);
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7fe ff7e 	bl	800238c <rt_get_first>
 8003490:	60f8      	str	r0, [r7, #12]
#ifdef __CMSIS_RTOS
        rt_ret_val (p_TCB, 0U/*osOK*/);
 8003492:	2100      	movs	r1, #0
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7fe f9a3 	bl	80017e0 <rt_ret_val>
#else
        rt_ret_val (p_TCB, OS_R_MUT); 
#endif
        rt_rmv_dly (p_TCB);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff f902 	bl	80026a4 <rt_rmv_dly>
        p_TCB->state = READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	705a      	strb	r2, [r3, #1]
        rt_put_prio (&os_rdy, p_TCB);
 80034a6:	68f9      	ldr	r1, [r7, #12]
 80034a8:	4867      	ldr	r0, [pc, #412]	; (8003648 <rt_tsk_delete+0x204>)
 80034aa:	f7fe ff29 	bl	8002300 <rt_put_prio>
        /* A waiting task becomes the owner of this mutex. */
        p_MCB0 = p_MCB->p_mlnk;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	60bb      	str	r3, [r7, #8]
        p_MCB->level  = 1U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2201      	movs	r2, #1
 80034b8:	805a      	strh	r2, [r3, #2]
        p_MCB->owner  = p_TCB;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	609a      	str	r2, [r3, #8]
        p_MCB->p_mlnk = p_TCB->p_mlnk;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	60da      	str	r2, [r3, #12]
        p_TCB->p_mlnk = p_MCB; 
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	621a      	str	r2, [r3, #32]
        p_MCB = p_MCB0;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e00d      	b.n	80034f0 <rt_tsk_delete+0xac>
      }
      else {
        p_MCB0 = p_MCB->p_mlnk;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60bb      	str	r3, [r7, #8]
        p_MCB->level  = 0U;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2200      	movs	r2, #0
 80034de:	805a      	strh	r2, [r3, #2]
        p_MCB->owner  = NULL;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
        p_MCB->p_mlnk = NULL;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
        p_MCB = p_MCB0;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	617b      	str	r3, [r7, #20]
    /* Terminate itself. */
    os_tsk.run->state     = INACTIVE;
    os_tsk.run->tsk_stack = rt_get_PSP ();
    rt_stk_check ();
    p_MCB = os_tsk.run->p_mlnk;
    while (p_MCB) {
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1c5      	bne.n	8003482 <rt_tsk_delete+0x3e>
        p_MCB->owner  = NULL;
        p_MCB->p_mlnk = NULL;
        p_MCB = p_MCB0;
      }
    }
    os_active_TCB[os_tsk.run->task_id-1U] = NULL;
 80034f6:	4b53      	ldr	r3, [pc, #332]	; (8003644 <rt_tsk_delete+0x200>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	78db      	ldrb	r3, [r3, #3]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	4a53      	ldr	r2, [pc, #332]	; (800364c <rt_tsk_delete+0x208>)
 8003500:	2100      	movs	r1, #0
 8003502:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rt_free_box (mp_stk, os_tsk.run->stack);
 8003506:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <rt_tsk_delete+0x200>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4619      	mov	r1, r3
 800350e:	4850      	ldr	r0, [pc, #320]	; (8003650 <rt_tsk_delete+0x20c>)
 8003510:	f7ff fb62 	bl	8002bd8 <rt_free_box>
    os_tsk.run->stack = NULL;
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <rt_tsk_delete+0x200>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2200      	movs	r2, #0
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
    DBG_TASK_NOTIFY(os_tsk.run, __FALSE);
    rt_free_box (mp_tcb, os_tsk.run);
 800351c:	4b49      	ldr	r3, [pc, #292]	; (8003644 <rt_tsk_delete+0x200>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	484c      	ldr	r0, [pc, #304]	; (8003654 <rt_tsk_delete+0x210>)
 8003524:	f7ff fb58 	bl	8002bd8 <rt_free_box>
    os_tsk.run = NULL;
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <rt_tsk_delete+0x200>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
    rt_dispatch (NULL);
 800352e:	2000      	movs	r0, #0
 8003530:	f7ff fe4e 	bl	80031d0 <rt_dispatch>
 8003534:	e080      	b.n	8003638 <rt_tsk_delete+0x1f4>
    /* The program should never come to this point. */
  }
  else {
    /* Find the task in the "os_active_TCB" array. */
    if ((task_id > os_maxtaskrun) || (os_active_TCB[task_id-1U] == NULL)) {
 8003536:	4b48      	ldr	r3, [pc, #288]	; (8003658 <rt_tsk_delete+0x214>)
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d306      	bcc.n	8003550 <rt_tsk_delete+0x10c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3b01      	subs	r3, #1
 8003546:	4a41      	ldr	r2, [pc, #260]	; (800364c <rt_tsk_delete+0x208>)
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <rt_tsk_delete+0x110>
      /* Task with "task_id" not found or not started. */
      return (OS_R_NOK);
 8003550:	23ff      	movs	r3, #255	; 0xff
 8003552:	e072      	b.n	800363a <rt_tsk_delete+0x1f6>
    }
    task_context = os_active_TCB[task_id-1U];
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	4a3c      	ldr	r2, [pc, #240]	; (800364c <rt_tsk_delete+0x208>)
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	613b      	str	r3, [r7, #16]
    rt_rmv_list (task_context);
 8003560:	6938      	ldr	r0, [r7, #16]
 8003562:	f7ff f86b 	bl	800263c <rt_rmv_list>
    rt_rmv_dly (task_context);
 8003566:	6938      	ldr	r0, [r7, #16]
 8003568:	f7ff f89c 	bl	80026a4 <rt_rmv_dly>
    p_MCB = task_context->p_mlnk;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	617b      	str	r3, [r7, #20]
    while (p_MCB) {
 8003572:	e036      	b.n	80035e2 <rt_tsk_delete+0x19e>
      /* Release mutexes owned by this task */
      if (p_MCB->p_lnk) {
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d024      	beq.n	80035c6 <rt_tsk_delete+0x182>
        /* A task is waiting for mutex. */
        p_TCB = rt_get_first ((P_XCB)p_MCB);
 800357c:	6978      	ldr	r0, [r7, #20]
 800357e:	f7fe ff05 	bl	800238c <rt_get_first>
 8003582:	60f8      	str	r0, [r7, #12]
#ifdef __CMSIS_RTOS
        rt_ret_val (p_TCB, 0U/*osOK*/);
 8003584:	2100      	movs	r1, #0
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7fe f92a 	bl	80017e0 <rt_ret_val>
#else
        rt_ret_val (p_TCB, OS_R_MUT); 
#endif
        rt_rmv_dly (p_TCB);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff f889 	bl	80026a4 <rt_rmv_dly>
        p_TCB->state = READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	705a      	strb	r2, [r3, #1]
        rt_put_prio (&os_rdy, p_TCB);
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	482b      	ldr	r0, [pc, #172]	; (8003648 <rt_tsk_delete+0x204>)
 800359c:	f7fe feb0 	bl	8002300 <rt_put_prio>
        /* A waiting task becomes the owner of this mutex. */
        p_MCB0 = p_MCB->p_mlnk;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60bb      	str	r3, [r7, #8]
        p_MCB->level  = 1U;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2201      	movs	r2, #1
 80035aa:	805a      	strh	r2, [r3, #2]
        p_MCB->owner  = p_TCB;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
        p_MCB->p_mlnk = p_TCB->p_mlnk;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1a      	ldr	r2, [r3, #32]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	60da      	str	r2, [r3, #12]
        p_TCB->p_mlnk = p_MCB; 
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	621a      	str	r2, [r3, #32]
        p_MCB = p_MCB0;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e00d      	b.n	80035e2 <rt_tsk_delete+0x19e>
      }
      else {
        p_MCB0 = p_MCB->p_mlnk;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	60bb      	str	r3, [r7, #8]
        p_MCB->level  = 0U;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	805a      	strh	r2, [r3, #2]
        p_MCB->owner  = NULL;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
        p_MCB->p_mlnk = NULL;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2200      	movs	r2, #0
 80035dc:	60da      	str	r2, [r3, #12]
        p_MCB = p_MCB0;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	617b      	str	r3, [r7, #20]
    }
    task_context = os_active_TCB[task_id-1U];
    rt_rmv_list (task_context);
    rt_rmv_dly (task_context);
    p_MCB = task_context->p_mlnk;
    while (p_MCB) {
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1c5      	bne.n	8003574 <rt_tsk_delete+0x130>
        p_MCB->owner  = NULL;
        p_MCB->p_mlnk = NULL;
        p_MCB = p_MCB0;
      }
    }
    os_active_TCB[task_id-1U] = NULL;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a17      	ldr	r2, [pc, #92]	; (800364c <rt_tsk_delete+0x208>)
 80035ee:	2100      	movs	r1, #0
 80035f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rt_free_box (mp_stk, task_context->stack);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4619      	mov	r1, r3
 80035fa:	4815      	ldr	r0, [pc, #84]	; (8003650 <rt_tsk_delete+0x20c>)
 80035fc:	f7ff faec 	bl	8002bd8 <rt_free_box>
    task_context->stack = NULL;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2200      	movs	r2, #0
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
    DBG_TASK_NOTIFY(task_context, __FALSE);
    rt_free_box (mp_tcb, task_context);
 8003606:	6939      	ldr	r1, [r7, #16]
 8003608:	4812      	ldr	r0, [pc, #72]	; (8003654 <rt_tsk_delete+0x210>)
 800360a:	f7ff fae5 	bl	8002bd8 <rt_free_box>
    if (rt_rdy_prio() > os_tsk.run->prio) {
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <rt_tsk_delete+0x204>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	789a      	ldrb	r2, [r3, #2]
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <rt_tsk_delete+0x200>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	789b      	ldrb	r3, [r3, #2]
 800361a:	429a      	cmp	r2, r3
 800361c:	d90c      	bls.n	8003638 <rt_tsk_delete+0x1f4>
      /* Ready task has higher priority than running task. */
      os_tsk.run->state = READY;
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <rt_tsk_delete+0x200>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	705a      	strb	r2, [r3, #1]
      rt_put_prio (&os_rdy, os_tsk.run);
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <rt_tsk_delete+0x200>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4619      	mov	r1, r3
 800362c:	4806      	ldr	r0, [pc, #24]	; (8003648 <rt_tsk_delete+0x204>)
 800362e:	f7fe fe67 	bl	8002300 <rt_put_prio>
      rt_dispatch (NULL);
 8003632:	2000      	movs	r0, #0
 8003634:	f7ff fdcc 	bl	80031d0 <rt_dispatch>
    }
  }
  return (OS_R_OK);
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	bd90      	pop	{r4, r7, pc}
 8003642:	bf00      	nop
 8003644:	200001b4 	.word	0x200001b4
 8003648:	20000178 	.word	0x20000178
 800364c:	200030f0 	.word	0x200030f0
 8003650:	20000200 	.word	0x20000200
 8003654:	20003a6c 	.word	0x20003a6c
 8003658:	08005fa4 	.word	0x08005fa4

0800365c <rt_sys_init>:


/*--------------------------- rt_sys_init -----------------------------------*/

#ifdef __CMSIS_RTOS
void rt_sys_init (void) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
  U32 i;

  DBG_INIT();

  /* Initialize dynamic memory and task TCB pointers to NULL. */
  for (i = 0U; i < os_maxtaskrun; i++) {
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	e007      	b.n	8003678 <rt_sys_init+0x1c>
    os_active_TCB[i] = NULL;
 8003668:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <rt_sys_init+0xc4>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2100      	movs	r1, #0
 800366e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  U32 i;

  DBG_INIT();

  /* Initialize dynamic memory and task TCB pointers to NULL. */
  for (i = 0U; i < os_maxtaskrun; i++) {
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3301      	adds	r3, #1
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <rt_sys_init+0xc8>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	d8f1      	bhi.n	8003668 <rt_sys_init+0xc>
    os_active_TCB[i] = NULL;
  }
  rt_init_box (mp_tcb, (U32)mp_tcb_size, sizeof(struct OS_TCB));
 8003684:	4b28      	ldr	r3, [pc, #160]	; (8003728 <rt_sys_init+0xcc>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	2234      	movs	r2, #52	; 0x34
 800368a:	4619      	mov	r1, r3
 800368c:	4827      	ldr	r0, [pc, #156]	; (800372c <rt_sys_init+0xd0>)
 800368e:	f7ff fa2b 	bl	8002ae8 <_init_box>
  rt_init_box (mp_stk, mp_stk_size, BOX_ALIGN_8 | (U16)(os_stackinfo));
 8003692:	4b27      	ldr	r3, [pc, #156]	; (8003730 <rt_sys_init+0xd4>)
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <rt_sys_init+0xd8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036a0:	461a      	mov	r2, r3
 80036a2:	4825      	ldr	r0, [pc, #148]	; (8003738 <rt_sys_init+0xdc>)
 80036a4:	f7ff fa20 	bl	8002ae8 <_init_box>
  rt_init_box ((U32 *)m_tmr, (U32)mp_tmr_size, sizeof(struct OS_TMR));
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <rt_sys_init+0xe0>)
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <rt_sys_init+0xe4>)
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	2208      	movs	r2, #8
 80036b2:	4619      	mov	r1, r3
 80036b4:	f7ff fa18 	bl	8002ae8 <_init_box>

  /* Set up TCB of idle demon */
  os_idle_TCB.task_id    = 255U;
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <rt_sys_init+0xe8>)
 80036ba:	22ff      	movs	r2, #255	; 0xff
 80036bc:	70da      	strb	r2, [r3, #3]
  os_idle_TCB.priv_stack = 0U;
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <rt_sys_init+0xe8>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	84da      	strh	r2, [r3, #38]	; 0x26
  rt_init_context (&os_idle_TCB, 0U, os_idle_demon);
 80036c4:	4a20      	ldr	r2, [pc, #128]	; (8003748 <rt_sys_init+0xec>)
 80036c6:	2100      	movs	r1, #0
 80036c8:	481e      	ldr	r0, [pc, #120]	; (8003744 <rt_sys_init+0xe8>)
 80036ca:	f7ff fd27 	bl	800311c <rt_init_context>

  /* Set up ready list: initially empty */
  os_rdy.cb_type = HCB;
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <rt_sys_init+0xf0>)
 80036d0:	2204      	movs	r2, #4
 80036d2:	701a      	strb	r2, [r3, #0]
  os_rdy.p_lnk   = NULL;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <rt_sys_init+0xf0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	605a      	str	r2, [r3, #4]
  /* Set up delay list: initially empty */
  os_dly.cb_type = HCB;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <rt_sys_init+0xf4>)
 80036dc:	2204      	movs	r2, #4
 80036de:	701a      	strb	r2, [r3, #0]
  os_dly.p_dlnk  = NULL;
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <rt_sys_init+0xf4>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	60da      	str	r2, [r3, #12]
  os_dly.p_blnk  = NULL;
 80036e6:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <rt_sys_init+0xf4>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
  os_dly.delta_time = 0U;
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <rt_sys_init+0xf4>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	829a      	strh	r2, [r3, #20]
  /* Fix SP and system variables to assume idle task is running */
  /* Transform main program into idle task by assuming idle TCB */
#ifndef __CMSIS_RTOS
  rt_set_PSP (os_idle_TCB.tsk_stack+32U);
#endif
  os_tsk.run = &os_idle_TCB;
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <rt_sys_init+0xf8>)
 80036f4:	4a13      	ldr	r2, [pc, #76]	; (8003744 <rt_sys_init+0xe8>)
 80036f6:	601a      	str	r2, [r3, #0]
  os_tsk.run->state = RUNNING;
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <rt_sys_init+0xf8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2202      	movs	r2, #2
 80036fe:	705a      	strb	r2, [r3, #1]

  /* Initialize ps queue */
  os_psq->first = 0U;
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <rt_sys_init+0xfc>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
  os_psq->last  = 0U;
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <rt_sys_init+0xfc>)
 8003708:	2200      	movs	r2, #0
 800370a:	705a      	strb	r2, [r3, #1]
  os_psq->size  = os_fifo_size;
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <rt_sys_init+0xfc>)
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <rt_sys_init+0x100>)
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	70da      	strb	r2, [r3, #3]

  rt_init_robin ();
 8003714:	f7ff fb38 	bl	8002d88 <rt_init_robin>
  }

  /* Start up first user task before entering the endless loop */
  rt_tsk_create (first_task, prio_stksz, stk, NULL);
#endif
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200030f0 	.word	0x200030f0
 8003724:	08005fa4 	.word	0x08005fa4
 8003728:	08005fbc 	.word	0x08005fbc
 800372c:	20003a6c 	.word	0x20003a6c
 8003730:	08005fc0 	.word	0x08005fc0
 8003734:	08005fa8 	.word	0x08005fa8
 8003738:	20000200 	.word	0x20000200
 800373c:	2000008c 	.word	0x2000008c
 8003740:	08005fe4 	.word	0x08005fe4
 8003744:	200001bc 	.word	0x200001bc
 8003748:	080038e5 	.word	0x080038e5
 800374c:	20000178 	.word	0x20000178
 8003750:	20000190 	.word	0x20000190
 8003754:	200001b4 	.word	0x200001b4
 8003758:	200039d0 	.word	0x200039d0
 800375c:	08005fc8 	.word	0x08005fc8

08003760 <rt_sys_start>:


/*--------------------------- rt_sys_start ----------------------------------*/

#ifdef __CMSIS_RTOS
void rt_sys_start (void) {
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Start system */

  /* Initialize SVC and PendSV */
  rt_svc_init ();
 8003764:	f7ff fc76 	bl	8003054 <rt_svc_init>

  /* Initialize and start system clock timer */
  os_tick_irqn = os_tick_init ();
 8003768:	f7ff fc22 	bl	8002fb0 <os_tick_init>
 800376c:	4602      	mov	r2, r0
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <rt_sys_start+0x50>)
 8003770:	601a      	str	r2, [r3, #0]
  if (os_tick_irqn >= 0) {
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <rt_sys_start+0x50>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	db17      	blt.n	80037aa <rt_sys_start+0x4a>
    OS_X_INIT((U32)os_tick_irqn);
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <rt_sys_start+0x50>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8003782:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003786:	22ff      	movs	r2, #255	; 0xff
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <rt_sys_start+0x50>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8003796:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800379a:	4a05      	ldr	r2, [pc, #20]	; (80037b0 <rt_sys_start+0x50>)
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	f002 021f 	and.w	r2, r2, #31
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f202 	lsl.w	r2, r1, r2
 80037a8:	601a      	str	r2, [r3, #0]
  }
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200001b0 	.word	0x200001b0

080037b4 <rt_dly_wait>:
}


/*--------------------------- rt_dly_wait -----------------------------------*/

void rt_dly_wait (U16 delay_time) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  /* Delay task by "delay_time" */
  rt_block (delay_time, WAIT_DLY);
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2103      	movs	r1, #3
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fd36 	bl	8003234 <rt_block>
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b08b      	sub	sp, #44	; 0x2c
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80037da:	edd7 7a01 	vldr	s15, [r7, #4]
 80037de:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80038d8 <arm_sin_f32+0x108>
 80037e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80037ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80037ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037f2:	ee17 3a90 	vmov	r3, s15
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if(x < 0.0f)
 80037f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80037fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003804:	d502      	bpl.n	800380c <arm_sin_f32+0x3c>
  {
    n--;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	3b01      	subs	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003816:	ed97 7a07 	vldr	s14, [r7, #28]
 800381a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8003822:	edd7 7a07 	vldr	s15, [r7, #28]
 8003826:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80038dc <arm_sin_f32+0x10c>
 800382a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382e:	edc7 7a08 	vstr	s15, [r7, #32]
  if (findex >= 512.0f) {
 8003832:	edd7 7a08 	vldr	s15, [r7, #32]
 8003836:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80038dc <arm_sin_f32+0x10c>
 800383a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	db07      	blt.n	8003854 <arm_sin_f32+0x84>
    findex -= 512.0f;
 8003844:	edd7 7a08 	vldr	s15, [r7, #32]
 8003848:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80038dc <arm_sin_f32+0x10c>
 800384c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003850:	edc7 7a08 	vstr	s15, [r7, #32]
  }

  index = ((uint16_t)findex) & 0x1ff;
 8003854:	edd7 7a08 	vldr	s15, [r7, #32]
 8003858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385c:	edc7 7a00 	vstr	s15, [r7]
 8003860:	883b      	ldrh	r3, [r7, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800386a:	8b7b      	ldrh	r3, [r7, #26]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003874:	ed97 7a08 	vldr	s14, [r7, #32]
 8003878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800387c:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8003880:	8b7b      	ldrh	r3, [r7, #26]
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <arm_sin_f32+0x110>)
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800388c:	8b7b      	ldrh	r3, [r7, #26]
 800388e:	3301      	adds	r3, #1
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <arm_sin_f32+0x110>)
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800389a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800389e:	edd7 7a05 	vldr	s15, [r7, #20]
 80038a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ae:	edd7 6a05 	vldr	s13, [r7, #20]
 80038b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80038b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038be:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	ee07 3a90 	vmov	s15, r3
}
 80038c8:	eeb0 0a67 	vmov.f32	s0, s15
 80038cc:	372c      	adds	r7, #44	; 0x2c
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	3e22f983 	.word	0x3e22f983
 80038dc:	44000000 	.word	0x44000000
 80038e0:	080057a0 	.word	0x080057a0

080038e4 <os_idle_demon>:
 *---------------------------------------------------------------------------*/
 
/*--------------------------- os_idle_demon ---------------------------------*/

/// \brief The idle demon is running when no other thread is ready to run
void os_idle_demon (void) {
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
 
  for (;;) {
    /* HERE: include optional user code to be executed when no thread runs.*/
  }
 80038e8:	e7fe      	b.n	80038e8 <os_idle_demon+0x4>
 80038ea:	bf00      	nop

080038ec <os_error>:
 
extern osThreadId svcThreadGetId (void);
 
/// \brief Called when a runtime error is detected
/// \param[in]   error_code   actual error code that has been detected
void os_error (uint32_t error_code) {
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 
  /* HERE: include optional code to be executed on runtime error. */
  switch (error_code) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d80f      	bhi.n	800391c <os_error+0x30>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <os_error+0x18>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003915 	.word	0x08003915
 8003908:	08003917 	.word	0x08003917
 800390c:	08003919 	.word	0x08003919
 8003910:	0800391b 	.word	0x0800391b
    case OS_ERROR_STACK_OVF:
      /* Stack overflow detected for the currently running task. */
      /* Thread can be identified by calling svcThreadGetId().   */
      break;
 8003914:	e003      	b.n	800391e <os_error+0x32>
    case OS_ERROR_FIFO_OVF:
      /* ISR FIFO Queue buffer overflow detected. */
      break;
 8003916:	e002      	b.n	800391e <os_error+0x32>
    case OS_ERROR_MBX_OVF:
      /* Mailbox overflow detected. */
      break;
 8003918:	e001      	b.n	800391e <os_error+0x32>
    case OS_ERROR_TIMER_OVF:
      /* User Timer Callback Queue overflow detected. */
      break;
 800391a:	e000      	b.n	800391e <os_error+0x32>
    default:
      break;
 800391c:	bf00      	nop
  }
  for (;;);
 800391e:	e7fe      	b.n	800391e <os_error+0x32>

08003920 <NMI_Handler>:

/*void SysTick_Handler(void) {
  systick++;
}*/

void NMI_Handler(void) {for(;;);}
 8003920:	e7fe      	b.n	8003920 <NMI_Handler>
 8003922:	bf00      	nop

08003924 <HardFault_Handler>:
void HardFault_Handler(void) {
    __asm volatile
 8003924:	f01e 0f04 	tst.w	lr, #4
 8003928:	bf0c      	ite	eq
 800392a:	f3ef 8008 	mrseq	r0, MSP
 800392e:	f3ef 8009 	mrsne	r0, PSP
 8003932:	6981      	ldr	r1, [r0, #24]
 8003934:	4a00      	ldr	r2, [pc, #0]	; (8003938 <handler2_address_const>)
 8003936:	4710      	bx	r2

08003938 <handler2_address_const>:
 8003938:	08003a4d 	.word	0x08003a4d
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop

08003940 <MemManage_Handler>:
        " ldr r2, handler2_address_const                            \n"
        " bx r2                                                     \n"
        " handler2_address_const: .word prvGetRegistersFromStack    \n"
    );
}
void MemManage_Handler(void) {for(;;);}
 8003940:	e7fe      	b.n	8003940 <MemManage_Handler>
 8003942:	bf00      	nop

08003944 <BusFault_Handler>:
void BusFault_Handler(void) {for(;;);}
 8003944:	e7fe      	b.n	8003944 <BusFault_Handler>
 8003946:	bf00      	nop

08003948 <UsageFault_Handler>:
void UsageFault_Handler(void) {for(;;);}
 8003948:	e7fe      	b.n	8003948 <UsageFault_Handler>
 800394a:	bf00      	nop

0800394c <DebugMon_Handler>:
//void SVC_Handler(void) {for(;;);}
void DebugMon_Handler(void) {for(;;);}
 800394c:	e7fe      	b.n	800394c <DebugMon_Handler>
 800394e:	bf00      	nop

08003950 <WWDG_IRQHandler>:
//void PendSV_Handler(void) {for(;;);}
void WWDG_IRQHandler(void) {for(;;);}
 8003950:	e7fe      	b.n	8003950 <WWDG_IRQHandler>
 8003952:	bf00      	nop

08003954 <PVD_IRQHandler>:
void PVD_IRQHandler(void) {for(;;);}
 8003954:	e7fe      	b.n	8003954 <PVD_IRQHandler>
 8003956:	bf00      	nop

08003958 <TAMPER_STAMP_IRQHandler>:
void TAMPER_STAMP_IRQHandler(void) {for(;;);}
 8003958:	e7fe      	b.n	8003958 <TAMPER_STAMP_IRQHandler>
 800395a:	bf00      	nop

0800395c <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void) {for(;;);}
 800395c:	e7fe      	b.n	800395c <RTC_WKUP_IRQHandler>
 800395e:	bf00      	nop

08003960 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void) {for(;;);}
 8003960:	e7fe      	b.n	8003960 <FLASH_IRQHandler>
 8003962:	bf00      	nop

08003964 <RCC_IRQHandler>:
void RCC_IRQHandler(void) {for(;;);}
 8003964:	e7fe      	b.n	8003964 <RCC_IRQHandler>
 8003966:	bf00      	nop

08003968 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void) {for(;;);}
 8003968:	e7fe      	b.n	8003968 <EXTI0_IRQHandler>
 800396a:	bf00      	nop

0800396c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void) {for(;;);}
 800396c:	e7fe      	b.n	800396c <EXTI1_IRQHandler>
 800396e:	bf00      	nop

08003970 <EXTI2_TS_IRQHandler>:
void EXTI2_TS_IRQHandler(void) {for(;;);}
 8003970:	e7fe      	b.n	8003970 <EXTI2_TS_IRQHandler>
 8003972:	bf00      	nop

08003974 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void) {for(;;);}
 8003974:	e7fe      	b.n	8003974 <EXTI3_IRQHandler>
 8003976:	bf00      	nop

08003978 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void) {for(;;);}
 8003978:	e7fe      	b.n	8003978 <EXTI4_IRQHandler>
 800397a:	bf00      	nop

0800397c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void) {for(;;);}
 800397c:	e7fe      	b.n	800397c <DMA1_Channel1_IRQHandler>
 800397e:	bf00      	nop

08003980 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void) {for(;;);}
 8003980:	e7fe      	b.n	8003980 <DMA1_Channel2_IRQHandler>
 8003982:	bf00      	nop

08003984 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void) {for(;;);}
 8003984:	e7fe      	b.n	8003984 <DMA1_Channel3_IRQHandler>
 8003986:	bf00      	nop

08003988 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void) {for(;;);}
 8003988:	e7fe      	b.n	8003988 <DMA1_Channel4_IRQHandler>
 800398a:	bf00      	nop

0800398c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void) {for(;;);}
 800398c:	e7fe      	b.n	800398c <DMA1_Channel5_IRQHandler>
 800398e:	bf00      	nop

08003990 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void) {for(;;);}
 8003990:	e7fe      	b.n	8003990 <DMA1_Channel6_IRQHandler>
 8003992:	bf00      	nop

08003994 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void) {for(;;);}
 8003994:	e7fe      	b.n	8003994 <ADC1_2_IRQHandler>
 8003996:	bf00      	nop

08003998 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void) {for(;;);}
 8003998:	e7fe      	b.n	8003998 <USB_HP_CAN1_TX_IRQHandler>
 800399a:	bf00      	nop

0800399c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void) {for(;;);}
 800399c:	e7fe      	b.n	800399c <USB_LP_CAN1_RX0_IRQHandler>
 800399e:	bf00      	nop

080039a0 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void) {for(;;);}
 80039a0:	e7fe      	b.n	80039a0 <CAN1_RX1_IRQHandler>
 80039a2:	bf00      	nop

080039a4 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void) {for(;;);}
 80039a4:	e7fe      	b.n	80039a4 <CAN1_SCE_IRQHandler>
 80039a6:	bf00      	nop

080039a8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void) {for(;;);}
 80039a8:	e7fe      	b.n	80039a8 <EXTI9_5_IRQHandler>
 80039aa:	bf00      	nop

080039ac <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void) {for(;;);}
 80039ac:	e7fe      	b.n	80039ac <TIM1_BRK_TIM15_IRQHandler>
 80039ae:	bf00      	nop

080039b0 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void) {for(;;);}
 80039b0:	e7fe      	b.n	80039b0 <TIM1_UP_TIM16_IRQHandler>
 80039b2:	bf00      	nop

080039b4 <TIM1_TRG_COM_TIM17_IRQHandler>:
void TIM1_TRG_COM_TIM17_IRQHandler(void) {for(;;);}
 80039b4:	e7fe      	b.n	80039b4 <TIM1_TRG_COM_TIM17_IRQHandler>
 80039b6:	bf00      	nop

080039b8 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void) {for(;;);}
 80039b8:	e7fe      	b.n	80039b8 <TIM1_CC_IRQHandler>
 80039ba:	bf00      	nop

080039bc <TIM4_IRQHandler>:
void TIM4_IRQHandler(void) {for(;;);}
 80039bc:	e7fe      	b.n	80039bc <TIM4_IRQHandler>
 80039be:	bf00      	nop

080039c0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void) {for(;;);}
 80039c0:	e7fe      	b.n	80039c0 <TIM3_IRQHandler>
 80039c2:	bf00      	nop

080039c4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void) { for(;;); }
 80039c4:	e7fe      	b.n	80039c4 <TIM2_IRQHandler>
 80039c6:	bf00      	nop

080039c8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void) {for(;;);}
 80039c8:	e7fe      	b.n	80039c8 <I2C1_EV_IRQHandler>
 80039ca:	bf00      	nop

080039cc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void) {for(;;);}
 80039cc:	e7fe      	b.n	80039cc <I2C1_ER_IRQHandler>
 80039ce:	bf00      	nop

080039d0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void) {for(;;);}
 80039d0:	e7fe      	b.n	80039d0 <I2C2_EV_IRQHandler>
 80039d2:	bf00      	nop

080039d4 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void) {for(;;);}
 80039d4:	e7fe      	b.n	80039d4 <I2C2_ER_IRQHandler>
 80039d6:	bf00      	nop

080039d8 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void) {for(;;);}
 80039d8:	e7fe      	b.n	80039d8 <SPI1_IRQHandler>
 80039da:	bf00      	nop

080039dc <SPI2_IRQHandler>:
void SPI2_IRQHandler(void) {for(;;);}
 80039dc:	e7fe      	b.n	80039dc <SPI2_IRQHandler>
 80039de:	bf00      	nop

080039e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {for(;;);}
 80039e0:	e7fe      	b.n	80039e0 <USART2_IRQHandler>
 80039e2:	bf00      	nop

080039e4 <USART3_IRQHandler>:
void USART3_IRQHandler(void) {for(;;);}
 80039e4:	e7fe      	b.n	80039e4 <USART3_IRQHandler>
 80039e6:	bf00      	nop

080039e8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void) {for(;;);}
 80039e8:	e7fe      	b.n	80039e8 <EXTI15_10_IRQHandler>
 80039ea:	bf00      	nop

080039ec <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void) {for(;;);}
 80039ec:	e7fe      	b.n	80039ec <RTC_Alarm_IRQHandler>
 80039ee:	bf00      	nop

080039f0 <USBWakeUp_IRQHandler>:
void USBWakeUp_IRQHandler(void) {for(;;);}
 80039f0:	e7fe      	b.n	80039f0 <USBWakeUp_IRQHandler>
 80039f2:	bf00      	nop

080039f4 <TIM8_BRK_IRQHandler>:
void TIM8_BRK_IRQHandler(void) {for(;;);}
 80039f4:	e7fe      	b.n	80039f4 <TIM8_BRK_IRQHandler>
 80039f6:	bf00      	nop

080039f8 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void) {for(;;);}
 80039f8:	e7fe      	b.n	80039f8 <TIM8_UP_IRQHandler>
 80039fa:	bf00      	nop

080039fc <TIM8_TRG_COM_IRQHandler>:
void TIM8_TRG_COM_IRQHandler(void) {for(;;);}
 80039fc:	e7fe      	b.n	80039fc <TIM8_TRG_COM_IRQHandler>
 80039fe:	bf00      	nop

08003a00 <TIM8_CC_IRQHandler>:
void TIM8_CC_IRQHandler(void) {for(;;);}
 8003a00:	e7fe      	b.n	8003a00 <TIM8_CC_IRQHandler>
 8003a02:	bf00      	nop

08003a04 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void) {for(;;);}
 8003a04:	e7fe      	b.n	8003a04 <ADC3_IRQHandler>
 8003a06:	bf00      	nop

08003a08 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void) {for(;;);}
 8003a08:	e7fe      	b.n	8003a08 <SPI3_IRQHandler>
 8003a0a:	bf00      	nop

08003a0c <UART4_IRQHandler>:
void UART4_IRQHandler(void) {for(;;);}
 8003a0c:	e7fe      	b.n	8003a0c <UART4_IRQHandler>
 8003a0e:	bf00      	nop

08003a10 <UART5_IRQHandler>:
void UART5_IRQHandler(void) {for(;;);}
 8003a10:	e7fe      	b.n	8003a10 <UART5_IRQHandler>
 8003a12:	bf00      	nop

08003a14 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void) {for(;;);}
 8003a14:	e7fe      	b.n	8003a14 <TIM7_IRQHandler>
 8003a16:	bf00      	nop

08003a18 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void) {for(;;);}
 8003a18:	e7fe      	b.n	8003a18 <DMA2_Channel1_IRQHandler>
 8003a1a:	bf00      	nop

08003a1c <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void) {for(;;);}
 8003a1c:	e7fe      	b.n	8003a1c <DMA2_Channel2_IRQHandler>
 8003a1e:	bf00      	nop

08003a20 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void) {for(;;);}
 8003a20:	e7fe      	b.n	8003a20 <DMA2_Channel3_IRQHandler>
 8003a22:	bf00      	nop

08003a24 <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void) {for(;;);}
 8003a24:	e7fe      	b.n	8003a24 <DMA2_Channel4_IRQHandler>
 8003a26:	bf00      	nop

08003a28 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void) {for(;;);}
 8003a28:	e7fe      	b.n	8003a28 <DMA2_Channel5_IRQHandler>
 8003a2a:	bf00      	nop

08003a2c <ADC4_IRQHandler>:
void ADC4_IRQHandler(void) {for(;;);}
 8003a2c:	e7fe      	b.n	8003a2c <ADC4_IRQHandler>
 8003a2e:	bf00      	nop

08003a30 <COMP1_2_3_IRQHandler>:
void COMP1_2_3_IRQHandler(void) {for(;;);}
 8003a30:	e7fe      	b.n	8003a30 <COMP1_2_3_IRQHandler>
 8003a32:	bf00      	nop

08003a34 <COMP4_5_6_IRQHandler>:
void COMP4_5_6_IRQHandler(void) {for(;;);}
 8003a34:	e7fe      	b.n	8003a34 <COMP4_5_6_IRQHandler>
 8003a36:	bf00      	nop

08003a38 <COMP7_IRQHandler>:
void COMP7_IRQHandler(void) {for(;;);}
 8003a38:	e7fe      	b.n	8003a38 <COMP7_IRQHandler>
 8003a3a:	bf00      	nop

08003a3c <USB_HP_IRQHandler>:
void USB_HP_IRQHandler(void) {for(;;);}
 8003a3c:	e7fe      	b.n	8003a3c <USB_HP_IRQHandler>
 8003a3e:	bf00      	nop

08003a40 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void) {for(;;);}
 8003a40:	e7fe      	b.n	8003a40 <USB_LP_IRQHandler>
 8003a42:	bf00      	nop

08003a44 <USBWakeUp_RMP_IRQHandler>:
void USBWakeUp_RMP_IRQHandler(void) {for(;;);}
 8003a44:	e7fe      	b.n	8003a44 <USBWakeUp_RMP_IRQHandler>
 8003a46:	bf00      	nop

08003a48 <FPU_IRQHandler>:
void FPU_IRQHandler(void) {for(;;);}
 8003a48:	e7fe      	b.n	8003a48 <FPU_IRQHandler>
 8003a4a:	bf00      	nop

08003a4c <prvGetRegistersFromStack>:
volatile uint32_t prvGetpc; /* Program counter. */
volatile uint32_t prvGetpsr;/* Program status register. */

void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
    prvGetr0  = pulFaultStackAddress[ 0 ];
 8003a4c:	490e      	ldr	r1, [pc, #56]	; (8003a88 <prvGetRegistersFromStack+0x3c>)
 8003a4e:	6803      	ldr	r3, [r0, #0]
    prvGetr1  = pulFaultStackAddress[ 1 ];
 8003a50:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <prvGetRegistersFromStack+0x40>)
    prvGetr2  = pulFaultStackAddress[ 2 ];
 8003a52:	4e0f      	ldr	r6, [pc, #60]	; (8003a90 <prvGetRegistersFromStack+0x44>)
    prvGetr3  = pulFaultStackAddress[ 3 ];
 8003a54:	4c0f      	ldr	r4, [pc, #60]	; (8003a94 <prvGetRegistersFromStack+0x48>)
    prvGetr12 = pulFaultStackAddress[ 4 ];
    prvGetlr  = pulFaultStackAddress[ 5 ];
 8003a56:	4d10      	ldr	r5, [pc, #64]	; (8003a98 <prvGetRegistersFromStack+0x4c>)
{
    prvGetr0  = pulFaultStackAddress[ 0 ];
    prvGetr1  = pulFaultStackAddress[ 1 ];
    prvGetr2  = pulFaultStackAddress[ 2 ];
    prvGetr3  = pulFaultStackAddress[ 3 ];
    prvGetr12 = pulFaultStackAddress[ 4 ];
 8003a58:	f8d0 c010 	ldr.w	ip, [r0, #16]
volatile uint32_t prvGetlr; /* Link register. */
volatile uint32_t prvGetpc; /* Program counter. */
volatile uint32_t prvGetpsr;/* Program status register. */

void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
 8003a5c:	b500      	push	{lr}
    prvGetr0  = pulFaultStackAddress[ 0 ];
 8003a5e:	600b      	str	r3, [r1, #0]
    prvGetr1  = pulFaultStackAddress[ 1 ];
 8003a60:	6843      	ldr	r3, [r0, #4]
 8003a62:	6013      	str	r3, [r2, #0]
    prvGetr2  = pulFaultStackAddress[ 2 ];
 8003a64:	6882      	ldr	r2, [r0, #8]
 8003a66:	6032      	str	r2, [r6, #0]
    prvGetr3  = pulFaultStackAddress[ 3 ];
    prvGetr12 = pulFaultStackAddress[ 4 ];
 8003a68:	f8df e038 	ldr.w	lr, [pc, #56]	; 8003aa4 <prvGetRegistersFromStack+0x58>
void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
    prvGetr0  = pulFaultStackAddress[ 0 ];
    prvGetr1  = pulFaultStackAddress[ 1 ];
    prvGetr2  = pulFaultStackAddress[ 2 ];
    prvGetr3  = pulFaultStackAddress[ 3 ];
 8003a6c:	68c2      	ldr	r2, [r0, #12]
    prvGetr12 = pulFaultStackAddress[ 4 ];
    prvGetlr  = pulFaultStackAddress[ 5 ];
    prvGetpc  = pulFaultStackAddress[ 6 ];
 8003a6e:	490b      	ldr	r1, [pc, #44]	; (8003a9c <prvGetRegistersFromStack+0x50>)
    prvGetpsr = pulFaultStackAddress[ 7 ];
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <prvGetRegistersFromStack+0x54>)
void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
    prvGetr0  = pulFaultStackAddress[ 0 ];
    prvGetr1  = pulFaultStackAddress[ 1 ];
    prvGetr2  = pulFaultStackAddress[ 2 ];
    prvGetr3  = pulFaultStackAddress[ 3 ];
 8003a72:	6022      	str	r2, [r4, #0]
    prvGetr12 = pulFaultStackAddress[ 4 ];
    prvGetlr  = pulFaultStackAddress[ 5 ];
 8003a74:	6946      	ldr	r6, [r0, #20]
    prvGetpc  = pulFaultStackAddress[ 6 ];
 8003a76:	6984      	ldr	r4, [r0, #24]
    prvGetpsr = pulFaultStackAddress[ 7 ];
 8003a78:	69c2      	ldr	r2, [r0, #28]
{
    prvGetr0  = pulFaultStackAddress[ 0 ];
    prvGetr1  = pulFaultStackAddress[ 1 ];
    prvGetr2  = pulFaultStackAddress[ 2 ];
    prvGetr3  = pulFaultStackAddress[ 3 ];
    prvGetr12 = pulFaultStackAddress[ 4 ];
 8003a7a:	f8ce c000 	str.w	ip, [lr]
    prvGetlr  = pulFaultStackAddress[ 5 ];
 8003a7e:	602e      	str	r6, [r5, #0]
    prvGetpc  = pulFaultStackAddress[ 6 ];
 8003a80:	600c      	str	r4, [r1, #0]
    prvGetpsr = pulFaultStackAddress[ 7 ];
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e7fe      	b.n	8003a84 <prvGetRegistersFromStack+0x38>
 8003a86:	bf00      	nop
 8003a88:	20003be8 	.word	0x20003be8
 8003a8c:	200039cc 	.word	0x200039cc
 8003a90:	20003a68 	.word	0x20003a68
 8003a94:	20003a58 	.word	0x20003a58
 8003a98:	200039c8 	.word	0x200039c8
 8003a9c:	200001fc 	.word	0x200001fc
 8003aa0:	20003a64 	.word	0x20003a64
 8003aa4:	200001f8 	.word	0x200001f8

08003aa8 <SystemInit>:

void SystemInit(void)
{


  RCC->CR &= ~( RCC_CR_HSEON | RCC_CR_PLLON );
 8003aa8:	495a      	ldr	r1, [pc, #360]	; (8003c14 <SystemInit+0x16c>)
 8003aaa:	680b      	ldr	r3, [r1, #0]
 8003aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab4:	600b      	str	r3, [r1, #0]
  while ( (RCC->CR & RCC_CR_PLLRDY) );
 8003ab6:	680b      	ldr	r3, [r1, #0]
 8003ab8:	4a56      	ldr	r2, [pc, #344]	; (8003c14 <SystemInit+0x16c>)
 8003aba:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003abe:	d1fa      	bne.n	8003ab6 <SystemInit+0xe>
  RCC->CIR = 0x0;
 8003ac0:	6093      	str	r3, [r2, #8]
   * APB1: 36 MHz
   * APB2: 72 MHz
   */


  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSION;
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ac8:	6013      	str	r3, [r2, #0]

  while ( !(RCC->CR & RCC_CR_HSERDY) );
 8003aca:	6811      	ldr	r1, [r2, #0]
 8003acc:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <SystemInit+0x16c>)
 8003ace:	0388      	lsls	r0, r1, #14
 8003ad0:	d5fb      	bpl.n	8003aca <SystemInit+0x22>

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1 | FLASH_ACR_LATENCY_0;
 8003ad2:	4a51      	ldr	r2, [pc, #324]	; (8003c18 <SystemInit+0x170>)
 8003ad4:	2113      	movs	r1, #19
 8003ad6:	6011      	str	r1, [r2, #0]

  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	605a      	str	r2, [r3, #4]

  /* PCLK2 = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	605a      	str	r2, [r3, #4]

  /* PCLK1 = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae6:	605a      	str	r2, [r3, #4]


  /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003aee:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1  | RCC_CFGR_PLLMULL9 | RCC_CFGR_MCO_PLL );
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	f042 62e3 	orr.w	r2, r2, #119013376	; 0x7180000
 8003af6:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000

  RCC->CFGR2 = RCC_CFGR2_PREDIV1_DIV1 ;
 8003afa:	2100      	movs	r1, #0


  /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
                                        RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1  | RCC_CFGR_PLLMULL9 | RCC_CFGR_MCO_PLL );
 8003afc:	605a      	str	r2, [r3, #4]

  RCC->CFGR2 = RCC_CFGR2_PREDIV1_DIV1 ;
 8003afe:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b06:	601a      	str	r2, [r3, #0]

  while ( !(RCC->CR & RCC_CR_PLLRDY) );
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	4a42      	ldr	r2, [pc, #264]	; (8003c14 <SystemInit+0x16c>)
 8003b0c:	0189      	lsls	r1, r1, #6
 8003b0e:	d5fb      	bpl.n	8003b08 <SystemInit+0x60>
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN ;
 8003b10:	6993      	ldr	r3, [r2, #24]
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6193      	str	r3, [r2, #24]

  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003b18:	6853      	ldr	r3, [r2, #4]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8003b20:	6853      	ldr	r3, [r2, #4]
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	6053      	str	r3, [r2, #4]

  while (! (RCC->CFGR & RCC_CFGR_SWS_PLL));
 8003b28:	6853      	ldr	r3, [r2, #4]
 8003b2a:	493a      	ldr	r1, [pc, #232]	; (8003c14 <SystemInit+0x16c>)
 8003b2c:	071b      	lsls	r3, r3, #28
 8003b2e:	d5fb      	bpl.n	8003b28 <SystemInit+0x80>
    for( ;; );
}


void SystemInit(void)
{
 8003b30:	b570      	push	{r4, r5, r6, lr}

  while (! (RCC->CFGR & RCC_CFGR_SWS_PLL));

  /* Configure GPIO */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;
 8003b32:	694a      	ldr	r2, [r1, #20]
  GPIOA->MODER |= GPIO_MODER_MODER7_0; 
  GPIOA->ODR |= GPIO_ODR_7;
  GPIOA->MODER |= GPIO_MODER_MODER9_0; 
  GPIOA->ODR |= GPIO_ODR_9;

  DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8003b34:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8003c30 <SystemInit+0x188>
  DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8003b38:	4e38      	ldr	r6, [pc, #224]	; (8003c1c <SystemInit+0x174>)
  DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8003b3a:	4d39      	ldr	r5, [pc, #228]	; (8003c20 <SystemInit+0x178>)
  DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 8003b3c:	4c39      	ldr	r4, [pc, #228]	; (8003c24 <SystemInit+0x17c>)
  DMA1_Channel5->CCR &= ~DMA_CCR_EN;
 8003b3e:	483a      	ldr	r0, [pc, #232]	; (8003c28 <SystemInit+0x180>)
  DMA1_Channel6->CCR &= ~DMA_CCR_EN;
 8003b40:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8003c34 <SystemInit+0x18c>

  /* Configure GPIO */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;

  GPIOA->MODER |= GPIO_MODER_MODER0_0;
 8003b44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000

  while (! (RCC->CFGR & RCC_CFGR_SWS_PLL));

  /* Configure GPIO */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;
 8003b48:	f442 22c0 	orr.w	r2, r2, #393216	; 0x60000
 8003b4c:	614a      	str	r2, [r1, #20]

  GPIOA->MODER |= GPIO_MODER_MODER0_0;
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
  GPIOA->ODR |= GPIO_ODR_0;
 8003b56:	8a9a      	ldrh	r2, [r3, #20]
 8003b58:	b292      	uxth	r2, r2
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	829a      	strh	r2, [r3, #20]

  GPIOA->MODER |= GPIO_MODER_MODER5_0;
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b66:	601a      	str	r2, [r3, #0]
  GPIOA->ODR |= GPIO_ODR_5;
 8003b68:	8a9a      	ldrh	r2, [r3, #20]
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	f042 0220 	orr.w	r2, r2, #32
 8003b70:	829a      	strh	r2, [r3, #20]


  GPIOA->MODER |= GPIO_MODER_MODER2_0;
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f042 0210 	orr.w	r2, r2, #16
 8003b78:	601a      	str	r2, [r3, #0]
  GPIOA->ODR |= GPIO_ODR_2;
 8003b7a:	8a9a      	ldrh	r2, [r3, #20]
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	f042 0204 	orr.w	r2, r2, #4
 8003b82:	829a      	strh	r2, [r3, #20]



  GPIOA->MODER |= GPIO_MODER_MODER8_0; /* MCO Output*/
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b8a:	601a      	str	r2, [r3, #0]
 
  GPIOA->MODER |= GPIO_MODER_MODER7_0; 
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b92:	601a      	str	r2, [r3, #0]
  GPIOA->ODR |= GPIO_ODR_7;
 8003b94:	8a9a      	ldrh	r2, [r3, #20]
 8003b96:	b292      	uxth	r2, r2
 8003b98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b9c:	829a      	strh	r2, [r3, #20]
  GPIOA->MODER |= GPIO_MODER_MODER9_0; 
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003ba4:	601a      	str	r2, [r3, #0]
  GPIOA->ODR |= GPIO_ODR_9;
 8003ba6:	8a9a      	ldrh	r2, [r3, #20]
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	829a      	strh	r2, [r3, #20]

  DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8003bb0:	f8de 3000 	ldr.w	r3, [lr]
  DMA1_Channel6->CCR &= ~DMA_CCR_EN;
  DMA1_Channel7->CCR &= ~DMA_CCR_EN;
  RCC->AHBENR |= RCC_AHBENR_DMA1EN; /* Enable DMA Clock */


  SCB->CPACR |= (0x3 << 10 * 2 | 0x3 << 11 * 2);
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <SystemInit+0x184>)
  GPIOA->MODER |= GPIO_MODER_MODER7_0; 
  GPIOA->ODR |= GPIO_ODR_7;
  GPIOA->MODER |= GPIO_MODER_MODER9_0; 
  GPIOA->ODR |= GPIO_ODR_9;

  DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	f8ce 3000 	str.w	r3, [lr]
  DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8003bbe:	6833      	ldr	r3, [r6, #0]
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	6033      	str	r3, [r6, #0]
  DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8003bc6:	682b      	ldr	r3, [r5, #0]
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	602b      	str	r3, [r5, #0]
  DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6023      	str	r3, [r4, #0]
  DMA1_Channel5->CCR &= ~DMA_CCR_EN;
 8003bd6:	6803      	ldr	r3, [r0, #0]
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6003      	str	r3, [r0, #0]
  DMA1_Channel6->CCR &= ~DMA_CCR_EN;
 8003bde:	f8dc 3000 	ldr.w	r3, [ip]
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	f8cc 3000 	str.w	r3, [ip]
  DMA1_Channel7->CCR &= ~DMA_CCR_EN;
 8003bea:	f8de 3078 	ldr.w	r3, [lr, #120]	; 0x78
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	f8ce 3078 	str.w	r3, [lr, #120]	; 0x78
  RCC->AHBENR |= RCC_AHBENR_DMA1EN; /* Enable DMA Clock */
 8003bf6:	694b      	ldr	r3, [r1, #20]
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	614b      	str	r3, [r1, #20]


  SCB->CPACR |= (0x3 << 10 * 2 | 0x3 << 11 * 2);
 8003bfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  usart1_init();

}
 8003c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  RCC->AHBENR |= RCC_AHBENR_DMA1EN; /* Enable DMA Clock */


  SCB->CPACR |= (0x3 << 10 * 2 | 0x3 << 11 * 2);

  usart1_init();
 8003c0e:	f000 b9f9 	b.w	8004004 <usart1_init>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40022000 	.word	0x40022000
 8003c1c:	4002001c 	.word	0x4002001c
 8003c20:	40020030 	.word	0x40020030
 8003c24:	40020044 	.word	0x40020044
 8003c28:	40020058 	.word	0x40020058
 8003c2c:	e000ed00 	.word	0xe000ed00
 8003c30:	40020008 	.word	0x40020008
 8003c34:	4002006c 	.word	0x4002006c

08003c38 <Thread>:
void Thread_StsLED (void const *argument);                             // thread function
osThreadId tid_StsLEDThread;                                          // thread id
osThreadDef (Thread_StsLED, osPriorityNormal, 1, 0);                   // thread object


void Thread (void const *argument) {
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	ed2d 8b08 	vpush	{d8-d11}
  float32_t theta = 0.0;
 8003c3e:	ed9f 8a40 	vldr	s16, [pc, #256]	; 8003d40 <Thread+0x108>
  u8 r,g,b,w = 0;

  while (1) {
    if (neopixel_buffer_available()){
      theta = theta + 0.01;
 8003c42:	eddf aa40 	vldr	s21, [pc, #256]	; 8003d44 <Thread+0x10c>
      r = (u8) (127 * (1.0f + arm_sin_f32(theta)));
      g = (u8) (127 * (1.0f + arm_sin_f32(1.5*theta)));
      b = (u8) (127 * (1.0f + arm_sin_f32(2*theta)));
      w = (u8) (32 * (1.0f + arm_sin_f32(0.1*theta)));
 8003c46:	ed9f ba40 	vldr	s22, [pc, #256]	; 8003d48 <Thread+0x110>
 8003c4a:	eddf ba40 	vldr	s23, [pc, #256]	; 8003d4c <Thread+0x114>
void Thread_StsLED (void const *argument);                             // thread function
osThreadId tid_StsLEDThread;                                          // thread id
osThreadDef (Thread_StsLED, osPriorityNormal, 1, 0);                   // thread object


void Thread (void const *argument) {
 8003c4e:	b082      	sub	sp, #8
    if (neopixel_buffer_available()){
      theta = theta + 0.01;
      r = (u8) (127 * (1.0f + arm_sin_f32(theta)));
      g = (u8) (127 * (1.0f + arm_sin_f32(1.5*theta)));
      b = (u8) (127 * (1.0f + arm_sin_f32(2*theta)));
      w = (u8) (32 * (1.0f + arm_sin_f32(0.1*theta)));
 8003c50:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
void Thread (void const *argument) {
  float32_t theta = 0.0;
  u8 r,g,b,w = 0;

  while (1) {
    if (neopixel_buffer_available()){
 8003c54:	f000 fb54 	bl	8004300 <neopixel_buffer_available>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d06d      	beq.n	8003d38 <Thread+0x100>
      theta = theta + 0.01;
 8003c5c:	ee38 8a2a 	vadd.f32	s16, s16, s21
      r = (u8) (127 * (1.0f + arm_sin_f32(theta)));
 8003c60:	eeb0 0a48 	vmov.f32	s0, s16
 8003c64:	f7ff fdb4 	bl	80037d0 <arm_sin_f32>
 8003c68:	eeb0 aa40 	vmov.f32	s20, s0
      g = (u8) (127 * (1.0f + arm_sin_f32(1.5*theta)));
 8003c6c:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8003c70:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003c74:	f7ff fdac 	bl	80037d0 <arm_sin_f32>
 8003c78:	eef0 8a40 	vmov.f32	s17, s0
      b = (u8) (127 * (1.0f + arm_sin_f32(2*theta)));
 8003c7c:	ee38 0a08 	vadd.f32	s0, s16, s16
 8003c80:	f7ff fda6 	bl	80037d0 <arm_sin_f32>
 8003c84:	eef0 9a40 	vmov.f32	s19, s0
      w = (u8) (32 * (1.0f + arm_sin_f32(0.1*theta)));
 8003c88:	ee28 0a0b 	vmul.f32	s0, s16, s22
 8003c8c:	f7ff fda0 	bl	80037d0 <arm_sin_f32>
 8003c90:	ee70 7a09 	vadd.f32	s15, s0, s18
      w += (u8) (128 * (1.0f + arm_sin_f32(0.3*theta)));
 8003c94:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003d50 <Thread+0x118>
    if (neopixel_buffer_available()){
      theta = theta + 0.01;
      r = (u8) (127 * (1.0f + arm_sin_f32(theta)));
      g = (u8) (127 * (1.0f + arm_sin_f32(1.5*theta)));
      b = (u8) (127 * (1.0f + arm_sin_f32(2*theta)));
      w = (u8) (32 * (1.0f + arm_sin_f32(0.1*theta)));
 8003c98:	ee67 7aab 	vmul.f32	s15, s15, s23
      w += (u8) (128 * (1.0f + arm_sin_f32(0.3*theta)));
 8003c9c:	ee28 0a00 	vmul.f32	s0, s16, s0
    if (neopixel_buffer_available()){
      theta = theta + 0.01;
      r = (u8) (127 * (1.0f + arm_sin_f32(theta)));
      g = (u8) (127 * (1.0f + arm_sin_f32(1.5*theta)));
      b = (u8) (127 * (1.0f + arm_sin_f32(2*theta)));
      w = (u8) (32 * (1.0f + arm_sin_f32(0.1*theta)));
 8003ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca4:	edcd 7a00 	vstr	s15, [sp]
 8003ca8:	f89d 4000 	ldrb.w	r4, [sp]
      w += (u8) (128 * (1.0f + arm_sin_f32(0.3*theta)));
 8003cac:	f7ff fd90 	bl	80037d0 <arm_sin_f32>
      neopixel_rgbw_set_led(0,(u32) g<<24|r<<16|b<<8|w);
 8003cb0:	eddf 7a28 	vldr	s15, [pc, #160]	; 8003d54 <Thread+0x11c>
 8003cb4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003d58 <Thread+0x120>
 8003cb8:	ee30 0a09 	vadd.f32	s0, s0, s18
 8003cbc:	ee3a aa09 	vadd.f32	s20, s20, s18
 8003cc0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003cc4:	ee2a aa07 	vmul.f32	s20, s20, s14
 8003cc8:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd0:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003cd4:	ee17 2a90 	vmov	r2, s15
 8003cd8:	ee39 9a89 	vadd.f32	s18, s19, s18
 8003cdc:	eefc 7aca 	vcvt.u32.f32	s15, s20
 8003ce0:	ee29 9a07 	vmul.f32	s18, s18, s14
 8003ce4:	edcd 7a00 	vstr	s15, [sp]
 8003ce8:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8003cec:	4422      	add	r2, r4
 8003cee:	ee17 4a90 	vmov	r4, s15
 8003cf2:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	f89d 3000 	ldrb.w	r3, [sp]
 8003cfc:	edcd 7a01 	vstr	s15, [sp, #4]
 8003d00:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 8003d04:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8003d08:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8003d0c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8003d10:	4621      	mov	r1, r4
 8003d12:	2000      	movs	r0, #0
 8003d14:	f000 fada 	bl	80042cc <neopixel_rgbw_set_led>
      neopixel_rgbw_set_led(1,(u32) g<<24|r<<16|b<<8|w);
 8003d18:	4621      	mov	r1, r4
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f000 fad6 	bl	80042cc <neopixel_rgbw_set_led>
      neopixel_rgbw_set_led(2,(u32) g<<24|r<<16|b<<8|w);
 8003d20:	4621      	mov	r1, r4
 8003d22:	2002      	movs	r0, #2
 8003d24:	f000 fad2 	bl	80042cc <neopixel_rgbw_set_led>
    if (neopixel_buffer_available()){
      theta = theta + 0.01;
      r = (u8) (127 * (1.0f + arm_sin_f32(theta)));
      g = (u8) (127 * (1.0f + arm_sin_f32(1.5*theta)));
      b = (u8) (127 * (1.0f + arm_sin_f32(2*theta)));
      w = (u8) (32 * (1.0f + arm_sin_f32(0.1*theta)));
 8003d28:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
      w += (u8) (128 * (1.0f + arm_sin_f32(0.3*theta)));
      neopixel_rgbw_set_led(0,(u32) g<<24|r<<16|b<<8|w);
      neopixel_rgbw_set_led(1,(u32) g<<24|r<<16|b<<8|w);
      neopixel_rgbw_set_led(2,(u32) g<<24|r<<16|b<<8|w);
      neopixel_update_buffer();
 8003d2c:	f000 fa82 	bl	8004234 <neopixel_update_buffer>
void Thread (void const *argument) {
  float32_t theta = 0.0;
  u8 r,g,b,w = 0;

  while (1) {
    if (neopixel_buffer_available()){
 8003d30:	f000 fae6 	bl	8004300 <neopixel_buffer_available>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d191      	bne.n	8003c5c <Thread+0x24>
      neopixel_rgbw_set_led(1,(u32) g<<24|r<<16|b<<8|w);
      neopixel_rgbw_set_led(2,(u32) g<<24|r<<16|b<<8|w);
      neopixel_update_buffer();
      //osDelay(10);
    } else {
      osThreadYield();
 8003d38:	f7fd ffe2 	bl	8001d00 <osThreadYield>
 8003d3c:	e788      	b.n	8003c50 <Thread+0x18>
 8003d3e:	bf00      	nop
 8003d40:	00000000 	.word	0x00000000
 8003d44:	3c23d70a 	.word	0x3c23d70a
 8003d48:	3dcccccd 	.word	0x3dcccccd
 8003d4c:	42000000 	.word	0x42000000
 8003d50:	3e99999a 	.word	0x3e99999a
 8003d54:	43000000 	.word	0x43000000
 8003d58:	42fe0000 	.word	0x42fe0000

08003d5c <Thread_StsLED>:
    }
  }
}

void Thread_StsLED (void const *argument) {
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	2400      	movs	r4, #0
  u8 onoff = 0;
 8003d60:	4623      	mov	r3, r4
    onoff = !onoff;

    if (onoff)
      GPIOA->ODR |= GPIO_ODR_0;
    else
      GPIOA->ODR &= ~GPIO_ODR_0;
 8003d62:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8003d66:	e00e      	b.n	8003d86 <Thread_StsLED+0x2a>
  while (1) {

    onoff = !onoff;

    if (onoff)
      GPIOA->ODR |= GPIO_ODR_0;
 8003d68:	8aab      	ldrh	r3, [r5, #20]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	82ab      	strh	r3, [r5, #20]
    else
      GPIOA->ODR &= ~GPIO_ODR_0;

    printf ("Alive: %i\r\n",count++);
 8003d72:	b2e1      	uxtb	r1, r4
 8003d74:	4809      	ldr	r0, [pc, #36]	; (8003d9c <Thread_StsLED+0x40>)
 8003d76:	f000 fcf5 	bl	8004764 <iprintf>

    osDelay(1000);
 8003d7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d7e:	f7fd fffb 	bl	8001d78 <osDelay>
 8003d82:	3401      	adds	r4, #1
void Thread_StsLED (void const *argument) {
  u8 onoff = 0;
  u8 count = 0;
  while (1) {

    onoff = !onoff;
 8003d84:	4633      	mov	r3, r6
 8003d86:	f083 0601 	eor.w	r6, r3, #1

    if (onoff)
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ec      	beq.n	8003d68 <Thread_StsLED+0xc>
      GPIOA->ODR |= GPIO_ODR_0;
    else
      GPIOA->ODR &= ~GPIO_ODR_0;
 8003d8e:	8aab      	ldrh	r3, [r5, #20]
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	0c1b      	lsrs	r3, r3, #16
 8003d98:	82ab      	strh	r3, [r5, #20]
 8003d9a:	e7ea      	b.n	8003d72 <Thread_StsLED+0x16>
 8003d9c:	08006008 	.word	0x08006008

08003da0 <main>:
    osDelay(1000);
  }
}

int main(void)
{  
 8003da0:	b508      	push	{r3, lr}
  osKernelInitialize ();
 8003da2:	f7fd fe33 	bl	8001a0c <osKernelInitialize>
  printf ("\r\n---- BLIXTEN ----\r\n");
 8003da6:	480d      	ldr	r0, [pc, #52]	; (8003ddc <main+0x3c>)
 8003da8:	f000 fd6c 	bl	8004884 <puts>
  printf("CPU: STM32F302K8, 72MHz, running \r\n");
 8003dac:	480c      	ldr	r0, [pc, #48]	; (8003de0 <main+0x40>)
 8003dae:	f000 fd69 	bl	8004884 <puts>
  neopixel_rgbw_init();
 8003db2:	f000 fab7 	bl	8004324 <neopixel_rgbw_init>
  cc2520_init();
 8003db6:	f000 fbf3 	bl	80045a0 <cc2520_init>
  tid_Thread = osThreadCreate (osThread(Thread), NULL);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4809      	ldr	r0, [pc, #36]	; (8003de4 <main+0x44>)
 8003dbe:	f7fd ff6d 	bl	8001c9c <osThreadCreate>
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <main+0x48>)
  tid_StsLEDThread = osThreadCreate (osThread(Thread_StsLED), NULL);
 8003dc4:	2100      	movs	r1, #0
  osKernelInitialize ();
  printf ("\r\n---- BLIXTEN ----\r\n");
  printf("CPU: STM32F302K8, 72MHz, running \r\n");
  neopixel_rgbw_init();
  cc2520_init();
  tid_Thread = osThreadCreate (osThread(Thread), NULL);
 8003dc6:	6018      	str	r0, [r3, #0]
  tid_StsLEDThread = osThreadCreate (osThread(Thread_StsLED), NULL);
 8003dc8:	4808      	ldr	r0, [pc, #32]	; (8003dec <main+0x4c>)
 8003dca:	f7fd ff67 	bl	8001c9c <osThreadCreate>
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <main+0x50>)
 8003dd0:	6018      	str	r0, [r3, #0]
  osKernelStart (); 
 8003dd2:	f7fd fe3d 	bl	8001a50 <osKernelStart>
}
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	bd08      	pop	{r3, pc}
 8003dda:	bf00      	nop
 8003ddc:	08006014 	.word	0x08006014
 8003de0:	0800602c 	.word	0x0800602c
 8003de4:	08005fe8 	.word	0x08005fe8
 8003de8:	20003a60 	.word	0x20003a60
 8003dec:	08005ff8 	.word	0x08005ff8
 8003df0:	20003a5c 	.word	0x20003a5c

08003df4 <_write>:
#include "syscalls.h"
#include "usart1.h"


int _write (int fd, const void *buf, size_t count)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
	return usart1_puts((char *) buf, count);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	4619      	mov	r1, r3
 8003e06:	68b8      	ldr	r0, [r7, #8]
 8003e08:	f000 f8ac 	bl	8003f64 <usart1_puts>
 8003e0c:	4603      	mov	r3, r0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop

08003e18 <_read>:

int _read (int fd, const void *buf, size_t count){
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
	return count;
 8003e24:	687b      	ldr	r3, [r7, #4]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop

08003e34 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e3e:	4909      	ldr	r1, [pc, #36]	; (8003e64 <NVIC_EnableIRQ+0x30>)
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	79fa      	ldrb	r2, [r7, #7]
 8003e48:	f002 021f 	and.w	r2, r2, #31
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	e000e100 	.word	0xe000e100

08003e68 <USART1_IRQHandler>:
volatile u8 rx_bfr_head, rx_bfr_tail = 0;
volatile u8 tx_bfr_head, tx_bfr_tail = 0;



void USART1_IRQHandler(void) {
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
	volatile u32 usart1_isr = USART1->ISR;
 8003e6e:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <USART1_IRQHandler+0xdc>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	607b      	str	r3, [r7, #4]

	if (usart1_isr & USART_ISR_RXNE) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02f      	beq.n	8003ede <USART1_IRQHandler+0x76>
		rx_buffer[rx_bfr_head] = USART1->RDR;
 8003e7e:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <USART1_IRQHandler+0xe0>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <USART1_IRQHandler+0xdc>)
 8003e88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	b2d9      	uxtb	r1, r3
 8003e8e:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <USART1_IRQHandler+0xe4>)
 8003e90:	5499      	strb	r1, [r3, r2]
	
		if (rx_bfr_head == rx_bfr_tail)
 8003e92:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <USART1_IRQHandler+0xe0>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <USART1_IRQHandler+0xe8>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d106      	bne.n	8003eb0 <USART1_IRQHandler+0x48>
			rx_bfr_tail++;
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <USART1_IRQHandler+0xe8>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <USART1_IRQHandler+0xe8>)
 8003eae:	701a      	strb	r2, [r3, #0]

		if (rx_bfr_tail >= RX_BUFFER_SIZE)
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <USART1_IRQHandler+0xe8>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b1f      	cmp	r3, #31
 8003eb8:	d902      	bls.n	8003ec0 <USART1_IRQHandler+0x58>
			rx_bfr_tail = 0;
 8003eba:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <USART1_IRQHandler+0xe8>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]

		rx_bfr_head++;
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <USART1_IRQHandler+0xe0>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <USART1_IRQHandler+0xe0>)
 8003ecc:	701a      	strb	r2, [r3, #0]

		if (rx_bfr_head >= RX_BUFFER_SIZE)
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <USART1_IRQHandler+0xe0>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b1f      	cmp	r3, #31
 8003ed6:	d902      	bls.n	8003ede <USART1_IRQHandler+0x76>
			rx_bfr_head = 0;
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <USART1_IRQHandler+0xe0>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
	}

	if ( (usart1_isr & USART_ISR_TXE) ) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d026      	beq.n	8003f36 <USART1_IRQHandler+0xce>
		USART1->TDR = (unsigned char) tx_buffer[tx_bfr_tail] & 0xFF;
 8003ee8:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <USART1_IRQHandler+0xdc>)
 8003eea:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <USART1_IRQHandler+0xec>)
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <USART1_IRQHandler+0xf0>)
 8003ef4:	5c52      	ldrb	r2, [r2, r1]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	851a      	strh	r2, [r3, #40]	; 0x28
		tx_bfr_tail = (tx_bfr_tail + 1) % TX_BUFFER_SIZE;
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <USART1_IRQHandler+0xec>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <USART1_IRQHandler+0xf4>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	da03      	bge.n	8003f14 <USART1_IRQHandler+0xac>
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	f063 031f 	orn	r3, r3, #31
 8003f12:	3301      	adds	r3, #1
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <USART1_IRQHandler+0xec>)
 8003f18:	701a      	strb	r2, [r3, #0]

		if (tx_bfr_tail == tx_bfr_head) {
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <USART1_IRQHandler+0xec>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <USART1_IRQHandler+0xf8>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d105      	bne.n	8003f36 <USART1_IRQHandler+0xce>
			USART1->CR1 &= ~USART_CR1_TXEIE;
 8003f2a:	4a06      	ldr	r2, [pc, #24]	; (8003f44 <USART1_IRQHandler+0xdc>)
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <USART1_IRQHandler+0xdc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f34:	6013      	str	r3, [r2, #0]
		}

	}
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40013800 	.word	0x40013800
 8003f48:	20003bec 	.word	0x20003bec
 8003f4c:	20003bf0 	.word	0x20003bf0
 8003f50:	20000090 	.word	0x20000090
 8003f54:	20000091 	.word	0x20000091
 8003f58:	20003c70 	.word	0x20003c70
 8003f5c:	8000001f 	.word	0x8000001f
 8003f60:	20003bed 	.word	0x20003bed

08003f64 <usart1_puts>:

int usart1_puts(char *ptr, u8 size){
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	70fb      	strb	r3, [r7, #3]
	u8 i;
	u8 count = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < size; i++) {
 8003f74:	2300      	movs	r3, #0
 8003f76:	73fb      	strb	r3, [r7, #15]
 8003f78:	e028      	b.n	8003fcc <usart1_puts+0x68>
		tx_buffer[tx_bfr_head] = *ptr++;
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <usart1_puts+0x8c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <usart1_puts+0x90>)
 8003f8c:	545a      	strb	r2, [r3, r1]
		tx_bfr_head = (tx_bfr_head + 1) % TX_BUFFER_SIZE;
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <usart1_puts+0x8c>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <usart1_puts+0x94>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da03      	bge.n	8003fa6 <usart1_puts+0x42>
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	f063 031f 	orn	r3, r3, #31
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <usart1_puts+0x8c>)
 8003faa:	701a      	strb	r2, [r3, #0]
		count ++;
 8003fac:	7bbb      	ldrb	r3, [r7, #14]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	73bb      	strb	r3, [r7, #14]
		
		while (tx_bfr_head == tx_bfr_tail)
 8003fb2:	e000      	b.n	8003fb6 <usart1_puts+0x52>
			__ASM("nop"); /* Block until there is buffer space available*/
 8003fb4:	bf00      	nop
	for (i = 0; i < size; i++) {
		tx_buffer[tx_bfr_head] = *ptr++;
		tx_bfr_head = (tx_bfr_head + 1) % TX_BUFFER_SIZE;
		count ++;
		
		while (tx_bfr_head == tx_bfr_tail)
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <usart1_puts+0x8c>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <usart1_puts+0x98>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d0f6      	beq.n	8003fb4 <usart1_puts+0x50>

int usart1_puts(char *ptr, u8 size){
	u8 i;
	u8 count = 0;

	for (i = 0; i < size; i++) {
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d3d2      	bcc.n	8003f7a <usart1_puts+0x16>
		while (tx_bfr_head == tx_bfr_tail)
			__ASM("nop"); /* Block until there is buffer space available*/

	}

	USART1->CR1 |= USART_CR1_TXEIE;
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <usart1_puts+0x9c>)
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <usart1_puts+0x9c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fde:	6013      	str	r3, [r2, #0]

	return count;
 8003fe0:	7bbb      	ldrb	r3, [r7, #14]

}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20003bed 	.word	0x20003bed
 8003ff4:	20003c70 	.word	0x20003c70
 8003ff8:	8000001f 	.word	0x8000001f
 8003ffc:	20000091 	.word	0x20000091
 8004000:	40013800 	.word	0x40013800

08004004 <usart1_init>:

int usart1_read(char *ptr, u8 size) {
	return 0;
}

void usart1_init(void){
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Configure USART1 */
  
  /* GPIO Pins set to 'Alternate function' */
  GPIOB->MODER |= (GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1); 
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <usart1_init+0x78>)
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <usart1_init+0x78>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8004012:	6013      	str	r3, [r2, #0]
  /* Configure alternate function register */
  GPIOB->AFR[0] |= (7 << 24);
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <usart1_init+0x78>)
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <usart1_init+0x78>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800401e:	6213      	str	r3, [r2, #32]
  GPIOB->AFR[0] |= (7 << 28);
 8004020:	4a16      	ldr	r2, [pc, #88]	; (800407c <usart1_init+0x78>)
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <usart1_init+0x78>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 800402a:	6213      	str	r3, [r2, #32]

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <usart1_init+0x7c>)
 800402e:	4b14      	ldr	r3, [pc, #80]	; (8004080 <usart1_init+0x7c>)
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004036:	6193      	str	r3, [r2, #24]
  RCC->CFGR3 |= RCC_CFGR3_USART1SW_0; /* Use System CLK for USART1*/
 8004038:	4a11      	ldr	r2, [pc, #68]	; (8004080 <usart1_init+0x7c>)
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <usart1_init+0x7c>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6313      	str	r3, [r2, #48]	; 0x30

  USART1->CR1 = (0xE0000000 & USART1->CR1 ) | (USART_CR1_RE | USART_CR1_TE | USART_CR1_UE | USART_CR1_RXNEIE  );
 8004044:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <usart1_init+0x80>)
 8004046:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <usart1_init+0x80>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800404e:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8004052:	6013      	str	r3, [r2, #0]
  USART1->BRR = ((USART1->BRR & 0xFFFF0000) | 625); /* 115200 baud */
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <usart1_init+0x80>)
 8004056:	899b      	ldrh	r3, [r3, #12]
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <usart1_init+0x80>)
 800405a:	f240 2271 	movw	r2, #625	; 0x271
 800405e:	819a      	strh	r2, [r3, #12]

  	bzero ((void *)&rx_buffer[0],RX_BUFFER_SIZE);
 8004060:	2120      	movs	r1, #32
 8004062:	4809      	ldr	r0, [pc, #36]	; (8004088 <usart1_init+0x84>)
 8004064:	f000 fb3b 	bl	80046de <bzero>
  	bzero ((void *)&tx_buffer[0],TX_BUFFER_SIZE);
 8004068:	2120      	movs	r1, #32
 800406a:	4808      	ldr	r0, [pc, #32]	; (800408c <usart1_init+0x88>)
 800406c:	f000 fb37 	bl	80046de <bzero>

	NVIC_EnableIRQ(USART1_IRQn);
 8004070:	2025      	movs	r0, #37	; 0x25
 8004072:	f7ff fedf 	bl	8003e34 <NVIC_EnableIRQ>

 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	48000400 	.word	0x48000400
 8004080:	40021000 	.word	0x40021000
 8004084:	40013800 	.word	0x40013800
 8004088:	20003bf0 	.word	0x20003bf0
 800408c:	20003c70 	.word	0x20003c70

08004090 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800409a:	4909      	ldr	r1, [pc, #36]	; (80040c0 <NVIC_EnableIRQ+0x30>)
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	79fa      	ldrb	r2, [r7, #7]
 80040a4:	f002 021f 	and.w	r2, r2, #31
 80040a8:	2001      	movs	r0, #1
 80040aa:	fa00 f202 	lsl.w	r2, r0, r2
 80040ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	e000e100 	.word	0xe000e100

080040c4 <TIM6_DAC_IRQHandler>:
volatile u8 buffer_changed = 0;
volatile u16 frame_count = 0;
static u32 rgbw_buffer[NEOPIXEL_N_LEDS]; 

/* TIM6 is used to start and update LED's at a constant rate */
void TIM6_DAC_IRQHandler(void) {
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0

	TIM6->SR &= ~TIM_SR_UIF;
 80040c8:	4a31      	ldr	r2, [pc, #196]	; (8004190 <TIM6_DAC_IRQHandler+0xcc>)
 80040ca:	4b31      	ldr	r3, [pc, #196]	; (8004190 <TIM6_DAC_IRQHandler+0xcc>)
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	6113      	str	r3, [r2, #16]

	frame_count++;
 80040d4:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <TIM6_DAC_IRQHandler+0xd0>)
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <TIM6_DAC_IRQHandler+0xd0>)
 80040e0:	801a      	strh	r2, [r3, #0]

	if (buffer_changed) {
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <TIM6_DAC_IRQHandler+0xd4>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00d      	beq.n	8004108 <TIM6_DAC_IRQHandler+0x44>
		buffer_changed = 0;
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <TIM6_DAC_IRQHandler+0xd4>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
		active_buffer = active_buffer>0?0:1;
 80040f2:	4b2a      	ldr	r3, [pc, #168]	; (800419c <TIM6_DAC_IRQHandler+0xd8>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <TIM6_DAC_IRQHandler+0xd8>)
 8004106:	701a      	strb	r2, [r3, #0]
	}

	DMA1_Channel7->CMAR = (int) (data_buffer[active_buffer]);
 8004108:	4a25      	ldr	r2, [pc, #148]	; (80041a0 <TIM6_DAC_IRQHandler+0xdc>)
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <TIM6_DAC_IRQHandler+0xd8>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4619      	mov	r1, r3
 8004112:	460b      	mov	r3, r1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	440b      	add	r3, r1
 8004118:	015b      	lsls	r3, r3, #5
 800411a:	4922      	ldr	r1, [pc, #136]	; (80041a4 <TIM6_DAC_IRQHandler+0xe0>)
 800411c:	440b      	add	r3, r1
 800411e:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = 32*NEOPIXEL_N_LEDS;
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <TIM6_DAC_IRQHandler+0xdc>)
 8004122:	2260      	movs	r2, #96	; 0x60
 8004124:	605a      	str	r2, [r3, #4]
	DMA1_Channel7->CCR |= DMA_CCR_EN;
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <TIM6_DAC_IRQHandler+0xdc>)
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <TIM6_DAC_IRQHandler+0xdc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6013      	str	r3, [r2, #0]

	TIM2->CNT = 0;
 8004132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004136:	2200      	movs	r2, #0
 8004138:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCR4 = 0; 
 800413a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800413e:	2200      	movs	r2, #0
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR2 = NEOPIXEL_PWM_F;
 8004142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004146:	2256      	movs	r2, #86	; 0x56
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCMR2 &= ~TIM_CCMR2_OC4M;
 800414a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800414e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004158:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800415a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800415e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004168:	61d3      	str	r3, [r2, #28]

	/* Force DMA update */
	TIM2->EGR =  TIM_EGR_CC2G;
 800416a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800416e:	2204      	movs	r2, #4
 8004170:	615a      	str	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;		
 8004172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	8013      	strh	r3, [r2, #0]

}
 8004186:	bf00      	nop
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40001000 	.word	0x40001000
 8004194:	20000156 	.word	0x20000156
 8004198:	20000155 	.word	0x20000155
 800419c:	20000154 	.word	0x20000154
 80041a0:	40020080 	.word	0x40020080
 80041a4:	20000094 	.word	0x20000094

080041a8 <DMA1_Channel7_IRQHandler>:


/* TIM2 CH4 is available on DMA1 Channel 7 */
void DMA1_Channel7_IRQHandler(void) {
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0

	u32 dma_isr = DMA1->ISR;
 80041ae:	4b1f      	ldr	r3, [pc, #124]	; (800422c <DMA1_Channel7_IRQHandler+0x84>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	607b      	str	r3, [r7, #4]
		'dummy' (0) is appended to the buffer.

		To generate the 80us lead -out (reset) and produce
		 a constant refresh rate TIM6 is activated.
	*/
	if (dma_isr & DMA_ISR_TCIF7) {
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02f      	beq.n	800421e <DMA1_Channel7_IRQHandler+0x76>
		DMA1->IFCR = DMA_IFCR_CTCIF7;
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <DMA1_Channel7_IRQHandler+0x84>)
 80041c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c4:	605a      	str	r2, [r3, #4]
		TIM2->CR1 &= ~TIM_CR1_CEN;
 80041c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	8013      	strh	r3, [r2, #0]
		TIM2->CNT = 0;
 80041da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041de:	2200      	movs	r2, #0
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CCR4 = 0; 
 80041e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
		TIM2->CCR2 = NEOPIXEL_PWM_F;
 80041ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ee:	2256      	movs	r2, #86	; 0x56
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
		DMA1_Channel7->CCR &= ~DMA_CCR_EN;
 80041f2:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <DMA1_Channel7_IRQHandler+0x88>)
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <DMA1_Channel7_IRQHandler+0x88>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6013      	str	r3, [r2, #0]

		TIM2->CCMR2 &= ~TIM_CCMR2_OC4M;
 80041fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420c:	61d3      	str	r3, [r2, #28]
		TIM2->CCMR2 |= TIM_CCMR2_OC4M_2;
 800420e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421c:	61d3      	str	r3, [r2, #28]
	}


}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40020000 	.word	0x40020000
 8004230:	40020080 	.word	0x40020080

08004234 <neopixel_update_buffer>:
/* Generate NRZ data in the buffer not being used 
  for an active DMA transfer */
void neopixel_update_buffer(void) {
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
	u8 i,n = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	73bb      	strb	r3, [r7, #14]
	u32 rgbw_val = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
	u8* update_buffer_ptr;

	if (active_buffer)
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <neopixel_update_buffer+0x84>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <neopixel_update_buffer+0x1e>
		update_buffer_ptr = data_buffer[0];
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <neopixel_update_buffer+0x88>)
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	e001      	b.n	8004256 <neopixel_update_buffer+0x22>
	else
		update_buffer_ptr = data_buffer[1];
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <neopixel_update_buffer+0x8c>)
 8004254:	607b      	str	r3, [r7, #4]


	for (i = 0; i < NEOPIXEL_N_LEDS; i++) {
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e020      	b.n	800429e <neopixel_update_buffer+0x6a>
		rgbw_val = rgbw_buffer[i];
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <neopixel_update_buffer+0x90>)
 8004260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004264:	60bb      	str	r3, [r7, #8]

		for (n = 0; n < 32; n++) {
 8004266:	2300      	movs	r3, #0
 8004268:	73bb      	strb	r3, [r7, #14]
 800426a:	e012      	b.n	8004292 <neopixel_update_buffer+0x5e>
			if (rgbw_val & 0x80000000)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	da03      	bge.n	800427a <neopixel_update_buffer+0x46>
				*update_buffer_ptr = NEOPIXEL_H;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	222b      	movs	r2, #43	; 0x2b
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e002      	b.n	8004280 <neopixel_update_buffer+0x4c>
			else
				*update_buffer_ptr = NEOPIXEL_L;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2215      	movs	r2, #21
 800427e:	701a      	strb	r2, [r3, #0]

			update_buffer_ptr++;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3301      	adds	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
			rgbw_val = (rgbw_val << 1);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	60bb      	str	r3, [r7, #8]


	for (i = 0; i < NEOPIXEL_N_LEDS; i++) {
		rgbw_val = rgbw_buffer[i];

		for (n = 0; n < 32; n++) {
 800428c:	7bbb      	ldrb	r3, [r7, #14]
 800428e:	3301      	adds	r3, #1
 8004290:	73bb      	strb	r3, [r7, #14]
 8004292:	7bbb      	ldrb	r3, [r7, #14]
 8004294:	2b1f      	cmp	r3, #31
 8004296:	d9e9      	bls.n	800426c <neopixel_update_buffer+0x38>
		update_buffer_ptr = data_buffer[0];
	else
		update_buffer_ptr = data_buffer[1];


	for (i = 0; i < NEOPIXEL_N_LEDS; i++) {
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	3301      	adds	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d9db      	bls.n	800425c <neopixel_update_buffer+0x28>
			rgbw_val = (rgbw_val << 1);
		}

	}

	buffer_changed= 1;
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <neopixel_update_buffer+0x94>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000154 	.word	0x20000154
 80042bc:	20000094 	.word	0x20000094
 80042c0:	200000f4 	.word	0x200000f4
 80042c4:	20000158 	.word	0x20000158
 80042c8:	20000155 	.word	0x20000155

080042cc <neopixel_rgbw_set_led>:
/* Update a specific LED value */
int neopixel_rgbw_set_led(u8 led_index, u32 rgbw_value) {
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
	if (led_index < NEOPIXEL_N_LEDS) {
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d806      	bhi.n	80042ec <neopixel_rgbw_set_led+0x20>
		rgbw_buffer[led_index] = rgbw_value;
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	4906      	ldr	r1, [pc, #24]	; (80042fc <neopixel_rgbw_set_led+0x30>)
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e001      	b.n	80042f0 <neopixel_rgbw_set_led+0x24>
	}
	return -1;
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	20000158 	.word	0x20000158

08004300 <neopixel_buffer_available>:

u16 neopixel_get_framecount(void) {
	return frame_count;
}

u8 neopixel_buffer_available(void) {
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
	return !buffer_changed;
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <neopixel_buffer_available+0x20>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000155 	.word	0x20000155

08004324 <neopixel_rgbw_init>:


void neopixel_rgbw_init(void){
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0


	/*DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM2_STOP; // Stop TIM2 when cpu is halted, for debuging */

 	GPIOA->MODER |= GPIO_MODER_MODER10_1; 		/* Configure Alternate function on PA10 */
 8004328:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800432c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004336:	6013      	str	r3, [r2, #0]
 	GPIOA->AFR[1] |= (10 << 8); 				/* Connect Timer 2 CH4 to PA10*/
 8004338:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800433c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8004346:	6253      	str	r3, [r2, #36]	; 0x24
 	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10; 	/* Set high drive strength*/
 8004348:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800434c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004356:	6093      	str	r3, [r2, #8]

	/* Enable TIM2, TIM6 clock on APB1 x2 (72 MHz) */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN; 
 8004358:	4a51      	ldr	r2, [pc, #324]	; (80044a0 <neopixel_rgbw_init+0x17c>)
 800435a:	4b51      	ldr	r3, [pc, #324]	; (80044a0 <neopixel_rgbw_init+0x17c>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f043 0311 	orr.w	r3, r3, #17
 8004362:	61d3      	str	r3, [r2, #28]

	/* Disable timer to enable configuration*/
	TIM2->CR1 &= ~TIM_CR1_CKD;
 8004364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004374:	b29b      	uxth	r3, r3
 8004376:	8013      	strh	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8004378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800437c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	b29b      	uxth	r3, r3
 800438a:	8013      	strh	r3, [r2, #0]
	TIM1->CR1 &= ~TIM_CR1_ARPE;
 800438c:	4a45      	ldr	r2, [pc, #276]	; (80044a4 <neopixel_rgbw_init+0x180>)
 800438e:	4b45      	ldr	r3, [pc, #276]	; (80044a4 <neopixel_rgbw_init+0x180>)
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]

		This code will meet the tougher timing requirement, at lest
		on the STM32F302K8, with 72MHz timer clock input.
	 */

	TIM2->ARR = NEOPIXEL_PWM_F; 	/* 1/72e6 * 86 = 1.194 us period time */
 800439c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043a0:	2256      	movs	r2, #86	; 0x56
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;
 80043a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043a8:	2200      	movs	r2, #0
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCMR2 &= ~TIM_CCMR2_CC4S; /* Configure Timer 2 CH4 as output */
 80043ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ba:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2; /* PWM Mode 2 */
 80043bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80043ca:	61d3      	str	r3, [r2, #28]
	TIM2->CCR4 = 0x0;
 80043cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043d0:	2200      	movs	r2, #0
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCER |= TIM_CCER_CC4E; 	/* Enable output pin */
 80043d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043e2:	6213      	str	r3, [r2, #32]
	

	/* Configure TIM2 CH2 to generate DMA requests for every complete PWM cycle */
	TIM2->CCR2 = NEOPIXEL_PWM_F;
 80043e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043e8:	2256      	movs	r2, #86	; 0x56
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE; /* Automatically re-load CCR2 */
 80043ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043fa:	6193      	str	r3, [r2, #24]
	TIM2->DCR |= (0 << 8); 			/* DMA Data burst length = 1 */
 80043fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004404:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8004408:	b292      	uxth	r2, r2
 800440a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	TIM2->DCR |= 16; 				/* Location of CCR4 for DMA Update to update PWM */
 800440e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800441a:	b29b      	uxth	r3, r3
 800441c:	f043 0310 	orr.w	r3, r3, #16
 8004420:	b29b      	uxth	r3, r3
 8004422:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	TIM2->DIER |= TIM_DIER_CC2DE; 	/* Generate DMA req on CH2 */	
 8004426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800442a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004434:	60d3      	str	r3, [r2, #12]
	TIM2->SR = 0;
 8004436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800443a:	2200      	movs	r2, #0
 800443c:	611a      	str	r2, [r3, #16]

	/* Configure DMA */ 
	DMA1_Channel7->CPAR = (int) &(TIM2->DMAR);
 800443e:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <neopixel_rgbw_init+0x184>)
 8004440:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <neopixel_rgbw_init+0x188>)
 8004442:	609a      	str	r2, [r3, #8]
	/* Source data is 8-bit destination register is word sized. */
	DMA1_Channel7->CCR = DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_CIRC|DMA_CCR_TCIE|DMA_CCR_PSIZE_1;
 8004444:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <neopixel_rgbw_init+0x184>)
 8004446:	f240 22b2 	movw	r2, #690	; 0x2b2
 800444a:	601a      	str	r2, [r3, #0]
	DMA1->IFCR = 0xFFFFFFFF;
 800444c:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <neopixel_rgbw_init+0x18c>)
 800444e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004452:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004454:	2011      	movs	r0, #17
 8004456:	f7ff fe1b 	bl	8004090 <NVIC_EnableIRQ>

	/* Configure refresh timer, 25Hz */
	TIM6->PSC = 72;
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <neopixel_rgbw_init+0x190>)
 800445c:	2248      	movs	r2, #72	; 0x48
 800445e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM6->CR1 |= TIM_CR1_ARPE;
 8004460:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <neopixel_rgbw_init+0x190>)
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <neopixel_rgbw_init+0x190>)
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]
	TIM6->ARR = 20000;
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <neopixel_rgbw_init+0x190>)
 8004472:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->DIER |= TIM_DIER_UIE;
 8004478:	4a0e      	ldr	r2, [pc, #56]	; (80044b4 <neopixel_rgbw_init+0x190>)
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <neopixel_rgbw_init+0x190>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004484:	2036      	movs	r0, #54	; 0x36
 8004486:	f7ff fe03 	bl	8004090 <NVIC_EnableIRQ>
	TIM6->CR1 |= TIM_CR1_CEN;
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <neopixel_rgbw_init+0x190>)
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <neopixel_rgbw_init+0x190>)
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	8013      	strh	r3, [r2, #0]
	/* Reset buffers, all LED's off */
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40020080 	.word	0x40020080
 80044ac:	4000004c 	.word	0x4000004c
 80044b0:	40020000 	.word	0x40020000
 80044b4:	40001000 	.word	0x40001000

080044b8 <cc2520_dma_trx>:

#define CC2520_STATE_INIT 0
#define CC2520_STATE_XTALON 1
#define CC2520_STATE_IDLE 2

void cc2520_dma_trx(u8 cmd, u8* data, u8 length) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	6039      	str	r1, [r7, #0]
 80044c2:	71fb      	strb	r3, [r7, #7]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71bb      	strb	r3, [r7, #6]
	dma_trx_complete = false;
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <cc2520_dma_trx+0x3c>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
	bzero((void *) &rx_buffer[0],BUFFER_SIZE);
 80044ce:	2180      	movs	r1, #128	; 0x80
 80044d0:	4809      	ldr	r0, [pc, #36]	; (80044f8 <cc2520_dma_trx+0x40>)
 80044d2:	f000 f904 	bl	80046de <bzero>
	bzero((void *) &tx_buffer[0],BUFFER_SIZE);
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	4808      	ldr	r0, [pc, #32]	; (80044fc <cc2520_dma_trx+0x44>)
 80044da:	f000 f900 	bl	80046de <bzero>
	memcpy ((void *) &tx_buffer[0],data, length);
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	461a      	mov	r2, r3
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	4805      	ldr	r0, [pc, #20]	; (80044fc <cc2520_dma_trx+0x44>)
 80044e6:	f000 f929 	bl	800473c <memcpy>



}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000000 	.word	0x20000000
 80044f8:	20003bf0 	.word	0x20003bf0
 80044fc:	20003c70 	.word	0x20003c70

08004500 <cc2520_thread>:

void cc2520_thread (void const *argument) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	u8 state = CC2520_STATE_INIT;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]
	u8 status = 0 ;
 800450c:	2300      	movs	r3, #0
 800450e:	72fb      	strb	r3, [r7, #11]
	u16 timeout = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	81bb      	strh	r3, [r7, #12]

	while (1) {
		switch (state) {
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d007      	beq.n	800452a <cc2520_thread+0x2a>
 800451a:	2b02      	cmp	r3, #2
 800451c:	d032      	beq.n	8004584 <cc2520_thread+0x84>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d128      	bne.n	8004574 <cc2520_thread+0x74>
			case CC2520_STATE_INIT:
				timeout = 1000;
 8004522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004526:	81bb      	strh	r3, [r7, #12]
			break;
 8004528:	e02f      	b.n	800458a <cc2520_thread+0x8a>
			case CC2520_STATE_XTALON:
				cc2520_dma_trx(CC2520_CMD_SXOSCON,&status,1);
 800452a:	f107 030b 	add.w	r3, r7, #11
 800452e:	2201      	movs	r2, #1
 8004530:	4619      	mov	r1, r3
 8004532:	2040      	movs	r0, #64	; 0x40
 8004534:	f7ff ffc0 	bl	80044b8 <cc2520_dma_trx>

				while (dma_trx_complete)
 8004538:	e001      	b.n	800453e <cc2520_thread+0x3e>
					osThreadYield();
 800453a:	f7fd fbe1 	bl	8001d00 <osThreadYield>
				timeout = 1000;
			break;
			case CC2520_STATE_XTALON:
				cc2520_dma_trx(CC2520_CMD_SXOSCON,&status,1);

				while (dma_trx_complete)
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <cc2520_thread+0x90>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f8      	bne.n	800453a <cc2520_thread+0x3a>
					osThreadYield();

				timeout--;
 8004548:	89bb      	ldrh	r3, [r7, #12]
 800454a:	3b01      	subs	r3, #1
 800454c:	81bb      	strh	r3, [r7, #12]

				if (timeout <= 0) {
 800454e:	89bb      	ldrh	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <cc2520_thread+0x5e>
					printf ("cc2520: timeout initializing oscillator!\n\r");
 8004554:	480f      	ldr	r0, [pc, #60]	; (8004594 <cc2520_thread+0x94>)
 8004556:	f000 f905 	bl	8004764 <iprintf>
					state = CC2520_STATE_INIT;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
				}

				if (status & CC2520_STATUS_XOSC32M_STABLE) {
 800455e:	7afb      	ldrb	r3, [r7, #11]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	b25b      	sxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	da0f      	bge.n	8004588 <cc2520_thread+0x88>
					printf ("cc2520: oscillator stable.\n\r");
 8004568:	480b      	ldr	r0, [pc, #44]	; (8004598 <cc2520_thread+0x98>)
 800456a:	f000 f8fb 	bl	8004764 <iprintf>
					state = CC2520_STATE_IDLE;
 800456e:	2302      	movs	r3, #2
 8004570:	73fb      	strb	r3, [r7, #15]
				}

			break;
 8004572:	e009      	b.n	8004588 <cc2520_thread+0x88>
			case CC2520_STATE_IDLE:
			break;
			default:
				printf ("CC2520: Unknown state (%i)\r\n",(state));
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	4619      	mov	r1, r3
 8004578:	4808      	ldr	r0, [pc, #32]	; (800459c <cc2520_thread+0x9c>)
 800457a:	f000 f8f3 	bl	8004764 <iprintf>
				state = CC2520_STATE_INIT;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
			break;
 8004582:	e002      	b.n	800458a <cc2520_thread+0x8a>
					state = CC2520_STATE_IDLE;
				}

			break;
			case CC2520_STATE_IDLE:
			break;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <cc2520_thread+0x8a>
				if (status & CC2520_STATUS_XOSC32M_STABLE) {
					printf ("cc2520: oscillator stable.\n\r");
					state = CC2520_STATE_IDLE;
				}

			break;
 8004588:	bf00      	nop
			default:
				printf ("CC2520: Unknown state (%i)\r\n",(state));
				state = CC2520_STATE_INIT;
			break;
		}
  		osThreadYield();
 800458a:	f7fd fbb9 	bl	8001d00 <osThreadYield>
  	}
 800458e:	e7c1      	b.n	8004514 <cc2520_thread+0x14>
 8004590:	20000000 	.word	0x20000000
 8004594:	08005724 	.word	0x08005724
 8004598:	08005750 	.word	0x08005750
 800459c:	08005770 	.word	0x08005770

080045a0 <cc2520_init>:
}

void cc2520_init(void) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
	printf ("CC2520 Init...\r\n");
 80045a4:	4832      	ldr	r0, [pc, #200]	; (8004670 <cc2520_init+0xd0>)
 80045a6:	f000 f96d 	bl	8004884 <puts>

	RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;			/* Enable SPI3 clock */
 80045aa:	4a32      	ldr	r2, [pc, #200]	; (8004674 <cc2520_init+0xd4>)
 80045ac:	4b31      	ldr	r3, [pc, #196]	; (8004674 <cc2520_init+0xd4>)
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b4:	61d3      	str	r3, [r2, #28]

	GPIOA->MODER |= GPIO_MODER_MODER15_1; 		/* Configure Alternate function on PA15 (CS_N) */
 80045b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80045ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045c4:	6013      	str	r3, [r2, #0]
 	GPIOA->AFR[1] |= (6 << 28);					/* AF6 = SPI3/CS_N */
 80045c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80045ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80045d4:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->MODER |= GPIO_MODER_MODER3_1; 		/* Configure Alternate function on PB3 (SCK) */
 80045d6:	4a28      	ldr	r2, [pc, #160]	; (8004678 <cc2520_init+0xd8>)
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <cc2520_init+0xd8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e0:	6013      	str	r3, [r2, #0]
 	GPIOB->AFR[0] |= (6 << 12);					/* AF6 = SPI3/SCK */
 80045e2:	4a25      	ldr	r2, [pc, #148]	; (8004678 <cc2520_init+0xd8>)
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <cc2520_init+0xd8>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80045ec:	6213      	str	r3, [r2, #32]

	GPIOB->MODER |= GPIO_MODER_MODER4_1; 		/* Configure Alternate function on PB4 (MISO) */
 80045ee:	4a22      	ldr	r2, [pc, #136]	; (8004678 <cc2520_init+0xd8>)
 80045f0:	4b21      	ldr	r3, [pc, #132]	; (8004678 <cc2520_init+0xd8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f8:	6013      	str	r3, [r2, #0]
 	GPIOB->AFR[0] |= (6 << 16);					/* AF6 = SPI3/MISO */
 80045fa:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <cc2520_init+0xd8>)
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <cc2520_init+0xd8>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8004604:	6213      	str	r3, [r2, #32]

	GPIOB->MODER |= GPIO_MODER_MODER5_1; 		/* Configure Alternate function on PB5 (MOSI) */
 8004606:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <cc2520_init+0xd8>)
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <cc2520_init+0xd8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004610:	6013      	str	r3, [r2, #0]
 	GPIOB->AFR[0] |= (6 << 20);					/* AF6 = SPI3/MOSI */
 8004612:	4a19      	ldr	r2, [pc, #100]	; (8004678 <cc2520_init+0xd8>)
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <cc2520_init+0xd8>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 800461c:	6213      	str	r3, [r2, #32]

	//SPI3->CR1 |= SPI_CR1_SSM;
	SPI3->CR1 |= SPI_CR1_BR_2; /* f_pclk / 32 */
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <cc2520_init+0xdc>)
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <cc2520_init+0xdc>)
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f043 0320 	orr.w	r3, r3, #32
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]
	SPI3->CR1 |= SPI_CR1_MSTR;
 800462e:	4a13      	ldr	r2, [pc, #76]	; (800467c <cc2520_init+0xdc>)
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <cc2520_init+0xdc>)
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
	


	SPI3->CR2 |= SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN;
 800463e:	4a0f      	ldr	r2, [pc, #60]	; (800467c <cc2520_init+0xdc>)
 8004640:	4b0e      	ldr	r3, [pc, #56]	; (800467c <cc2520_init+0xdc>)
 8004642:	889b      	ldrh	r3, [r3, #4]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f043 0303 	orr.w	r3, r3, #3
 800464a:	b29b      	uxth	r3, r3
 800464c:	8093      	strh	r3, [r2, #4]

	SPI3->CR2 |= SPI_CR2_SSOE;
 800464e:	4a0b      	ldr	r2, [pc, #44]	; (800467c <cc2520_init+0xdc>)
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <cc2520_init+0xdc>)
 8004652:	889b      	ldrh	r3, [r3, #4]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	b29b      	uxth	r3, r3
 800465c:	8093      	strh	r3, [r2, #4]
	//DMA1->IFCR = 0xFFFFFFFF;
	//NVIC_EnableIRQ(DMA1_Channel7_IRQn);

	//SPI3->CR1 |= SPI_CR1_SPE;

	 tid_cc2520_thread = osThreadCreate (osThread(cc2520_thread), NULL);
 800465e:	2100      	movs	r1, #0
 8004660:	4807      	ldr	r0, [pc, #28]	; (8004680 <cc2520_init+0xe0>)
 8004662:	f7fd fb1b 	bl	8001c9c <osThreadCreate>
 8004666:	4602      	mov	r2, r0
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <cc2520_init+0xe4>)
 800466a:	601a      	str	r2, [r3, #0]

 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08005790 	.word	0x08005790
 8004674:	40021000 	.word	0x40021000
 8004678:	48000400 	.word	0x48000400
 800467c:	40003c00 	.word	0x40003c00
 8004680:	08006050 	.word	0x08006050
 8004684:	20003cf0 	.word	0x20003cf0

08004688 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004688:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800468a:	e003      	b.n	8004694 <LoopCopyDataInit>

0800468c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 800468e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004690:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004692:	3104      	adds	r1, #4

08004694 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004694:	480a      	ldr	r0, [pc, #40]	; (80046c0 <LoopForever+0x6>)
	ldr	r3, =_edata
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <LoopForever+0xa>)
	adds	r2, r0, r1
 8004698:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800469a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800469c:	d3f6      	bcc.n	800468c <CopyDataInit>
	ldr	r2, =_sbss
 800469e:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <LoopForever+0xe>)
	b	LoopFillZerobss
 80046a0:	e002      	b.n	80046a8 <LoopFillZerobss>

080046a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80046a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80046a4:	f842 3b04 	str.w	r3, [r2], #4

080046a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80046a8:	4b08      	ldr	r3, [pc, #32]	; (80046cc <LoopForever+0x12>)
	cmp	r2, r3
 80046aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80046ac:	d3f9      	bcc.n	80046a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046ae:	f7ff f9fb 	bl	8003aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046b2:	f000 f81d 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046b6:	f7ff fb73 	bl	8003da0 <main>

080046ba <LoopForever>:

LoopForever:
    b LoopForever
 80046ba:	e7fe      	b.n	80046ba <LoopForever>
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80046bc:	0800650c 	.word	0x0800650c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80046c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80046c4:	20000068 	.word	0x20000068
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80046c8:	20000068 	.word	0x20000068
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80046cc:	20003cf8 	.word	0x20003cf8

080046d0 <abort>:
 80046d0:	b508      	push	{r3, lr}
 80046d2:	2006      	movs	r0, #6
 80046d4:	f000 f908 	bl	80048e8 <raise>
 80046d8:	2001      	movs	r0, #1
 80046da:	f001 f821 	bl	8005720 <_exit>

080046de <bzero>:
 80046de:	4401      	add	r1, r0
 80046e0:	2300      	movs	r3, #0
 80046e2:	4288      	cmp	r0, r1
 80046e4:	d002      	beq.n	80046ec <bzero+0xe>
 80046e6:	f800 3b01 	strb.w	r3, [r0], #1
 80046ea:	e7fa      	b.n	80046e2 <bzero+0x4>
 80046ec:	4770      	bx	lr
	...

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4b0e      	ldr	r3, [pc, #56]	; (800472c <__libc_init_array+0x3c>)
 80046f4:	4c0e      	ldr	r4, [pc, #56]	; (8004730 <__libc_init_array+0x40>)
 80046f6:	1ae4      	subs	r4, r4, r3
 80046f8:	10a4      	asrs	r4, r4, #2
 80046fa:	2500      	movs	r5, #0
 80046fc:	461e      	mov	r6, r3
 80046fe:	42a5      	cmp	r5, r4
 8004700:	d004      	beq.n	800470c <__libc_init_array+0x1c>
 8004702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004706:	4798      	blx	r3
 8004708:	3501      	adds	r5, #1
 800470a:	e7f8      	b.n	80046fe <__libc_init_array+0xe>
 800470c:	f001 fcf6 	bl	80060fc <_init>
 8004710:	4c08      	ldr	r4, [pc, #32]	; (8004734 <__libc_init_array+0x44>)
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <__libc_init_array+0x48>)
 8004714:	1ae4      	subs	r4, r4, r3
 8004716:	10a4      	asrs	r4, r4, #2
 8004718:	2500      	movs	r5, #0
 800471a:	461e      	mov	r6, r3
 800471c:	42a5      	cmp	r5, r4
 800471e:	d004      	beq.n	800472a <__libc_init_array+0x3a>
 8004720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004724:	4798      	blx	r3
 8004726:	3501      	adds	r5, #1
 8004728:	e7f8      	b.n	800471c <__libc_init_array+0x2c>
 800472a:	bd70      	pop	{r4, r5, r6, pc}
	...

0800473c <memcpy>:
 800473c:	b510      	push	{r4, lr}
 800473e:	1e43      	subs	r3, r0, #1
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	d004      	beq.n	8004750 <memcpy+0x14>
 8004746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800474e:	e7f8      	b.n	8004742 <memcpy+0x6>
 8004750:	bd10      	pop	{r4, pc}

08004752 <memset>:
 8004752:	4402      	add	r2, r0
 8004754:	4603      	mov	r3, r0
 8004756:	4293      	cmp	r3, r2
 8004758:	d002      	beq.n	8004760 <memset+0xe>
 800475a:	f803 1b01 	strb.w	r1, [r3], #1
 800475e:	e7fa      	b.n	8004756 <memset+0x4>
 8004760:	4770      	bx	lr
	...

08004764 <iprintf>:
 8004764:	b40f      	push	{r0, r1, r2, r3}
 8004766:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <iprintf+0x2c>)
 8004768:	b513      	push	{r0, r1, r4, lr}
 800476a:	681c      	ldr	r4, [r3, #0]
 800476c:	b124      	cbz	r4, 8004778 <iprintf+0x14>
 800476e:	69a3      	ldr	r3, [r4, #24]
 8004770:	b913      	cbnz	r3, 8004778 <iprintf+0x14>
 8004772:	4620      	mov	r0, r4
 8004774:	f000 fa86 	bl	8004c84 <__sinit>
 8004778:	ab05      	add	r3, sp, #20
 800477a:	9a04      	ldr	r2, [sp, #16]
 800477c:	68a1      	ldr	r1, [r4, #8]
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	4620      	mov	r0, r4
 8004782:	f000 fc1b 	bl	8004fbc <_vfiprintf_r>
 8004786:	b002      	add	sp, #8
 8004788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800478c:	b004      	add	sp, #16
 800478e:	4770      	bx	lr
 8004790:	20000064 	.word	0x20000064

08004794 <_puts_r>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	460e      	mov	r6, r1
 8004798:	4605      	mov	r5, r0
 800479a:	b118      	cbz	r0, 80047a4 <_puts_r+0x10>
 800479c:	6983      	ldr	r3, [r0, #24]
 800479e:	b90b      	cbnz	r3, 80047a4 <_puts_r+0x10>
 80047a0:	f000 fa70 	bl	8004c84 <__sinit>
 80047a4:	69ab      	ldr	r3, [r5, #24]
 80047a6:	68ac      	ldr	r4, [r5, #8]
 80047a8:	b913      	cbnz	r3, 80047b0 <_puts_r+0x1c>
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 fa6a 	bl	8004c84 <__sinit>
 80047b0:	4b31      	ldr	r3, [pc, #196]	; (8004878 <_puts_r+0xe4>)
 80047b2:	429c      	cmp	r4, r3
 80047b4:	d101      	bne.n	80047ba <_puts_r+0x26>
 80047b6:	686c      	ldr	r4, [r5, #4]
 80047b8:	e008      	b.n	80047cc <_puts_r+0x38>
 80047ba:	4b30      	ldr	r3, [pc, #192]	; (800487c <_puts_r+0xe8>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d101      	bne.n	80047c4 <_puts_r+0x30>
 80047c0:	68ac      	ldr	r4, [r5, #8]
 80047c2:	e003      	b.n	80047cc <_puts_r+0x38>
 80047c4:	4b2e      	ldr	r3, [pc, #184]	; (8004880 <_puts_r+0xec>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	bf08      	it	eq
 80047ca:	68ec      	ldreq	r4, [r5, #12]
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	0719      	lsls	r1, r3, #28
 80047d0:	d501      	bpl.n	80047d6 <_puts_r+0x42>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	b983      	cbnz	r3, 80047f8 <_puts_r+0x64>
 80047d6:	4621      	mov	r1, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 f8f5 	bl	80049c8 <__swsetup_r>
 80047de:	b158      	cbz	r0, 80047f8 <_puts_r+0x64>
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0e      	blt.n	8004808 <_puts_r+0x74>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	f816 2b01 	ldrb.w	r2, [r6], #1
 80047fe:	3b01      	subs	r3, #1
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	2a00      	cmp	r2, #0
 8004804:	d1ef      	bne.n	80047e6 <_puts_r+0x52>
 8004806:	e016      	b.n	8004836 <_puts_r+0xa2>
 8004808:	69a2      	ldr	r2, [r4, #24]
 800480a:	4293      	cmp	r3, r2
 800480c:	db09      	blt.n	8004822 <_puts_r+0x8e>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	7819      	ldrb	r1, [r3, #0]
 800481a:	290a      	cmp	r1, #10
 800481c:	d1ea      	bne.n	80047f4 <_puts_r+0x60>
 800481e:	4622      	mov	r2, r4
 8004820:	e002      	b.n	8004828 <_puts_r+0x94>
 8004822:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004826:	4622      	mov	r2, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 f879 	bl	8004920 <__swbuf_r>
 800482e:	1c42      	adds	r2, r0, #1
 8004830:	4250      	negs	r0, r2
 8004832:	4150      	adcs	r0, r2
 8004834:	e7d3      	b.n	80047de <_puts_r+0x4a>
 8004836:	2b00      	cmp	r3, #0
 8004838:	da15      	bge.n	8004866 <_puts_r+0xd2>
 800483a:	69a2      	ldr	r2, [r4, #24]
 800483c:	4293      	cmp	r3, r2
 800483e:	db08      	blt.n	8004852 <_puts_r+0xbe>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	220a      	movs	r2, #10
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	7819      	ldrb	r1, [r3, #0]
 800484a:	4291      	cmp	r1, r2
 800484c:	d10f      	bne.n	800486e <_puts_r+0xda>
 800484e:	4622      	mov	r2, r4
 8004850:	e001      	b.n	8004856 <_puts_r+0xc2>
 8004852:	4622      	mov	r2, r4
 8004854:	210a      	movs	r1, #10
 8004856:	4628      	mov	r0, r5
 8004858:	f000 f862 	bl	8004920 <__swbuf_r>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	4258      	negs	r0, r3
 8004860:	4158      	adcs	r0, r3
 8004862:	b130      	cbz	r0, 8004872 <_puts_r+0xde>
 8004864:	e7bc      	b.n	80047e0 <_puts_r+0x4c>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	220a      	movs	r2, #10
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	200a      	movs	r0, #10
 8004874:	bd70      	pop	{r4, r5, r6, pc}
 8004876:	bf00      	nop
 8004878:	08006068 	.word	0x08006068
 800487c:	08006088 	.word	0x08006088
 8004880:	080060a8 	.word	0x080060a8

08004884 <puts>:
 8004884:	4b02      	ldr	r3, [pc, #8]	; (8004890 <puts+0xc>)
 8004886:	4601      	mov	r1, r0
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	f7ff bf83 	b.w	8004794 <_puts_r>
 800488e:	bf00      	nop
 8004890:	20000064 	.word	0x20000064

08004894 <_raise_r>:
 8004894:	291f      	cmp	r1, #31
 8004896:	b538      	push	{r3, r4, r5, lr}
 8004898:	4604      	mov	r4, r0
 800489a:	460d      	mov	r5, r1
 800489c:	d904      	bls.n	80048a8 <_raise_r+0x14>
 800489e:	2316      	movs	r3, #22
 80048a0:	6003      	str	r3, [r0, #0]
 80048a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80048aa:	b112      	cbz	r2, 80048b2 <_raise_r+0x1e>
 80048ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80048b0:	b94b      	cbnz	r3, 80048c6 <_raise_r+0x32>
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 f832 	bl	800491c <_getpid_r>
 80048b8:	462a      	mov	r2, r5
 80048ba:	4601      	mov	r1, r0
 80048bc:	4620      	mov	r0, r4
 80048be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c2:	f000 b819 	b.w	80048f8 <_kill_r>
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d00c      	beq.n	80048e4 <_raise_r+0x50>
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	d103      	bne.n	80048d6 <_raise_r+0x42>
 80048ce:	2316      	movs	r3, #22
 80048d0:	6003      	str	r3, [r0, #0]
 80048d2:	2001      	movs	r0, #1
 80048d4:	bd38      	pop	{r3, r4, r5, pc}
 80048d6:	2400      	movs	r4, #0
 80048d8:	4628      	mov	r0, r5
 80048da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80048de:	4798      	blx	r3
 80048e0:	4620      	mov	r0, r4
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	2000      	movs	r0, #0
 80048e6:	bd38      	pop	{r3, r4, r5, pc}

080048e8 <raise>:
 80048e8:	4b02      	ldr	r3, [pc, #8]	; (80048f4 <raise+0xc>)
 80048ea:	4601      	mov	r1, r0
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	f7ff bfd1 	b.w	8004894 <_raise_r>
 80048f2:	bf00      	nop
 80048f4:	20000064 	.word	0x20000064

080048f8 <_kill_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4c07      	ldr	r4, [pc, #28]	; (8004918 <_kill_r+0x20>)
 80048fc:	2300      	movs	r3, #0
 80048fe:	4605      	mov	r5, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	f000 feed 	bl	80056e4 <_kill>
 800490a:	1c43      	adds	r3, r0, #1
 800490c:	d102      	bne.n	8004914 <_kill_r+0x1c>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	b103      	cbz	r3, 8004914 <_kill_r+0x1c>
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	bd38      	pop	{r3, r4, r5, pc}
 8004916:	bf00      	nop
 8004918:	20003cf4 	.word	0x20003cf4

0800491c <_getpid_r>:
 800491c:	f000 bed2 	b.w	80056c4 <_getpid>

08004920 <__swbuf_r>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	460f      	mov	r7, r1
 8004924:	4614      	mov	r4, r2
 8004926:	4606      	mov	r6, r0
 8004928:	b118      	cbz	r0, 8004932 <__swbuf_r+0x12>
 800492a:	6983      	ldr	r3, [r0, #24]
 800492c:	b90b      	cbnz	r3, 8004932 <__swbuf_r+0x12>
 800492e:	f000 f9a9 	bl	8004c84 <__sinit>
 8004932:	4b22      	ldr	r3, [pc, #136]	; (80049bc <__swbuf_r+0x9c>)
 8004934:	429c      	cmp	r4, r3
 8004936:	d101      	bne.n	800493c <__swbuf_r+0x1c>
 8004938:	6874      	ldr	r4, [r6, #4]
 800493a:	e008      	b.n	800494e <__swbuf_r+0x2e>
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <__swbuf_r+0xa0>)
 800493e:	429c      	cmp	r4, r3
 8004940:	d101      	bne.n	8004946 <__swbuf_r+0x26>
 8004942:	68b4      	ldr	r4, [r6, #8]
 8004944:	e003      	b.n	800494e <__swbuf_r+0x2e>
 8004946:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <__swbuf_r+0xa4>)
 8004948:	429c      	cmp	r4, r3
 800494a:	bf08      	it	eq
 800494c:	68f4      	ldreq	r4, [r6, #12]
 800494e:	69a3      	ldr	r3, [r4, #24]
 8004950:	60a3      	str	r3, [r4, #8]
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	071a      	lsls	r2, r3, #28
 8004956:	d509      	bpl.n	800496c <__swbuf_r+0x4c>
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	b13b      	cbz	r3, 800496c <__swbuf_r+0x4c>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	6920      	ldr	r0, [r4, #16]
 8004960:	1a18      	subs	r0, r3, r0
 8004962:	6963      	ldr	r3, [r4, #20]
 8004964:	4298      	cmp	r0, r3
 8004966:	b2fd      	uxtb	r5, r7
 8004968:	db0f      	blt.n	800498a <__swbuf_r+0x6a>
 800496a:	e008      	b.n	800497e <__swbuf_r+0x5e>
 800496c:	4621      	mov	r1, r4
 800496e:	4630      	mov	r0, r6
 8004970:	f000 f82a 	bl	80049c8 <__swsetup_r>
 8004974:	2800      	cmp	r0, #0
 8004976:	d0f1      	beq.n	800495c <__swbuf_r+0x3c>
 8004978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800497c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800497e:	4621      	mov	r1, r4
 8004980:	4630      	mov	r0, r6
 8004982:	f000 f915 	bl	8004bb0 <_fflush_r>
 8004986:	2800      	cmp	r0, #0
 8004988:	d1f6      	bne.n	8004978 <__swbuf_r+0x58>
 800498a:	68a3      	ldr	r3, [r4, #8]
 800498c:	3b01      	subs	r3, #1
 800498e:	60a3      	str	r3, [r4, #8]
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	6022      	str	r2, [r4, #0]
 8004996:	701f      	strb	r7, [r3, #0]
 8004998:	6962      	ldr	r2, [r4, #20]
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <__swbuf_r+0x8a>
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	07db      	lsls	r3, r3, #31
 80049a4:	d507      	bpl.n	80049b6 <__swbuf_r+0x96>
 80049a6:	2d0a      	cmp	r5, #10
 80049a8:	d105      	bne.n	80049b6 <__swbuf_r+0x96>
 80049aa:	4621      	mov	r1, r4
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f8ff 	bl	8004bb0 <_fflush_r>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d1e0      	bne.n	8004978 <__swbuf_r+0x58>
 80049b6:	4628      	mov	r0, r5
 80049b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ba:	bf00      	nop
 80049bc:	08006068 	.word	0x08006068
 80049c0:	08006088 	.word	0x08006088
 80049c4:	080060a8 	.word	0x080060a8

080049c8 <__swsetup_r>:
 80049c8:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <__swsetup_r+0xc8>)
 80049ca:	b570      	push	{r4, r5, r6, lr}
 80049cc:	681d      	ldr	r5, [r3, #0]
 80049ce:	4606      	mov	r6, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	b125      	cbz	r5, 80049de <__swsetup_r+0x16>
 80049d4:	69ab      	ldr	r3, [r5, #24]
 80049d6:	b913      	cbnz	r3, 80049de <__swsetup_r+0x16>
 80049d8:	4628      	mov	r0, r5
 80049da:	f000 f953 	bl	8004c84 <__sinit>
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <__swsetup_r+0xcc>)
 80049e0:	429c      	cmp	r4, r3
 80049e2:	d101      	bne.n	80049e8 <__swsetup_r+0x20>
 80049e4:	686c      	ldr	r4, [r5, #4]
 80049e6:	e008      	b.n	80049fa <__swsetup_r+0x32>
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <__swsetup_r+0xd0>)
 80049ea:	429c      	cmp	r4, r3
 80049ec:	d101      	bne.n	80049f2 <__swsetup_r+0x2a>
 80049ee:	68ac      	ldr	r4, [r5, #8]
 80049f0:	e003      	b.n	80049fa <__swsetup_r+0x32>
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <__swsetup_r+0xd4>)
 80049f4:	429c      	cmp	r4, r3
 80049f6:	bf08      	it	eq
 80049f8:	68ec      	ldreq	r4, [r5, #12]
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	0711      	lsls	r1, r2, #28
 8004a00:	d41d      	bmi.n	8004a3e <__swsetup_r+0x76>
 8004a02:	06d5      	lsls	r5, r2, #27
 8004a04:	d402      	bmi.n	8004a0c <__swsetup_r+0x44>
 8004a06:	2209      	movs	r2, #9
 8004a08:	6032      	str	r2, [r6, #0]
 8004a0a:	e038      	b.n	8004a7e <__swsetup_r+0xb6>
 8004a0c:	0750      	lsls	r0, r2, #29
 8004a0e:	d512      	bpl.n	8004a36 <__swsetup_r+0x6e>
 8004a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a12:	b141      	cbz	r1, 8004a26 <__swsetup_r+0x5e>
 8004a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	d002      	beq.n	8004a22 <__swsetup_r+0x5a>
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f000 fa09 	bl	8004e34 <_free_r>
 8004a22:	2300      	movs	r3, #0
 8004a24:	6363      	str	r3, [r4, #52]	; 0x34
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6063      	str	r3, [r4, #4]
 8004a32:	6923      	ldr	r3, [r4, #16]
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	f043 0308 	orr.w	r3, r3, #8
 8004a3c:	81a3      	strh	r3, [r4, #12]
 8004a3e:	6923      	ldr	r3, [r4, #16]
 8004a40:	b94b      	cbnz	r3, 8004a56 <__swsetup_r+0x8e>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4c:	d003      	beq.n	8004a56 <__swsetup_r+0x8e>
 8004a4e:	4621      	mov	r1, r4
 8004a50:	4630      	mov	r0, r6
 8004a52:	f000 f9a1 	bl	8004d98 <__smakebuf_r>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	f013 0201 	ands.w	r2, r3, #1
 8004a5c:	d005      	beq.n	8004a6a <__swsetup_r+0xa2>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	60a2      	str	r2, [r4, #8]
 8004a62:	6962      	ldr	r2, [r4, #20]
 8004a64:	4252      	negs	r2, r2
 8004a66:	61a2      	str	r2, [r4, #24]
 8004a68:	e003      	b.n	8004a72 <__swsetup_r+0xaa>
 8004a6a:	0799      	lsls	r1, r3, #30
 8004a6c:	bf58      	it	pl
 8004a6e:	6962      	ldrpl	r2, [r4, #20]
 8004a70:	60a2      	str	r2, [r4, #8]
 8004a72:	6922      	ldr	r2, [r4, #16]
 8004a74:	b94a      	cbnz	r2, 8004a8a <__swsetup_r+0xc2>
 8004a76:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004a7a:	b280      	uxth	r0, r0
 8004a7c:	b130      	cbz	r0, 8004a8c <__swsetup_r+0xc4>
 8004a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	bd70      	pop	{r4, r5, r6, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000064 	.word	0x20000064
 8004a94:	08006068 	.word	0x08006068
 8004a98:	08006088 	.word	0x08006088
 8004a9c:	080060a8 	.word	0x080060a8

08004aa0 <__sflush_r>:
 8004aa0:	898a      	ldrh	r2, [r1, #12]
 8004aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	0710      	lsls	r0, r2, #28
 8004aaa:	460c      	mov	r4, r1
 8004aac:	d459      	bmi.n	8004b62 <__sflush_r+0xc2>
 8004aae:	684b      	ldr	r3, [r1, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dc02      	bgt.n	8004aba <__sflush_r+0x1a>
 8004ab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	dd17      	ble.n	8004aea <__sflush_r+0x4a>
 8004aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004abc:	b1ae      	cbz	r6, 8004aea <__sflush_r+0x4a>
 8004abe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	682f      	ldr	r7, [r5, #0]
 8004ac8:	602b      	str	r3, [r5, #0]
 8004aca:	b10a      	cbz	r2, 8004ad0 <__sflush_r+0x30>
 8004acc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ace:	e015      	b.n	8004afc <__sflush_r+0x5c>
 8004ad0:	6a21      	ldr	r1, [r4, #32]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b0      	blx	r6
 8004ad8:	1c41      	adds	r1, r0, #1
 8004ada:	d10f      	bne.n	8004afc <__sflush_r+0x5c>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b16b      	cbz	r3, 8004afc <__sflush_r+0x5c>
 8004ae0:	2b1d      	cmp	r3, #29
 8004ae2:	d001      	beq.n	8004ae8 <__sflush_r+0x48>
 8004ae4:	2b16      	cmp	r3, #22
 8004ae6:	d103      	bne.n	8004af0 <__sflush_r+0x50>
 8004ae8:	602f      	str	r7, [r5, #0]
 8004aea:	2000      	movs	r0, #0
 8004aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	075a      	lsls	r2, r3, #29
 8004b00:	d505      	bpl.n	8004b0e <__sflush_r+0x6e>
 8004b02:	6863      	ldr	r3, [r4, #4]
 8004b04:	1ac0      	subs	r0, r0, r3
 8004b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b08:	b10b      	cbz	r3, 8004b0e <__sflush_r+0x6e>
 8004b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b0c:	1ac0      	subs	r0, r0, r3
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4602      	mov	r2, r0
 8004b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b14:	6a21      	ldr	r1, [r4, #32]
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b0      	blx	r6
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	d106      	bne.n	8004b2e <__sflush_r+0x8e>
 8004b20:	6829      	ldr	r1, [r5, #0]
 8004b22:	291d      	cmp	r1, #29
 8004b24:	d83a      	bhi.n	8004b9c <__sflush_r+0xfc>
 8004b26:	4a21      	ldr	r2, [pc, #132]	; (8004bac <__sflush_r+0x10c>)
 8004b28:	40ca      	lsrs	r2, r1
 8004b2a:	07d6      	lsls	r6, r2, #31
 8004b2c:	d536      	bpl.n	8004b9c <__sflush_r+0xfc>
 8004b2e:	2200      	movs	r2, #0
 8004b30:	6062      	str	r2, [r4, #4]
 8004b32:	04d9      	lsls	r1, r3, #19
 8004b34:	6922      	ldr	r2, [r4, #16]
 8004b36:	6022      	str	r2, [r4, #0]
 8004b38:	d504      	bpl.n	8004b44 <__sflush_r+0xa4>
 8004b3a:	1c42      	adds	r2, r0, #1
 8004b3c:	d101      	bne.n	8004b42 <__sflush_r+0xa2>
 8004b3e:	682b      	ldr	r3, [r5, #0]
 8004b40:	b903      	cbnz	r3, 8004b44 <__sflush_r+0xa4>
 8004b42:	6560      	str	r0, [r4, #84]	; 0x54
 8004b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b46:	602f      	str	r7, [r5, #0]
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	d0ce      	beq.n	8004aea <__sflush_r+0x4a>
 8004b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b50:	4299      	cmp	r1, r3
 8004b52:	d002      	beq.n	8004b5a <__sflush_r+0xba>
 8004b54:	4628      	mov	r0, r5
 8004b56:	f000 f96d 	bl	8004e34 <_free_r>
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8004b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b62:	690f      	ldr	r7, [r1, #16]
 8004b64:	2f00      	cmp	r7, #0
 8004b66:	d0c0      	beq.n	8004aea <__sflush_r+0x4a>
 8004b68:	0793      	lsls	r3, r2, #30
 8004b6a:	680e      	ldr	r6, [r1, #0]
 8004b6c:	bf08      	it	eq
 8004b6e:	694b      	ldreq	r3, [r1, #20]
 8004b70:	600f      	str	r7, [r1, #0]
 8004b72:	bf18      	it	ne
 8004b74:	2300      	movne	r3, #0
 8004b76:	ebc7 0806 	rsb	r8, r7, r6
 8004b7a:	608b      	str	r3, [r1, #8]
 8004b7c:	e002      	b.n	8004b84 <__sflush_r+0xe4>
 8004b7e:	4407      	add	r7, r0
 8004b80:	ebc0 0808 	rsb	r8, r0, r8
 8004b84:	f1b8 0f00 	cmp.w	r8, #0
 8004b88:	ddaf      	ble.n	8004aea <__sflush_r+0x4a>
 8004b8a:	4643      	mov	r3, r8
 8004b8c:	463a      	mov	r2, r7
 8004b8e:	6a21      	ldr	r1, [r4, #32]
 8004b90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b92:	4628      	mov	r0, r5
 8004b94:	47b0      	blx	r6
 8004b96:	2800      	cmp	r0, #0
 8004b98:	dcf1      	bgt.n	8004b7e <__sflush_r+0xde>
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004baa:	bf00      	nop
 8004bac:	20400001 	.word	0x20400001

08004bb0 <_fflush_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	690b      	ldr	r3, [r1, #16]
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	b1db      	cbz	r3, 8004bf2 <_fflush_r+0x42>
 8004bba:	b118      	cbz	r0, 8004bc4 <_fflush_r+0x14>
 8004bbc:	6983      	ldr	r3, [r0, #24]
 8004bbe:	b90b      	cbnz	r3, 8004bc4 <_fflush_r+0x14>
 8004bc0:	f000 f860 	bl	8004c84 <__sinit>
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <_fflush_r+0x48>)
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d101      	bne.n	8004bce <_fflush_r+0x1e>
 8004bca:	686c      	ldr	r4, [r5, #4]
 8004bcc:	e008      	b.n	8004be0 <_fflush_r+0x30>
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <_fflush_r+0x4c>)
 8004bd0:	429c      	cmp	r4, r3
 8004bd2:	d101      	bne.n	8004bd8 <_fflush_r+0x28>
 8004bd4:	68ac      	ldr	r4, [r5, #8]
 8004bd6:	e003      	b.n	8004be0 <_fflush_r+0x30>
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <_fflush_r+0x50>)
 8004bda:	429c      	cmp	r4, r3
 8004bdc:	bf08      	it	eq
 8004bde:	68ec      	ldreq	r4, [r5, #12]
 8004be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be4:	b12b      	cbz	r3, 8004bf2 <_fflush_r+0x42>
 8004be6:	4621      	mov	r1, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bee:	f7ff bf57 	b.w	8004aa0 <__sflush_r>
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	bd38      	pop	{r3, r4, r5, pc}
 8004bf6:	bf00      	nop
 8004bf8:	08006068 	.word	0x08006068
 8004bfc:	08006088 	.word	0x08006088
 8004c00:	080060a8 	.word	0x080060a8

08004c04 <_cleanup_r>:
 8004c04:	4901      	ldr	r1, [pc, #4]	; (8004c0c <_cleanup_r+0x8>)
 8004c06:	f000 b8a9 	b.w	8004d5c <_fwalk_reent>
 8004c0a:	bf00      	nop
 8004c0c:	08004bb1 	.word	0x08004bb1

08004c10 <std.isra.0>:
 8004c10:	2300      	movs	r3, #0
 8004c12:	b510      	push	{r4, lr}
 8004c14:	4604      	mov	r4, r0
 8004c16:	6003      	str	r3, [r0, #0]
 8004c18:	6043      	str	r3, [r0, #4]
 8004c1a:	6083      	str	r3, [r0, #8]
 8004c1c:	8181      	strh	r1, [r0, #12]
 8004c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c20:	81c2      	strh	r2, [r0, #14]
 8004c22:	6103      	str	r3, [r0, #16]
 8004c24:	6143      	str	r3, [r0, #20]
 8004c26:	6183      	str	r3, [r0, #24]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	305c      	adds	r0, #92	; 0x5c
 8004c2e:	f7ff fd90 	bl	8004752 <memset>
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <std.isra.0+0x38>)
 8004c34:	6263      	str	r3, [r4, #36]	; 0x24
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <std.isra.0+0x3c>)
 8004c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <std.isra.0+0x40>)
 8004c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <std.isra.0+0x44>)
 8004c40:	6224      	str	r4, [r4, #32]
 8004c42:	6323      	str	r3, [r4, #48]	; 0x30
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	bf00      	nop
 8004c48:	0800554d 	.word	0x0800554d
 8004c4c:	0800556f 	.word	0x0800556f
 8004c50:	080055a7 	.word	0x080055a7
 8004c54:	080055cb 	.word	0x080055cb

08004c58 <__sfmoreglue>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	2368      	movs	r3, #104	; 0x68
 8004c5c:	1e4d      	subs	r5, r1, #1
 8004c5e:	435d      	muls	r5, r3
 8004c60:	460e      	mov	r6, r1
 8004c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c66:	f000 f92b 	bl	8004ec0 <_malloc_r>
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	b140      	cbz	r0, 8004c80 <__sfmoreglue+0x28>
 8004c6e:	2100      	movs	r1, #0
 8004c70:	e880 0042 	stmia.w	r0, {r1, r6}
 8004c74:	300c      	adds	r0, #12
 8004c76:	60a0      	str	r0, [r4, #8]
 8004c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c7c:	f7ff fd69 	bl	8004752 <memset>
 8004c80:	4620      	mov	r0, r4
 8004c82:	bd70      	pop	{r4, r5, r6, pc}

08004c84 <__sinit>:
 8004c84:	6983      	ldr	r3, [r0, #24]
 8004c86:	b510      	push	{r4, lr}
 8004c88:	4604      	mov	r4, r0
 8004c8a:	bb33      	cbnz	r3, 8004cda <__sinit+0x56>
 8004c8c:	6483      	str	r3, [r0, #72]	; 0x48
 8004c8e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004c90:	6503      	str	r3, [r0, #80]	; 0x50
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <__sinit+0x58>)
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <__sinit+0x5c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6282      	str	r2, [r0, #40]	; 0x28
 8004c9a:	4298      	cmp	r0, r3
 8004c9c:	bf04      	itt	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	6183      	streq	r3, [r0, #24]
 8004ca2:	f000 f81f 	bl	8004ce4 <__sfp>
 8004ca6:	6060      	str	r0, [r4, #4]
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f000 f81b 	bl	8004ce4 <__sfp>
 8004cae:	60a0      	str	r0, [r4, #8]
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f000 f817 	bl	8004ce4 <__sfp>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	60e0      	str	r0, [r4, #12]
 8004cba:	2104      	movs	r1, #4
 8004cbc:	6860      	ldr	r0, [r4, #4]
 8004cbe:	f7ff ffa7 	bl	8004c10 <std.isra.0>
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	2109      	movs	r1, #9
 8004cc6:	68a0      	ldr	r0, [r4, #8]
 8004cc8:	f7ff ffa2 	bl	8004c10 <std.isra.0>
 8004ccc:	2202      	movs	r2, #2
 8004cce:	2112      	movs	r1, #18
 8004cd0:	68e0      	ldr	r0, [r4, #12]
 8004cd2:	f7ff ff9d 	bl	8004c10 <std.isra.0>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61a3      	str	r3, [r4, #24]
 8004cda:	bd10      	pop	{r4, pc}
 8004cdc:	08006064 	.word	0x08006064
 8004ce0:	08004c05 	.word	0x08004c05

08004ce4 <__sfp>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <__sfp+0x74>)
 8004ce8:	681e      	ldr	r6, [r3, #0]
 8004cea:	69b3      	ldr	r3, [r6, #24]
 8004cec:	4607      	mov	r7, r0
 8004cee:	b913      	cbnz	r3, 8004cf6 <__sfp+0x12>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff ffc7 	bl	8004c84 <__sinit>
 8004cf6:	3648      	adds	r6, #72	; 0x48
 8004cf8:	68b4      	ldr	r4, [r6, #8]
 8004cfa:	6873      	ldr	r3, [r6, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	d404      	bmi.n	8004d0a <__sfp+0x26>
 8004d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d04:	b17d      	cbz	r5, 8004d26 <__sfp+0x42>
 8004d06:	3468      	adds	r4, #104	; 0x68
 8004d08:	e7f8      	b.n	8004cfc <__sfp+0x18>
 8004d0a:	6833      	ldr	r3, [r6, #0]
 8004d0c:	b10b      	cbz	r3, 8004d12 <__sfp+0x2e>
 8004d0e:	6836      	ldr	r6, [r6, #0]
 8004d10:	e7f2      	b.n	8004cf8 <__sfp+0x14>
 8004d12:	2104      	movs	r1, #4
 8004d14:	4638      	mov	r0, r7
 8004d16:	f7ff ff9f 	bl	8004c58 <__sfmoreglue>
 8004d1a:	6030      	str	r0, [r6, #0]
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d1f6      	bne.n	8004d0e <__sfp+0x2a>
 8004d20:	230c      	movs	r3, #12
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d2a:	81e3      	strh	r3, [r4, #14]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	6665      	str	r5, [r4, #100]	; 0x64
 8004d32:	6025      	str	r5, [r4, #0]
 8004d34:	60a5      	str	r5, [r4, #8]
 8004d36:	6065      	str	r5, [r4, #4]
 8004d38:	6125      	str	r5, [r4, #16]
 8004d3a:	6165      	str	r5, [r4, #20]
 8004d3c:	61a5      	str	r5, [r4, #24]
 8004d3e:	2208      	movs	r2, #8
 8004d40:	4629      	mov	r1, r5
 8004d42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d46:	f7ff fd04 	bl	8004752 <memset>
 8004d4a:	6365      	str	r5, [r4, #52]	; 0x34
 8004d4c:	63a5      	str	r5, [r4, #56]	; 0x38
 8004d4e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004d50:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004d52:	4620      	mov	r0, r4
 8004d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d56:	bf00      	nop
 8004d58:	08006064 	.word	0x08006064

08004d5c <_fwalk_reent>:
 8004d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d60:	4680      	mov	r8, r0
 8004d62:	4689      	mov	r9, r1
 8004d64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d68:	2600      	movs	r6, #0
 8004d6a:	b194      	cbz	r4, 8004d92 <_fwalk_reent+0x36>
 8004d6c:	68a5      	ldr	r5, [r4, #8]
 8004d6e:	6867      	ldr	r7, [r4, #4]
 8004d70:	3f01      	subs	r7, #1
 8004d72:	d40c      	bmi.n	8004d8e <_fwalk_reent+0x32>
 8004d74:	89ab      	ldrh	r3, [r5, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d907      	bls.n	8004d8a <_fwalk_reent+0x2e>
 8004d7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	d003      	beq.n	8004d8a <_fwalk_reent+0x2e>
 8004d82:	4629      	mov	r1, r5
 8004d84:	4640      	mov	r0, r8
 8004d86:	47c8      	blx	r9
 8004d88:	4306      	orrs	r6, r0
 8004d8a:	3568      	adds	r5, #104	; 0x68
 8004d8c:	e7f0      	b.n	8004d70 <_fwalk_reent+0x14>
 8004d8e:	6824      	ldr	r4, [r4, #0]
 8004d90:	e7eb      	b.n	8004d6a <_fwalk_reent+0xe>
 8004d92:	4630      	mov	r0, r6
 8004d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004d98 <__smakebuf_r>:
 8004d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9a:	898b      	ldrh	r3, [r1, #12]
 8004d9c:	079d      	lsls	r5, r3, #30
 8004d9e:	b091      	sub	sp, #68	; 0x44
 8004da0:	4606      	mov	r6, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	d426      	bmi.n	8004df4 <__smakebuf_r+0x5c>
 8004da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004daa:	2900      	cmp	r1, #0
 8004dac:	da09      	bge.n	8004dc2 <__smakebuf_r+0x2a>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004db4:	f04f 0500 	mov.w	r5, #0
 8004db8:	bf14      	ite	ne
 8004dba:	2740      	movne	r7, #64	; 0x40
 8004dbc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8004dc0:	e00d      	b.n	8004dde <__smakebuf_r+0x46>
 8004dc2:	aa01      	add	r2, sp, #4
 8004dc4:	f000 fc28 	bl	8005618 <_fstat_r>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	dbf0      	blt.n	8004dae <__smakebuf_r+0x16>
 8004dcc:	9d02      	ldr	r5, [sp, #8]
 8004dce:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8004dd2:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8004dd6:	424d      	negs	r5, r1
 8004dd8:	414d      	adcs	r5, r1
 8004dda:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8004dde:	4639      	mov	r1, r7
 8004de0:	4630      	mov	r0, r6
 8004de2:	f000 f86d 	bl	8004ec0 <_malloc_r>
 8004de6:	b960      	cbnz	r0, 8004e02 <__smakebuf_r+0x6a>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	059a      	lsls	r2, r3, #22
 8004dec:	d41d      	bmi.n	8004e2a <__smakebuf_r+0x92>
 8004dee:	f043 0302 	orr.w	r3, r3, #2
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	6123      	str	r3, [r4, #16]
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	6163      	str	r3, [r4, #20]
 8004e00:	e013      	b.n	8004e2a <__smakebuf_r+0x92>
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <__smakebuf_r+0x98>)
 8004e04:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	6020      	str	r0, [r4, #0]
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	6120      	str	r0, [r4, #16]
 8004e12:	6167      	str	r7, [r4, #20]
 8004e14:	b14d      	cbz	r5, 8004e2a <__smakebuf_r+0x92>
 8004e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f000 fc0e 	bl	800563c <_isatty_r>
 8004e20:	b118      	cbz	r0, 8004e2a <__smakebuf_r+0x92>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	b011      	add	sp, #68	; 0x44
 8004e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	08004c05 	.word	0x08004c05

08004e34 <_free_r>:
 8004e34:	b530      	push	{r4, r5, lr}
 8004e36:	2900      	cmp	r1, #0
 8004e38:	d03e      	beq.n	8004eb8 <_free_r+0x84>
 8004e3a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8004e3e:	1f0b      	subs	r3, r1, #4
 8004e40:	491e      	ldr	r1, [pc, #120]	; (8004ebc <_free_r+0x88>)
 8004e42:	2a00      	cmp	r2, #0
 8004e44:	bfb8      	it	lt
 8004e46:	189b      	addlt	r3, r3, r2
 8004e48:	680a      	ldr	r2, [r1, #0]
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	b912      	cbnz	r2, 8004e54 <_free_r+0x20>
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	600b      	str	r3, [r1, #0]
 8004e52:	bd30      	pop	{r4, r5, pc}
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d90e      	bls.n	8004e76 <_free_r+0x42>
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	1858      	adds	r0, r3, r1
 8004e5c:	4282      	cmp	r2, r0
 8004e5e:	bf04      	itt	eq
 8004e60:	6810      	ldreq	r0, [r2, #0]
 8004e62:	6852      	ldreq	r2, [r2, #4]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	bf04      	itt	eq
 8004e68:	1809      	addeq	r1, r1, r0
 8004e6a:	6019      	streq	r1, [r3, #0]
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd30      	pop	{r4, r5, pc}
 8004e70:	4299      	cmp	r1, r3
 8004e72:	d803      	bhi.n	8004e7c <_free_r+0x48>
 8004e74:	460a      	mov	r2, r1
 8004e76:	6851      	ldr	r1, [r2, #4]
 8004e78:	2900      	cmp	r1, #0
 8004e7a:	d1f9      	bne.n	8004e70 <_free_r+0x3c>
 8004e7c:	6814      	ldr	r4, [r2, #0]
 8004e7e:	1915      	adds	r5, r2, r4
 8004e80:	429d      	cmp	r5, r3
 8004e82:	d10a      	bne.n	8004e9a <_free_r+0x66>
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4423      	add	r3, r4
 8004e88:	18d0      	adds	r0, r2, r3
 8004e8a:	4281      	cmp	r1, r0
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	d113      	bne.n	8004eb8 <_free_r+0x84>
 8004e90:	6808      	ldr	r0, [r1, #0]
 8004e92:	4403      	add	r3, r0
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	684b      	ldr	r3, [r1, #4]
 8004e98:	e00d      	b.n	8004eb6 <_free_r+0x82>
 8004e9a:	d902      	bls.n	8004ea2 <_free_r+0x6e>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	6003      	str	r3, [r0, #0]
 8004ea0:	bd30      	pop	{r4, r5, pc}
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	181c      	adds	r4, r3, r0
 8004ea6:	42a1      	cmp	r1, r4
 8004ea8:	bf04      	itt	eq
 8004eaa:	680c      	ldreq	r4, [r1, #0]
 8004eac:	6849      	ldreq	r1, [r1, #4]
 8004eae:	6059      	str	r1, [r3, #4]
 8004eb0:	bf04      	itt	eq
 8004eb2:	1900      	addeq	r0, r0, r4
 8004eb4:	6018      	streq	r0, [r3, #0]
 8004eb6:	6053      	str	r3, [r2, #4]
 8004eb8:	bd30      	pop	{r4, r5, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000168 	.word	0x20000168

08004ec0 <_malloc_r>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	1ccd      	adds	r5, r1, #3
 8004ec4:	f025 0503 	bic.w	r5, r5, #3
 8004ec8:	3508      	adds	r5, #8
 8004eca:	2d0c      	cmp	r5, #12
 8004ecc:	bf38      	it	cc
 8004ece:	250c      	movcc	r5, #12
 8004ed0:	2d00      	cmp	r5, #0
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	da03      	bge.n	8004ede <_malloc_r+0x1e>
 8004ed6:	230c      	movs	r3, #12
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	2000      	movs	r0, #0
 8004edc:	bd70      	pop	{r4, r5, r6, pc}
 8004ede:	42a9      	cmp	r1, r5
 8004ee0:	d8f9      	bhi.n	8004ed6 <_malloc_r+0x16>
 8004ee2:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <_malloc_r+0xa0>)
 8004ee4:	681c      	ldr	r4, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4621      	mov	r1, r4
 8004eea:	b1a1      	cbz	r1, 8004f16 <_malloc_r+0x56>
 8004eec:	680b      	ldr	r3, [r1, #0]
 8004eee:	1b5b      	subs	r3, r3, r5
 8004ef0:	d40e      	bmi.n	8004f10 <_malloc_r+0x50>
 8004ef2:	2b0b      	cmp	r3, #11
 8004ef4:	d903      	bls.n	8004efe <_malloc_r+0x3e>
 8004ef6:	600b      	str	r3, [r1, #0]
 8004ef8:	18cc      	adds	r4, r1, r3
 8004efa:	50cd      	str	r5, [r1, r3]
 8004efc:	e01e      	b.n	8004f3c <_malloc_r+0x7c>
 8004efe:	428c      	cmp	r4, r1
 8004f00:	bf0d      	iteet	eq
 8004f02:	6863      	ldreq	r3, [r4, #4]
 8004f04:	684b      	ldrne	r3, [r1, #4]
 8004f06:	6063      	strne	r3, [r4, #4]
 8004f08:	6013      	streq	r3, [r2, #0]
 8004f0a:	bf18      	it	ne
 8004f0c:	460c      	movne	r4, r1
 8004f0e:	e015      	b.n	8004f3c <_malloc_r+0x7c>
 8004f10:	460c      	mov	r4, r1
 8004f12:	6849      	ldr	r1, [r1, #4]
 8004f14:	e7e9      	b.n	8004eea <_malloc_r+0x2a>
 8004f16:	4c13      	ldr	r4, [pc, #76]	; (8004f64 <_malloc_r+0xa4>)
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	b91b      	cbnz	r3, 8004f24 <_malloc_r+0x64>
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 fb05 	bl	800552c <_sbrk_r>
 8004f22:	6020      	str	r0, [r4, #0]
 8004f24:	4629      	mov	r1, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	f000 fb00 	bl	800552c <_sbrk_r>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d0d2      	beq.n	8004ed6 <_malloc_r+0x16>
 8004f30:	1cc4      	adds	r4, r0, #3
 8004f32:	f024 0403 	bic.w	r4, r4, #3
 8004f36:	42a0      	cmp	r0, r4
 8004f38:	d10a      	bne.n	8004f50 <_malloc_r+0x90>
 8004f3a:	6025      	str	r5, [r4, #0]
 8004f3c:	f104 000b 	add.w	r0, r4, #11
 8004f40:	1d23      	adds	r3, r4, #4
 8004f42:	f020 0007 	bic.w	r0, r0, #7
 8004f46:	1ac3      	subs	r3, r0, r3
 8004f48:	d009      	beq.n	8004f5e <_malloc_r+0x9e>
 8004f4a:	425a      	negs	r2, r3
 8004f4c:	50e2      	str	r2, [r4, r3]
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	1a21      	subs	r1, r4, r0
 8004f52:	4630      	mov	r0, r6
 8004f54:	f000 faea 	bl	800552c <_sbrk_r>
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d1ee      	bne.n	8004f3a <_malloc_r+0x7a>
 8004f5c:	e7bb      	b.n	8004ed6 <_malloc_r+0x16>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	20000168 	.word	0x20000168
 8004f64:	20000164 	.word	0x20000164

08004f68 <__sfputc_r>:
 8004f68:	6893      	ldr	r3, [r2, #8]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	b410      	push	{r4}
 8004f70:	6093      	str	r3, [r2, #8]
 8004f72:	da09      	bge.n	8004f88 <__sfputc_r+0x20>
 8004f74:	6994      	ldr	r4, [r2, #24]
 8004f76:	42a3      	cmp	r3, r4
 8004f78:	db02      	blt.n	8004f80 <__sfputc_r+0x18>
 8004f7a:	b2cb      	uxtb	r3, r1
 8004f7c:	2b0a      	cmp	r3, #10
 8004f7e:	d103      	bne.n	8004f88 <__sfputc_r+0x20>
 8004f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f84:	f7ff bccc 	b.w	8004920 <__swbuf_r>
 8004f88:	6813      	ldr	r3, [r2, #0]
 8004f8a:	1c58      	adds	r0, r3, #1
 8004f8c:	6010      	str	r0, [r2, #0]
 8004f8e:	7019      	strb	r1, [r3, #0]
 8004f90:	b2c8      	uxtb	r0, r1
 8004f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <__sfputs_r>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	460f      	mov	r7, r1
 8004f9e:	4614      	mov	r4, r2
 8004fa0:	18d5      	adds	r5, r2, r3
 8004fa2:	42ac      	cmp	r4, r5
 8004fa4:	d008      	beq.n	8004fb8 <__sfputs_r+0x20>
 8004fa6:	463a      	mov	r2, r7
 8004fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff ffdb 	bl	8004f68 <__sfputc_r>
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	d1f5      	bne.n	8004fa2 <__sfputs_r+0xa>
 8004fb6:	e000      	b.n	8004fba <__sfputs_r+0x22>
 8004fb8:	2000      	movs	r0, #0
 8004fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004fbc <_vfiprintf_r>:
 8004fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc0:	b09d      	sub	sp, #116	; 0x74
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	4617      	mov	r7, r2
 8004fc6:	9303      	str	r3, [sp, #12]
 8004fc8:	4606      	mov	r6, r0
 8004fca:	b118      	cbz	r0, 8004fd4 <_vfiprintf_r+0x18>
 8004fcc:	6983      	ldr	r3, [r0, #24]
 8004fce:	b90b      	cbnz	r3, 8004fd4 <_vfiprintf_r+0x18>
 8004fd0:	f7ff fe58 	bl	8004c84 <__sinit>
 8004fd4:	4b7f      	ldr	r3, [pc, #508]	; (80051d4 <_vfiprintf_r+0x218>)
 8004fd6:	429c      	cmp	r4, r3
 8004fd8:	d101      	bne.n	8004fde <_vfiprintf_r+0x22>
 8004fda:	6874      	ldr	r4, [r6, #4]
 8004fdc:	e008      	b.n	8004ff0 <_vfiprintf_r+0x34>
 8004fde:	4b7e      	ldr	r3, [pc, #504]	; (80051d8 <_vfiprintf_r+0x21c>)
 8004fe0:	429c      	cmp	r4, r3
 8004fe2:	d101      	bne.n	8004fe8 <_vfiprintf_r+0x2c>
 8004fe4:	68b4      	ldr	r4, [r6, #8]
 8004fe6:	e003      	b.n	8004ff0 <_vfiprintf_r+0x34>
 8004fe8:	4b7c      	ldr	r3, [pc, #496]	; (80051dc <_vfiprintf_r+0x220>)
 8004fea:	429c      	cmp	r4, r3
 8004fec:	bf08      	it	eq
 8004fee:	68f4      	ldreq	r4, [r6, #12]
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	0718      	lsls	r0, r3, #28
 8004ff4:	d50c      	bpl.n	8005010 <_vfiprintf_r+0x54>
 8004ff6:	6923      	ldr	r3, [r4, #16]
 8004ff8:	b153      	cbz	r3, 8005010 <_vfiprintf_r+0x54>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffe:	2320      	movs	r3, #32
 8005000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005004:	2330      	movs	r3, #48	; 0x30
 8005006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800500a:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80051e0 <_vfiprintf_r+0x224>
 800500e:	e044      	b.n	800509a <_vfiprintf_r+0xde>
 8005010:	4621      	mov	r1, r4
 8005012:	4630      	mov	r0, r6
 8005014:	f7ff fcd8 	bl	80049c8 <__swsetup_r>
 8005018:	2800      	cmp	r0, #0
 800501a:	d0ee      	beq.n	8004ffa <_vfiprintf_r+0x3e>
 800501c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005020:	e0d5      	b.n	80051ce <_vfiprintf_r+0x212>
 8005022:	9a03      	ldr	r2, [sp, #12]
 8005024:	1d11      	adds	r1, r2, #4
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	9103      	str	r1, [sp, #12]
 800502a:	2a00      	cmp	r2, #0
 800502c:	f280 808c 	bge.w	8005148 <_vfiprintf_r+0x18c>
 8005030:	4252      	negs	r2, r2
 8005032:	f043 0002 	orr.w	r0, r3, #2
 8005036:	9207      	str	r2, [sp, #28]
 8005038:	9004      	str	r0, [sp, #16]
 800503a:	f898 3000 	ldrb.w	r3, [r8]
 800503e:	2b2e      	cmp	r3, #46	; 0x2e
 8005040:	f000 8084 	beq.w	800514c <_vfiprintf_r+0x190>
 8005044:	2203      	movs	r2, #3
 8005046:	f898 1000 	ldrb.w	r1, [r8]
 800504a:	4865      	ldr	r0, [pc, #404]	; (80051e0 <_vfiprintf_r+0x224>)
 800504c:	f7fc fae0 	bl	8001610 <memchr>
 8005050:	b148      	cbz	r0, 8005066 <_vfiprintf_r+0xaa>
 8005052:	2340      	movs	r3, #64	; 0x40
 8005054:	ebcb 0000 	rsb	r0, fp, r0
 8005058:	fa03 f000 	lsl.w	r0, r3, r0
 800505c:	9b04      	ldr	r3, [sp, #16]
 800505e:	4318      	orrs	r0, r3
 8005060:	9004      	str	r0, [sp, #16]
 8005062:	f108 0801 	add.w	r8, r8, #1
 8005066:	f898 1000 	ldrb.w	r1, [r8]
 800506a:	485e      	ldr	r0, [pc, #376]	; (80051e4 <_vfiprintf_r+0x228>)
 800506c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005070:	2206      	movs	r2, #6
 8005072:	f108 0701 	add.w	r7, r8, #1
 8005076:	f7fc facb 	bl	8001610 <memchr>
 800507a:	2800      	cmp	r0, #0
 800507c:	f000 8095 	beq.w	80051aa <_vfiprintf_r+0x1ee>
 8005080:	4b59      	ldr	r3, [pc, #356]	; (80051e8 <_vfiprintf_r+0x22c>)
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 8088 	bne.w	8005198 <_vfiprintf_r+0x1dc>
 8005088:	9b03      	ldr	r3, [sp, #12]
 800508a:	3307      	adds	r3, #7
 800508c:	f023 0307 	bic.w	r3, r3, #7
 8005090:	3308      	adds	r3, #8
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005096:	4453      	add	r3, sl
 8005098:	9309      	str	r3, [sp, #36]	; 0x24
 800509a:	46b8      	mov	r8, r7
 800509c:	4645      	mov	r5, r8
 800509e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050a2:	b91b      	cbnz	r3, 80050ac <_vfiprintf_r+0xf0>
 80050a4:	ebb8 0907 	subs.w	r9, r8, r7
 80050a8:	d00f      	beq.n	80050ca <_vfiprintf_r+0x10e>
 80050aa:	e003      	b.n	80050b4 <_vfiprintf_r+0xf8>
 80050ac:	2b25      	cmp	r3, #37	; 0x25
 80050ae:	d0f9      	beq.n	80050a4 <_vfiprintf_r+0xe8>
 80050b0:	46a8      	mov	r8, r5
 80050b2:	e7f3      	b.n	800509c <_vfiprintf_r+0xe0>
 80050b4:	464b      	mov	r3, r9
 80050b6:	463a      	mov	r2, r7
 80050b8:	4621      	mov	r1, r4
 80050ba:	4630      	mov	r0, r6
 80050bc:	f7ff ff6c 	bl	8004f98 <__sfputs_r>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d07f      	beq.n	80051c4 <_vfiprintf_r+0x208>
 80050c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c6:	444b      	add	r3, r9
 80050c8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ca:	f898 3000 	ldrb.w	r3, [r8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d078      	beq.n	80051c4 <_vfiprintf_r+0x208>
 80050d2:	2300      	movs	r3, #0
 80050d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	9205      	str	r2, [sp, #20]
 80050de:	9306      	str	r3, [sp, #24]
 80050e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050e4:	931a      	str	r3, [sp, #104]	; 0x68
 80050e6:	2701      	movs	r7, #1
 80050e8:	2205      	movs	r2, #5
 80050ea:	7829      	ldrb	r1, [r5, #0]
 80050ec:	483f      	ldr	r0, [pc, #252]	; (80051ec <_vfiprintf_r+0x230>)
 80050ee:	f7fc fa8f 	bl	8001610 <memchr>
 80050f2:	f105 0801 	add.w	r8, r5, #1
 80050f6:	9b04      	ldr	r3, [sp, #16]
 80050f8:	b138      	cbz	r0, 800510a <_vfiprintf_r+0x14e>
 80050fa:	4a3c      	ldr	r2, [pc, #240]	; (80051ec <_vfiprintf_r+0x230>)
 80050fc:	1a80      	subs	r0, r0, r2
 80050fe:	fa07 f000 	lsl.w	r0, r7, r0
 8005102:	4318      	orrs	r0, r3
 8005104:	9004      	str	r0, [sp, #16]
 8005106:	4645      	mov	r5, r8
 8005108:	e7ee      	b.n	80050e8 <_vfiprintf_r+0x12c>
 800510a:	06d9      	lsls	r1, r3, #27
 800510c:	bf44      	itt	mi
 800510e:	2220      	movmi	r2, #32
 8005110:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005114:	071a      	lsls	r2, r3, #28
 8005116:	bf44      	itt	mi
 8005118:	222b      	movmi	r2, #43	; 0x2b
 800511a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800511e:	782a      	ldrb	r2, [r5, #0]
 8005120:	2a2a      	cmp	r2, #42	; 0x2a
 8005122:	f43f af7e 	beq.w	8005022 <_vfiprintf_r+0x66>
 8005126:	9a07      	ldr	r2, [sp, #28]
 8005128:	2100      	movs	r1, #0
 800512a:	200a      	movs	r0, #10
 800512c:	46a8      	mov	r8, r5
 800512e:	3501      	adds	r5, #1
 8005130:	f898 3000 	ldrb.w	r3, [r8]
 8005134:	3b30      	subs	r3, #48	; 0x30
 8005136:	2b09      	cmp	r3, #9
 8005138:	d803      	bhi.n	8005142 <_vfiprintf_r+0x186>
 800513a:	fb00 3202 	mla	r2, r0, r2, r3
 800513e:	2101      	movs	r1, #1
 8005140:	e7f4      	b.n	800512c <_vfiprintf_r+0x170>
 8005142:	2900      	cmp	r1, #0
 8005144:	f43f af79 	beq.w	800503a <_vfiprintf_r+0x7e>
 8005148:	9207      	str	r2, [sp, #28]
 800514a:	e776      	b.n	800503a <_vfiprintf_r+0x7e>
 800514c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005150:	2b2a      	cmp	r3, #42	; 0x2a
 8005152:	d10b      	bne.n	800516c <_vfiprintf_r+0x1b0>
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	1d1a      	adds	r2, r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	9203      	str	r2, [sp, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	bfb8      	it	lt
 8005160:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005164:	f108 0802 	add.w	r8, r8, #2
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	e76b      	b.n	8005044 <_vfiprintf_r+0x88>
 800516c:	2300      	movs	r3, #0
 800516e:	9305      	str	r3, [sp, #20]
 8005170:	f108 0001 	add.w	r0, r8, #1
 8005174:	4619      	mov	r1, r3
 8005176:	250a      	movs	r5, #10
 8005178:	4680      	mov	r8, r0
 800517a:	3001      	adds	r0, #1
 800517c:	f898 2000 	ldrb.w	r2, [r8]
 8005180:	3a30      	subs	r2, #48	; 0x30
 8005182:	2a09      	cmp	r2, #9
 8005184:	d803      	bhi.n	800518e <_vfiprintf_r+0x1d2>
 8005186:	fb05 2101 	mla	r1, r5, r1, r2
 800518a:	2301      	movs	r3, #1
 800518c:	e7f4      	b.n	8005178 <_vfiprintf_r+0x1bc>
 800518e:	2b00      	cmp	r3, #0
 8005190:	f43f af58 	beq.w	8005044 <_vfiprintf_r+0x88>
 8005194:	9105      	str	r1, [sp, #20]
 8005196:	e755      	b.n	8005044 <_vfiprintf_r+0x88>
 8005198:	ab03      	add	r3, sp, #12
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	4622      	mov	r2, r4
 800519e:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <_vfiprintf_r+0x234>)
 80051a0:	a904      	add	r1, sp, #16
 80051a2:	4630      	mov	r0, r6
 80051a4:	f3af 8000 	nop.w
 80051a8:	e007      	b.n	80051ba <_vfiprintf_r+0x1fe>
 80051aa:	ab03      	add	r3, sp, #12
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	4622      	mov	r2, r4
 80051b0:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <_vfiprintf_r+0x234>)
 80051b2:	a904      	add	r1, sp, #16
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 f893 	bl	80052e0 <_printf_i>
 80051ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80051be:	4682      	mov	sl, r0
 80051c0:	f47f af68 	bne.w	8005094 <_vfiprintf_r+0xd8>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	065b      	lsls	r3, r3, #25
 80051c8:	f53f af28 	bmi.w	800501c <_vfiprintf_r+0x60>
 80051cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ce:	b01d      	add	sp, #116	; 0x74
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	08006068 	.word	0x08006068
 80051d8:	08006088 	.word	0x08006088
 80051dc:	080060a8 	.word	0x080060a8
 80051e0:	080060ce 	.word	0x080060ce
 80051e4:	080060d2 	.word	0x080060d2
 80051e8:	00000000 	.word	0x00000000
 80051ec:	080060c8 	.word	0x080060c8
 80051f0:	08004f99 	.word	0x08004f99

080051f4 <_printf_common>:
 80051f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f8:	4691      	mov	r9, r2
 80051fa:	461f      	mov	r7, r3
 80051fc:	690a      	ldr	r2, [r1, #16]
 80051fe:	688b      	ldr	r3, [r1, #8]
 8005200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005204:	4293      	cmp	r3, r2
 8005206:	bfb8      	it	lt
 8005208:	4613      	movlt	r3, r2
 800520a:	f8c9 3000 	str.w	r3, [r9]
 800520e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005212:	4606      	mov	r6, r0
 8005214:	460c      	mov	r4, r1
 8005216:	b112      	cbz	r2, 800521e <_printf_common+0x2a>
 8005218:	3301      	adds	r3, #1
 800521a:	f8c9 3000 	str.w	r3, [r9]
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	0699      	lsls	r1, r3, #26
 8005222:	bf42      	ittt	mi
 8005224:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005228:	3302      	addmi	r3, #2
 800522a:	f8c9 3000 	strmi.w	r3, [r9]
 800522e:	6825      	ldr	r5, [r4, #0]
 8005230:	f015 0506 	ands.w	r5, r5, #6
 8005234:	d110      	bne.n	8005258 <_printf_common+0x64>
 8005236:	f104 0a19 	add.w	sl, r4, #25
 800523a:	e007      	b.n	800524c <_printf_common+0x58>
 800523c:	2301      	movs	r3, #1
 800523e:	4652      	mov	r2, sl
 8005240:	4639      	mov	r1, r7
 8005242:	4630      	mov	r0, r6
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d01a      	beq.n	8005280 <_printf_common+0x8c>
 800524a:	3501      	adds	r5, #1
 800524c:	68e3      	ldr	r3, [r4, #12]
 800524e:	f8d9 2000 	ldr.w	r2, [r9]
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	429d      	cmp	r5, r3
 8005256:	dbf1      	blt.n	800523c <_printf_common+0x48>
 8005258:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800525c:	6822      	ldr	r2, [r4, #0]
 800525e:	3300      	adds	r3, #0
 8005260:	bf18      	it	ne
 8005262:	2301      	movne	r3, #1
 8005264:	0692      	lsls	r2, r2, #26
 8005266:	d50f      	bpl.n	8005288 <_printf_common+0x94>
 8005268:	18e1      	adds	r1, r4, r3
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	2030      	movs	r0, #48	; 0x30
 800526e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005272:	4422      	add	r2, r4
 8005274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800527c:	3302      	adds	r3, #2
 800527e:	e003      	b.n	8005288 <_printf_common+0x94>
 8005280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800528c:	4639      	mov	r1, r7
 800528e:	4630      	mov	r0, r6
 8005290:	47c0      	blx	r8
 8005292:	3001      	adds	r0, #1
 8005294:	d0f4      	beq.n	8005280 <_printf_common+0x8c>
 8005296:	6822      	ldr	r2, [r4, #0]
 8005298:	f8d9 5000 	ldr.w	r5, [r9]
 800529c:	68e3      	ldr	r3, [r4, #12]
 800529e:	f002 0206 	and.w	r2, r2, #6
 80052a2:	2a04      	cmp	r2, #4
 80052a4:	bf08      	it	eq
 80052a6:	1b5d      	subeq	r5, r3, r5
 80052a8:	6922      	ldr	r2, [r4, #16]
 80052aa:	68a3      	ldr	r3, [r4, #8]
 80052ac:	bf0c      	ite	eq
 80052ae:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b2:	2500      	movne	r5, #0
 80052b4:	4293      	cmp	r3, r2
 80052b6:	bfc4      	itt	gt
 80052b8:	1a9b      	subgt	r3, r3, r2
 80052ba:	18ed      	addgt	r5, r5, r3
 80052bc:	f04f 0900 	mov.w	r9, #0
 80052c0:	341a      	adds	r4, #26
 80052c2:	454d      	cmp	r5, r9
 80052c4:	d009      	beq.n	80052da <_printf_common+0xe6>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4622      	mov	r2, r4
 80052ca:	4639      	mov	r1, r7
 80052cc:	4630      	mov	r0, r6
 80052ce:	47c0      	blx	r8
 80052d0:	3001      	adds	r0, #1
 80052d2:	d0d5      	beq.n	8005280 <_printf_common+0x8c>
 80052d4:	f109 0901 	add.w	r9, r9, #1
 80052d8:	e7f3      	b.n	80052c2 <_printf_common+0xce>
 80052da:	2000      	movs	r0, #0
 80052dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080052e0 <_printf_i>:
 80052e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052e4:	4617      	mov	r7, r2
 80052e6:	7e0a      	ldrb	r2, [r1, #24]
 80052e8:	b085      	sub	sp, #20
 80052ea:	2a6e      	cmp	r2, #110	; 0x6e
 80052ec:	4698      	mov	r8, r3
 80052ee:	4606      	mov	r6, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052f4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80052f8:	f000 80ae 	beq.w	8005458 <_printf_i+0x178>
 80052fc:	d811      	bhi.n	8005322 <_printf_i+0x42>
 80052fe:	2a63      	cmp	r2, #99	; 0x63
 8005300:	d022      	beq.n	8005348 <_printf_i+0x68>
 8005302:	d809      	bhi.n	8005318 <_printf_i+0x38>
 8005304:	2a00      	cmp	r2, #0
 8005306:	f000 80bb 	beq.w	8005480 <_printf_i+0x1a0>
 800530a:	2a58      	cmp	r2, #88	; 0x58
 800530c:	f040 80ca 	bne.w	80054a4 <_printf_i+0x1c4>
 8005310:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005314:	4983      	ldr	r1, [pc, #524]	; (8005524 <_printf_i+0x244>)
 8005316:	e055      	b.n	80053c4 <_printf_i+0xe4>
 8005318:	2a64      	cmp	r2, #100	; 0x64
 800531a:	d01e      	beq.n	800535a <_printf_i+0x7a>
 800531c:	2a69      	cmp	r2, #105	; 0x69
 800531e:	d01c      	beq.n	800535a <_printf_i+0x7a>
 8005320:	e0c0      	b.n	80054a4 <_printf_i+0x1c4>
 8005322:	2a73      	cmp	r2, #115	; 0x73
 8005324:	f000 80b0 	beq.w	8005488 <_printf_i+0x1a8>
 8005328:	d809      	bhi.n	800533e <_printf_i+0x5e>
 800532a:	2a6f      	cmp	r2, #111	; 0x6f
 800532c:	d02e      	beq.n	800538c <_printf_i+0xac>
 800532e:	2a70      	cmp	r2, #112	; 0x70
 8005330:	f040 80b8 	bne.w	80054a4 <_printf_i+0x1c4>
 8005334:	680a      	ldr	r2, [r1, #0]
 8005336:	f042 0220 	orr.w	r2, r2, #32
 800533a:	600a      	str	r2, [r1, #0]
 800533c:	e03e      	b.n	80053bc <_printf_i+0xdc>
 800533e:	2a75      	cmp	r2, #117	; 0x75
 8005340:	d024      	beq.n	800538c <_printf_i+0xac>
 8005342:	2a78      	cmp	r2, #120	; 0x78
 8005344:	d03a      	beq.n	80053bc <_printf_i+0xdc>
 8005346:	e0ad      	b.n	80054a4 <_printf_i+0x1c4>
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800534e:	1d11      	adds	r1, r2, #4
 8005350:	6019      	str	r1, [r3, #0]
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005358:	e0a8      	b.n	80054ac <_printf_i+0x1cc>
 800535a:	6821      	ldr	r1, [r4, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005362:	d002      	beq.n	800536a <_printf_i+0x8a>
 8005364:	1d11      	adds	r1, r2, #4
 8005366:	6019      	str	r1, [r3, #0]
 8005368:	e008      	b.n	800537c <_printf_i+0x9c>
 800536a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800536e:	f102 0104 	add.w	r1, r2, #4
 8005372:	6019      	str	r1, [r3, #0]
 8005374:	d002      	beq.n	800537c <_printf_i+0x9c>
 8005376:	f9b2 3000 	ldrsh.w	r3, [r2]
 800537a:	e000      	b.n	800537e <_printf_i+0x9e>
 800537c:	6813      	ldr	r3, [r2, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	da3c      	bge.n	80053fc <_printf_i+0x11c>
 8005382:	222d      	movs	r2, #45	; 0x2d
 8005384:	425b      	negs	r3, r3
 8005386:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800538a:	e037      	b.n	80053fc <_printf_i+0x11c>
 800538c:	6821      	ldr	r1, [r4, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005394:	d002      	beq.n	800539c <_printf_i+0xbc>
 8005396:	1d11      	adds	r1, r2, #4
 8005398:	6019      	str	r1, [r3, #0]
 800539a:	e007      	b.n	80053ac <_printf_i+0xcc>
 800539c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80053a0:	f102 0104 	add.w	r1, r2, #4
 80053a4:	6019      	str	r1, [r3, #0]
 80053a6:	d001      	beq.n	80053ac <_printf_i+0xcc>
 80053a8:	8813      	ldrh	r3, [r2, #0]
 80053aa:	e000      	b.n	80053ae <_printf_i+0xce>
 80053ac:	6813      	ldr	r3, [r2, #0]
 80053ae:	7e22      	ldrb	r2, [r4, #24]
 80053b0:	495c      	ldr	r1, [pc, #368]	; (8005524 <_printf_i+0x244>)
 80053b2:	2a6f      	cmp	r2, #111	; 0x6f
 80053b4:	bf14      	ite	ne
 80053b6:	220a      	movne	r2, #10
 80053b8:	2208      	moveq	r2, #8
 80053ba:	e01b      	b.n	80053f4 <_printf_i+0x114>
 80053bc:	2278      	movs	r2, #120	; 0x78
 80053be:	495a      	ldr	r1, [pc, #360]	; (8005528 <_printf_i+0x248>)
 80053c0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053cc:	f100 0504 	add.w	r5, r0, #4
 80053d0:	601d      	str	r5, [r3, #0]
 80053d2:	d103      	bne.n	80053dc <_printf_i+0xfc>
 80053d4:	0655      	lsls	r5, r2, #25
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0xfc>
 80053d8:	8803      	ldrh	r3, [r0, #0]
 80053da:	e000      	b.n	80053de <_printf_i+0xfe>
 80053dc:	6803      	ldr	r3, [r0, #0]
 80053de:	07d0      	lsls	r0, r2, #31
 80053e0:	bf44      	itt	mi
 80053e2:	f042 0220 	orrmi.w	r2, r2, #32
 80053e6:	6022      	strmi	r2, [r4, #0]
 80053e8:	b91b      	cbnz	r3, 80053f2 <_printf_i+0x112>
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	f022 0220 	bic.w	r2, r2, #32
 80053f0:	6022      	str	r2, [r4, #0]
 80053f2:	2210      	movs	r2, #16
 80053f4:	2000      	movs	r0, #0
 80053f6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80053fa:	e001      	b.n	8005400 <_printf_i+0x120>
 80053fc:	4949      	ldr	r1, [pc, #292]	; (8005524 <_printf_i+0x244>)
 80053fe:	220a      	movs	r2, #10
 8005400:	6865      	ldr	r5, [r4, #4]
 8005402:	60a5      	str	r5, [r4, #8]
 8005404:	2d00      	cmp	r5, #0
 8005406:	db08      	blt.n	800541a <_printf_i+0x13a>
 8005408:	6820      	ldr	r0, [r4, #0]
 800540a:	f020 0004 	bic.w	r0, r0, #4
 800540e:	6020      	str	r0, [r4, #0]
 8005410:	b92b      	cbnz	r3, 800541e <_printf_i+0x13e>
 8005412:	2d00      	cmp	r5, #0
 8005414:	d17d      	bne.n	8005512 <_printf_i+0x232>
 8005416:	4675      	mov	r5, lr
 8005418:	e00c      	b.n	8005434 <_printf_i+0x154>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d079      	beq.n	8005512 <_printf_i+0x232>
 800541e:	4675      	mov	r5, lr
 8005420:	fbb3 f0f2 	udiv	r0, r3, r2
 8005424:	fb02 3310 	mls	r3, r2, r0, r3
 8005428:	5ccb      	ldrb	r3, [r1, r3]
 800542a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800542e:	4603      	mov	r3, r0
 8005430:	2800      	cmp	r0, #0
 8005432:	d1f5      	bne.n	8005420 <_printf_i+0x140>
 8005434:	2a08      	cmp	r2, #8
 8005436:	d10b      	bne.n	8005450 <_printf_i+0x170>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	07da      	lsls	r2, r3, #31
 800543c:	d508      	bpl.n	8005450 <_printf_i+0x170>
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	6862      	ldr	r2, [r4, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	bfde      	ittt	le
 8005446:	2330      	movle	r3, #48	; 0x30
 8005448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800544c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005450:	ebc5 030e 	rsb	r3, r5, lr
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	e02e      	b.n	80054b6 <_printf_i+0x1d6>
 8005458:	6808      	ldr	r0, [r1, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	6949      	ldr	r1, [r1, #20]
 800545e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005462:	d003      	beq.n	800546c <_printf_i+0x18c>
 8005464:	1d10      	adds	r0, r2, #4
 8005466:	6018      	str	r0, [r3, #0]
 8005468:	6813      	ldr	r3, [r2, #0]
 800546a:	e008      	b.n	800547e <_printf_i+0x19e>
 800546c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005470:	f102 0004 	add.w	r0, r2, #4
 8005474:	6018      	str	r0, [r3, #0]
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	d001      	beq.n	800547e <_printf_i+0x19e>
 800547a:	8019      	strh	r1, [r3, #0]
 800547c:	e000      	b.n	8005480 <_printf_i+0x1a0>
 800547e:	6019      	str	r1, [r3, #0]
 8005480:	2300      	movs	r3, #0
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	4675      	mov	r5, lr
 8005486:	e016      	b.n	80054b6 <_printf_i+0x1d6>
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	1d11      	adds	r1, r2, #4
 800548c:	6019      	str	r1, [r3, #0]
 800548e:	6815      	ldr	r5, [r2, #0]
 8005490:	6862      	ldr	r2, [r4, #4]
 8005492:	2100      	movs	r1, #0
 8005494:	4628      	mov	r0, r5
 8005496:	f7fc f8bb 	bl	8001610 <memchr>
 800549a:	b108      	cbz	r0, 80054a0 <_printf_i+0x1c0>
 800549c:	1b40      	subs	r0, r0, r5
 800549e:	6060      	str	r0, [r4, #4]
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	e004      	b.n	80054ae <_printf_i+0x1ce>
 80054a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80054ac:	2301      	movs	r3, #1
 80054ae:	6123      	str	r3, [r4, #16]
 80054b0:	2300      	movs	r3, #0
 80054b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b6:	f8cd 8000 	str.w	r8, [sp]
 80054ba:	463b      	mov	r3, r7
 80054bc:	aa03      	add	r2, sp, #12
 80054be:	4621      	mov	r1, r4
 80054c0:	4630      	mov	r0, r6
 80054c2:	f7ff fe97 	bl	80051f4 <_printf_common>
 80054c6:	3001      	adds	r0, #1
 80054c8:	d102      	bne.n	80054d0 <_printf_i+0x1f0>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ce:	e026      	b.n	800551e <_printf_i+0x23e>
 80054d0:	6923      	ldr	r3, [r4, #16]
 80054d2:	462a      	mov	r2, r5
 80054d4:	4639      	mov	r1, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	47c0      	blx	r8
 80054da:	3001      	adds	r0, #1
 80054dc:	d0f5      	beq.n	80054ca <_printf_i+0x1ea>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	079b      	lsls	r3, r3, #30
 80054e2:	d510      	bpl.n	8005506 <_printf_i+0x226>
 80054e4:	2500      	movs	r5, #0
 80054e6:	f104 0919 	add.w	r9, r4, #25
 80054ea:	e007      	b.n	80054fc <_printf_i+0x21c>
 80054ec:	2301      	movs	r3, #1
 80054ee:	464a      	mov	r2, r9
 80054f0:	4639      	mov	r1, r7
 80054f2:	4630      	mov	r0, r6
 80054f4:	47c0      	blx	r8
 80054f6:	3001      	adds	r0, #1
 80054f8:	d0e7      	beq.n	80054ca <_printf_i+0x1ea>
 80054fa:	3501      	adds	r5, #1
 80054fc:	68e3      	ldr	r3, [r4, #12]
 80054fe:	9a03      	ldr	r2, [sp, #12]
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	429d      	cmp	r5, r3
 8005504:	dbf2      	blt.n	80054ec <_printf_i+0x20c>
 8005506:	68e0      	ldr	r0, [r4, #12]
 8005508:	9b03      	ldr	r3, [sp, #12]
 800550a:	4298      	cmp	r0, r3
 800550c:	bfb8      	it	lt
 800550e:	4618      	movlt	r0, r3
 8005510:	e005      	b.n	800551e <_printf_i+0x23e>
 8005512:	780b      	ldrb	r3, [r1, #0]
 8005514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800551c:	e78a      	b.n	8005434 <_printf_i+0x154>
 800551e:	b005      	add	sp, #20
 8005520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005524:	080060d9 	.word	0x080060d9
 8005528:	080060ea 	.word	0x080060ea

0800552c <_sbrk_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4c06      	ldr	r4, [pc, #24]	; (8005548 <_sbrk_r+0x1c>)
 8005530:	2300      	movs	r3, #0
 8005532:	4605      	mov	r5, r0
 8005534:	4608      	mov	r0, r1
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	f000 f8e4 	bl	8005704 <_sbrk>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_sbrk_r+0x1a>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	b103      	cbz	r3, 8005546 <_sbrk_r+0x1a>
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	20003cf4 	.word	0x20003cf4

0800554c <__sread>:
 800554c:	b510      	push	{r4, lr}
 800554e:	460c      	mov	r4, r1
 8005550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005554:	f000 f894 	bl	8005680 <_read_r>
 8005558:	2800      	cmp	r0, #0
 800555a:	bfab      	itete	ge
 800555c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800555e:	89a3      	ldrhlt	r3, [r4, #12]
 8005560:	181b      	addge	r3, r3, r0
 8005562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005566:	bfac      	ite	ge
 8005568:	6563      	strge	r3, [r4, #84]	; 0x54
 800556a:	81a3      	strhlt	r3, [r4, #12]
 800556c:	bd10      	pop	{r4, pc}

0800556e <__swrite>:
 800556e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005572:	461f      	mov	r7, r3
 8005574:	898b      	ldrh	r3, [r1, #12]
 8005576:	05db      	lsls	r3, r3, #23
 8005578:	4605      	mov	r5, r0
 800557a:	460c      	mov	r4, r1
 800557c:	4616      	mov	r6, r2
 800557e:	d505      	bpl.n	800558c <__swrite+0x1e>
 8005580:	2302      	movs	r3, #2
 8005582:	2200      	movs	r2, #0
 8005584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005588:	f000 f868 	bl	800565c <_lseek_r>
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	4632      	mov	r2, r6
 800559a:	463b      	mov	r3, r7
 800559c:	4628      	mov	r0, r5
 800559e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a2:	f000 b817 	b.w	80055d4 <_write_r>

080055a6 <__sseek>:
 80055a6:	b510      	push	{r4, lr}
 80055a8:	460c      	mov	r4, r1
 80055aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ae:	f000 f855 	bl	800565c <_lseek_r>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	bf15      	itete	ne
 80055b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055c2:	81a3      	strheq	r3, [r4, #12]
 80055c4:	bf18      	it	ne
 80055c6:	81a3      	strhne	r3, [r4, #12]
 80055c8:	bd10      	pop	{r4, pc}

080055ca <__sclose>:
 80055ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ce:	f000 b813 	b.w	80055f8 <_close_r>
	...

080055d4 <_write_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4c07      	ldr	r4, [pc, #28]	; (80055f4 <_write_r+0x20>)
 80055d8:	4605      	mov	r5, r0
 80055da:	4608      	mov	r0, r1
 80055dc:	4611      	mov	r1, r2
 80055de:	2200      	movs	r2, #0
 80055e0:	6022      	str	r2, [r4, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f7fe fc06 	bl	8003df4 <_write>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_write_r+0x1e>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_write_r+0x1e>
 80055f0:	602b      	str	r3, [r5, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20003cf4 	.word	0x20003cf4

080055f8 <_close_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4c06      	ldr	r4, [pc, #24]	; (8005614 <_close_r+0x1c>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4605      	mov	r5, r0
 8005600:	4608      	mov	r0, r1
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	f000 f84e 	bl	80056a4 <_close>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_close_r+0x1a>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	b103      	cbz	r3, 8005612 <_close_r+0x1a>
 8005610:	602b      	str	r3, [r5, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20003cf4 	.word	0x20003cf4

08005618 <_fstat_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4c07      	ldr	r4, [pc, #28]	; (8005638 <_fstat_r+0x20>)
 800561c:	2300      	movs	r3, #0
 800561e:	4605      	mov	r5, r0
 8005620:	4608      	mov	r0, r1
 8005622:	4611      	mov	r1, r2
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	f000 f845 	bl	80056b4 <_fstat>
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	d102      	bne.n	8005634 <_fstat_r+0x1c>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	b103      	cbz	r3, 8005634 <_fstat_r+0x1c>
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	bd38      	pop	{r3, r4, r5, pc}
 8005636:	bf00      	nop
 8005638:	20003cf4 	.word	0x20003cf4

0800563c <_isatty_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4c06      	ldr	r4, [pc, #24]	; (8005658 <_isatty_r+0x1c>)
 8005640:	2300      	movs	r3, #0
 8005642:	4605      	mov	r5, r0
 8005644:	4608      	mov	r0, r1
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	f000 f844 	bl	80056d4 <_isatty>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_isatty_r+0x1a>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	b103      	cbz	r3, 8005656 <_isatty_r+0x1a>
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	20003cf4 	.word	0x20003cf4

0800565c <_lseek_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4c07      	ldr	r4, [pc, #28]	; (800567c <_lseek_r+0x20>)
 8005660:	4605      	mov	r5, r0
 8005662:	4608      	mov	r0, r1
 8005664:	4611      	mov	r1, r2
 8005666:	2200      	movs	r2, #0
 8005668:	6022      	str	r2, [r4, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f000 f842 	bl	80056f4 <_lseek>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_lseek_r+0x1e>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	b103      	cbz	r3, 800567a <_lseek_r+0x1e>
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	20003cf4 	.word	0x20003cf4

08005680 <_read_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4c07      	ldr	r4, [pc, #28]	; (80056a0 <_read_r+0x20>)
 8005684:	4605      	mov	r5, r0
 8005686:	4608      	mov	r0, r1
 8005688:	4611      	mov	r1, r2
 800568a:	2200      	movs	r2, #0
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	f7fe fbc2 	bl	8003e18 <_read>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d102      	bne.n	800569e <_read_r+0x1e>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	b103      	cbz	r3, 800569e <_read_r+0x1e>
 800569c:	602b      	str	r3, [r5, #0]
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	20003cf4 	.word	0x20003cf4

080056a4 <_close>:
 80056a4:	4b02      	ldr	r3, [pc, #8]	; (80056b0 <_close+0xc>)
 80056a6:	2258      	movs	r2, #88	; 0x58
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ae:	4770      	bx	lr
 80056b0:	20003cf4 	.word	0x20003cf4

080056b4 <_fstat>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <_fstat+0xc>)
 80056b6:	2258      	movs	r2, #88	; 0x58
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056be:	4770      	bx	lr
 80056c0:	20003cf4 	.word	0x20003cf4

080056c4 <_getpid>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <_getpid+0xc>)
 80056c6:	2258      	movs	r2, #88	; 0x58
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ce:	4770      	bx	lr
 80056d0:	20003cf4 	.word	0x20003cf4

080056d4 <_isatty>:
 80056d4:	4b02      	ldr	r3, [pc, #8]	; (80056e0 <_isatty+0xc>)
 80056d6:	2258      	movs	r2, #88	; 0x58
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	2000      	movs	r0, #0
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20003cf4 	.word	0x20003cf4

080056e4 <_kill>:
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <_kill+0xc>)
 80056e6:	2258      	movs	r2, #88	; 0x58
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ee:	4770      	bx	lr
 80056f0:	20003cf4 	.word	0x20003cf4

080056f4 <_lseek>:
 80056f4:	4b02      	ldr	r3, [pc, #8]	; (8005700 <_lseek+0xc>)
 80056f6:	2258      	movs	r2, #88	; 0x58
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056fe:	4770      	bx	lr
 8005700:	20003cf4 	.word	0x20003cf4

08005704 <_sbrk>:
 8005704:	4a04      	ldr	r2, [pc, #16]	; (8005718 <_sbrk+0x14>)
 8005706:	4905      	ldr	r1, [pc, #20]	; (800571c <_sbrk+0x18>)
 8005708:	6813      	ldr	r3, [r2, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf08      	it	eq
 800570e:	460b      	moveq	r3, r1
 8005710:	4418      	add	r0, r3
 8005712:	6010      	str	r0, [r2, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	4770      	bx	lr
 8005718:	2000016c 	.word	0x2000016c
 800571c:	20003cf8 	.word	0x20003cf8

08005720 <_exit>:
 8005720:	e7fe      	b.n	8005720 <_exit>
 8005722:	bf00      	nop
 8005724:	35326363 	.word	0x35326363
 8005728:	203a3032 	.word	0x203a3032
 800572c:	656d6974 	.word	0x656d6974
 8005730:	2074756f 	.word	0x2074756f
 8005734:	74696e69 	.word	0x74696e69
 8005738:	696c6169 	.word	0x696c6169
 800573c:	676e697a 	.word	0x676e697a
 8005740:	63736f20 	.word	0x63736f20
 8005744:	616c6c69 	.word	0x616c6c69
 8005748:	21726f74 	.word	0x21726f74
 800574c:	00000d0a 	.word	0x00000d0a
 8005750:	35326363 	.word	0x35326363
 8005754:	203a3032 	.word	0x203a3032
 8005758:	6963736f 	.word	0x6963736f
 800575c:	74616c6c 	.word	0x74616c6c
 8005760:	7320726f 	.word	0x7320726f
 8005764:	6c626174 	.word	0x6c626174
 8005768:	0d0a2e65 	.word	0x0d0a2e65
 800576c:	00000000 	.word	0x00000000
 8005770:	35324343 	.word	0x35324343
 8005774:	203a3032 	.word	0x203a3032
 8005778:	6e6b6e55 	.word	0x6e6b6e55
 800577c:	206e776f 	.word	0x206e776f
 8005780:	74617473 	.word	0x74617473
 8005784:	25282065 	.word	0x25282065
 8005788:	0a0d2969 	.word	0x0a0d2969
 800578c:	00000000 	.word	0x00000000
 8005790:	35324343 	.word	0x35324343
 8005794:	49203032 	.word	0x49203032
 8005798:	2e74696e 	.word	0x2e74696e
 800579c:	000d2e2e 	.word	0x000d2e2e

080057a0 <sinTable_f32>:
 80057a0:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
 80057b0:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
 80057c0:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
 80057d0:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
 80057e0:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
 80057f0:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
 8005800:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
 8005810:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
 8005820:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
 8005830:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
 8005840:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
 8005850:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
 8005860:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
 8005870:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
 8005880:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
 8005890:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
 80058a0:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
 80058b0:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
 80058c0:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
 80058d0:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
 80058e0:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
 80058f0:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
 8005900:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
 8005910:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
 8005920:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
 8005930:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
 8005940:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
 8005950:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
 8005960:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
 8005970:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
 8005980:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
 8005990:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
 80059a0:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
 80059b0:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
 80059c0:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
 80059d0:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
 80059e0:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
 80059f0:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
 8005a00:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
 8005a10:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
 8005a20:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
 8005a30:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
 8005a40:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
 8005a50:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
 8005a60:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
 8005a70:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
 8005a80:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
 8005a90:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
 8005aa0:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
 8005ab0:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
 8005ac0:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
 8005ad0:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
 8005ae0:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
 8005af0:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
 8005b00:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
 8005b10:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
 8005b20:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
 8005b30:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
 8005b40:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
 8005b50:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
 8005b60:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
 8005b70:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
 8005b80:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
 8005b90:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
 8005ba0:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
 8005bb0:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
 8005bc0:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
 8005bd0:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
 8005be0:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
 8005bf0:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
 8005c00:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
 8005c10:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
 8005c20:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
 8005c30:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
 8005c40:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
 8005c50:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
 8005c60:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
 8005c70:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
 8005c80:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
 8005c90:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
 8005ca0:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
 8005cb0:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
 8005cc0:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
 8005cd0:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
 8005ce0:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
 8005cf0:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
 8005d00:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
 8005d10:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
 8005d20:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
 8005d30:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
 8005d40:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
 8005d50:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
 8005d60:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
 8005d70:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
 8005d80:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
 8005d90:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
 8005da0:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
 8005db0:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
 8005dc0:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
 8005dd0:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
 8005de0:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
 8005df0:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
 8005e00:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
 8005e10:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
 8005e20:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
 8005e30:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
 8005e40:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
 8005e50:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
 8005e60:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
 8005e70:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
 8005e80:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
 8005e90:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
 8005ea0:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
 8005eb0:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
 8005ec0:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
 8005ed0:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
 8005ee0:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
 8005ef0:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
 8005f00:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
 8005f10:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
 8005f20:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
 8005f30:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
 8005f40:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
 8005f50:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
 8005f60:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
 8005f70:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
 8005f80:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
 8005f90:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
 8005fa0:	80000000                                ....

08005fa4 <os_maxtaskrun>:
 8005fa4:	00000007                                ....

08005fa8 <os_stackinfo>:
 8005fa8:	010207d0                                ....

08005fac <os_rrobin>:
 8005fac:	00010005                                ....

08005fb0 <os_trv>:
 8005fb0:	0001193f                                ?...

08005fb4 <os_flags>:
 8005fb4:	00000001                                ....

08005fb8 <os_clockrate>:
 8005fb8:	000003e8                                ....

08005fbc <mp_tcb_size>:
 8005fbc:	00000178                                x...

08005fc0 <mp_stk_size>:
 8005fc0:	00002ef0                                ....

08005fc4 <os_stack_sz>:
 8005fc4:	000008b8                                ....

08005fc8 <os_fifo_size>:
 8005fc8:	00000010                                ....

08005fcc <os_thread_def_osTimerThread>:
 8005fcc:	08001f49 00000002 00000001 000000c8     I...............

08005fdc <os_messageQ_def_osTimerMessageQ>:
 8005fdc:	00000004 2000006c                       ....l.. 

08005fe4 <mp_tmr_size>:
 8005fe4:	00000000                                ....

08005fe8 <os_thread_def_Thread>:
 8005fe8:	08003c39 00000000 00000001 00000000     9<..............

08005ff8 <os_thread_def_Thread_StsLED>:
 8005ff8:	08003d5d 00000000 00000001 00000000     ]=..............
 8006008:	76696c41 25203a65 000a0d69 2d2d0a0d     Alive: %i.....--
 8006018:	42202d2d 5458494c 2d204e45 0d2d2d2d     -- BLIXTEN ----.
 8006028:	00000000 3a555043 4d545320 33463233     ....CPU: STM32F3
 8006038:	384b3230 3237202c 2c7a484d 6e757220     02K8, 72MHz, run
 8006048:	676e696e 00000d20                       ning ...

08006050 <os_thread_def_cc2520_thread>:
 8006050:	08004501 00000000 00000001 00000000     .E..............
 8006060:	00000043                                C...

08006064 <_global_impure_ptr>:
 8006064:	20000004                                ... 

08006068 <__sf_fake_stdin>:
	...

08006088 <__sf_fake_stdout>:
	...

080060a8 <__sf_fake_stderr>:
	...
 80060c8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 80060d8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 80060e8:	31300046 35343332 39383736 64636261     F.0123456789abcd
 80060f8:	00006665                                ef..

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
